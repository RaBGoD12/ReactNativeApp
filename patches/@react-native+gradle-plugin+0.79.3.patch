diff --git a/node_modules/@react-native/gradle-plugin/.gradle/8.0/executionHistory/executionHistory.bin b/node_modules/@react-native/gradle-plugin/.gradle/8.0/executionHistory/executionHistory.bin
new file mode 100644
index 0000000..d38db33
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/.gradle/8.0/executionHistory/executionHistory.bin differ
diff --git a/node_modules/@react-native/gradle-plugin/.gradle/8.0/executionHistory/executionHistory.lock b/node_modules/@react-native/gradle-plugin/.gradle/8.0/executionHistory/executionHistory.lock
new file mode 100644
index 0000000..843a68d
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/.gradle/8.0/executionHistory/executionHistory.lock differ
diff --git a/node_modules/@react-native/gradle-plugin/.gradle/8.13/executionHistory/executionHistory.bin b/node_modules/@react-native/gradle-plugin/.gradle/8.13/executionHistory/executionHistory.bin
new file mode 100644
index 0000000..1dc42f3
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/.gradle/8.13/executionHistory/executionHistory.bin differ
diff --git a/node_modules/@react-native/gradle-plugin/.gradle/8.13/executionHistory/executionHistory.lock b/node_modules/@react-native/gradle-plugin/.gradle/8.13/executionHistory/executionHistory.lock
new file mode 100644
index 0000000..75ededb
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/.gradle/8.13/executionHistory/executionHistory.lock differ
diff --git a/node_modules/@react-native/gradle-plugin/.gradle/buildOutputCleanup/buildOutputCleanup.lock b/node_modules/@react-native/gradle-plugin/.gradle/buildOutputCleanup/buildOutputCleanup.lock
new file mode 100644
index 0000000..3c2e703
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/.gradle/buildOutputCleanup/buildOutputCleanup.lock differ
diff --git a/node_modules/@react-native/gradle-plugin/.gradle/buildOutputCleanup/cache.properties b/node_modules/@react-native/gradle-plugin/.gradle/buildOutputCleanup/cache.properties
new file mode 100644
index 0000000..41cd254
--- /dev/null
+++ b/node_modules/@react-native/gradle-plugin/.gradle/buildOutputCleanup/cache.properties
@@ -0,0 +1,2 @@
+#Sun Jun 15 10:08:24 COT 2025
+gradle.version=8.0
diff --git a/node_modules/@react-native/gradle-plugin/.gradle/buildOutputCleanup/outputFiles.bin b/node_modules/@react-native/gradle-plugin/.gradle/buildOutputCleanup/outputFiles.bin
new file mode 100644
index 0000000..a8ff09e
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/.gradle/buildOutputCleanup/outputFiles.bin differ
diff --git a/node_modules/@react-native/gradle-plugin/.gradle/file-system.probe b/node_modules/@react-native/gradle-plugin/.gradle/file-system.probe
new file mode 100644
index 0000000..06f56dc
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/.gradle/file-system.probe differ
diff --git a/node_modules/@react-native/gradle-plugin/.project b/node_modules/@react-native/gradle-plugin/.project
new file mode 100644
index 0000000..0853bf3
--- /dev/null
+++ b/node_modules/@react-native/gradle-plugin/.project
@@ -0,0 +1,28 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<projectDescription>
+	<name>gradle-plugin-root-gradle-plugin</name>
+	<comment>Project gradle-plugin-root-gradle-plugin created by Buildship.</comment>
+	<projects>
+	</projects>
+	<buildSpec>
+		<buildCommand>
+			<name>org.eclipse.buildship.core.gradleprojectbuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+	</buildSpec>
+	<natures>
+		<nature>org.eclipse.buildship.core.gradleprojectnature</nature>
+	</natures>
+	<filteredResources>
+		<filter>
+			<id>1749999528553</id>
+			<name></name>
+			<type>30</type>
+			<matcher>
+				<id>org.eclipse.core.resources.regexFilterMatcher</id>
+				<arguments>node_modules|\.git|__CREATED_BY_JAVA_LANGUAGE_SERVER__</arguments>
+			</matcher>
+		</filter>
+	</filteredResources>
+</projectDescription>
diff --git a/node_modules/@react-native/gradle-plugin/.settings/org.eclipse.buildship.core.prefs b/node_modules/@react-native/gradle-plugin/.settings/org.eclipse.buildship.core.prefs
new file mode 100644
index 0000000..1675490
--- /dev/null
+++ b/node_modules/@react-native/gradle-plugin/.settings/org.eclipse.buildship.core.prefs
@@ -0,0 +1,2 @@
+connection.project.dir=../../../android
+eclipse.preferences.version=1
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/.classpath b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/.classpath
new file mode 100644
index 0000000..7c76343
--- /dev/null
+++ b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/.classpath
@@ -0,0 +1,19 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<classpath>
+	<classpathentry kind="src" output="bin/main" path="src/main/kotlin">
+		<attributes>
+			<attribute name="gradle_scope" value="main"/>
+			<attribute name="gradle_used_by_scope" value="main,test"/>
+		</attributes>
+	</classpathentry>
+	<classpathentry kind="src" output="bin/test" path="src/test/kotlin">
+		<attributes>
+			<attribute name="gradle_scope" value="test"/>
+			<attribute name="gradle_used_by_scope" value="test"/>
+			<attribute name="test" value="true"/>
+		</attributes>
+	</classpathentry>
+	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-11/"/>
+	<classpathentry kind="con" path="org.eclipse.buildship.core.gradleclasspathcontainer"/>
+	<classpathentry kind="output" path="bin/default"/>
+</classpath>
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/.project b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/.project
new file mode 100644
index 0000000..75d4df3
--- /dev/null
+++ b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/.project
@@ -0,0 +1,34 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<projectDescription>
+	<name>react-native-gradle-plugin</name>
+	<comment>Project react-native-gradle-plugin created by Buildship.</comment>
+	<projects>
+	</projects>
+	<buildSpec>
+		<buildCommand>
+			<name>org.eclipse.jdt.core.javabuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+		<buildCommand>
+			<name>org.eclipse.buildship.core.gradleprojectbuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+	</buildSpec>
+	<natures>
+		<nature>org.eclipse.jdt.core.javanature</nature>
+		<nature>org.eclipse.buildship.core.gradleprojectnature</nature>
+	</natures>
+	<filteredResources>
+		<filter>
+			<id>1749999528581</id>
+			<name></name>
+			<type>30</type>
+			<matcher>
+				<id>org.eclipse.core.resources.regexFilterMatcher</id>
+				<arguments>node_modules|\.git|__CREATED_BY_JAVA_LANGUAGE_SERVER__</arguments>
+			</matcher>
+		</filter>
+	</filteredResources>
+</projectDescription>
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/.settings/org.eclipse.buildship.core.prefs b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/.settings/org.eclipse.buildship.core.prefs
new file mode 100644
index 0000000..68c9fab
--- /dev/null
+++ b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/.settings/org.eclipse.buildship.core.prefs
@@ -0,0 +1,2 @@
+connection.project.dir=../../../../android
+eclipse.preferences.version=1
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/.settings/org.eclipse.jdt.core.prefs b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/.settings/org.eclipse.jdt.core.prefs
new file mode 100644
index 0000000..1d52336
--- /dev/null
+++ b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/.settings/org.eclipse.jdt.core.prefs
@@ -0,0 +1,15 @@
+eclipse.preferences.version=1
+org.eclipse.jdt.core.compiler.annotation.missingNonNullByDefaultAnnotation=ignore
+org.eclipse.jdt.core.compiler.annotation.nonnull=javax.annotation.Nonnull
+org.eclipse.jdt.core.compiler.annotation.nonnullbydefault=javax.annotation.ParametersAreNonnullByDefault
+org.eclipse.jdt.core.compiler.annotation.nullable=javax.annotation.Nullable
+org.eclipse.jdt.core.compiler.annotation.nullanalysis=enabled
+org.eclipse.jdt.core.compiler.codegen.targetPlatform=11
+org.eclipse.jdt.core.compiler.compliance=17
+org.eclipse.jdt.core.compiler.problem.nullAnnotationInferenceConflict=warning
+org.eclipse.jdt.core.compiler.problem.nullReference=warning
+org.eclipse.jdt.core.compiler.problem.nullSpecViolation=warning
+org.eclipse.jdt.core.compiler.problem.nullUncheckedConversion=ignore
+org.eclipse.jdt.core.compiler.problem.potentialNullReference=warning
+org.eclipse.jdt.core.compiler.problem.syntacticNullAnalysisForFields=enabled
+org.eclipse.jdt.core.compiler.source=17
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/bin/main/com/facebook/react/ReactExtension.kt b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/bin/main/com/facebook/react/ReactExtension.kt
new file mode 100644
index 0000000..fa9c937
--- /dev/null
+++ b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/bin/main/com/facebook/react/ReactExtension.kt
@@ -0,0 +1,218 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react
+
+import com.facebook.react.utils.JsonUtils
+import com.facebook.react.utils.projectPathToLibraryName
+import java.io.File
+import javax.inject.Inject
+import org.gradle.api.Project
+import org.gradle.api.file.DirectoryProperty
+import org.gradle.api.file.RegularFileProperty
+import org.gradle.api.provider.ListProperty
+import org.gradle.api.provider.Property
+
+abstract class ReactExtension @Inject constructor(val project: Project) {
+
+  private val objects = project.objects
+
+  /**
+   * The path to the root of your project. This is the path to where the `package.json` lives. All
+   * the CLI commands will be invoked from this folder as working directory.
+   *
+   * Default: ${rootProject.dir}/../
+   */
+  val root: DirectoryProperty =
+      objects.directoryProperty().convention(project.rootProject.layout.projectDirectory.dir("../"))
+
+  /**
+   * The path to the react-native NPM package folder.
+   *
+   * Default: ${rootProject.dir}/../node_modules/react-native
+   */
+  val reactNativeDir: DirectoryProperty =
+      objects.directoryProperty().convention(root.dir("node_modules/react-native"))
+
+  /**
+   * The path to the JS entry file. If not specified, the plugin will try to resolve it using a list
+   * of known locations (e.g. `index.android.js`, `index.js`, etc.).
+   */
+  val entryFile: RegularFileProperty = objects.fileProperty()
+
+  /**
+   * The reference to the React Native CLI. If not specified, the plugin will try to resolve it
+   * looking for `react-native` CLI inside `node_modules` in [root].
+   */
+  val cliFile: RegularFileProperty =
+      objects.fileProperty().convention(reactNativeDir.file("cli.js"))
+
+  /**
+   * The path to the Node executable and extra args. By default it assumes that you have `node`
+   * installed and configured in your $PATH. Default: ["node"]
+   */
+  val nodeExecutableAndArgs: ListProperty<String> =
+      objects.listProperty(String::class.java).convention(listOf("node"))
+
+  /** The command to use to invoke bundle. Default is `bundle` and will be invoked on [root]. */
+  val bundleCommand: Property<String> = objects.property(String::class.java).convention("bundle")
+
+  /**
+   * Custom configuration file for the [bundleCommand]. If provided, it will be passed over with a
+   * `--config` flag to the bundle command.
+   */
+  val bundleConfig: RegularFileProperty = objects.fileProperty()
+
+  /**
+   * The Bundle Asset name. This name will be used also for deriving other bundle outputs such as
+   * the packager source map, the compiler source map and the output source map file.
+   *
+   * Default: index.android.bundle
+   */
+  val bundleAssetName: Property<String> =
+      objects.property(String::class.java).convention("index.android.bundle")
+
+  /**
+   * Whether the Bundle Asset should be compressed when packaged into a `.apk`, or not. Disabling
+   * compression for the `.bundle` allows it to be directly memory-mapped to RAM, hence improving
+   * startup time - at the cost of a larger resulting `.apk` size.
+   *
+   * Default: false
+   */
+  val enableBundleCompression: Property<Boolean> =
+      objects.property(Boolean::class.java).convention(false)
+
+  /**
+   * Toggles the .so Cleanup step. If enabled, we will clean up all the unnecessary files before the
+   * bundle task. If disabled, the developers will have to manually cleanup the files. Default: true
+   */
+  val enableSoCleanup: Property<Boolean> = objects.property(Boolean::class.java).convention(true)
+
+  /** Extra args that will be passed to the [bundleCommand] Default: [] */
+  val extraPackagerArgs: ListProperty<String> =
+      objects.listProperty(String::class.java).convention(emptyList())
+
+  /**
+   * Allows to specify the debuggable variants (by default just 'debug'). Variants in this list will
+   * not be bundled (the bundle file will not be created and won't be copied over).
+   *
+   * Default: ['debug']
+   */
+  val debuggableVariants: ListProperty<String> =
+      objects.listProperty(String::class.java).convention(listOf("debug"))
+
+  /** Hermes Config */
+
+  /**
+   * The command to use to invoke hermesc (the hermes compiler). Default is "", the plugin will
+   * autodetect it.
+   */
+  val hermesCommand: Property<String> = objects.property(String::class.java).convention("")
+
+  /**
+   * Whether to enable Hermes only on certain variants. If specified as a non-empty list, hermesc
+   * and the .so cleanup for Hermes will be executed only for variants in this list. An empty list
+   * assumes you're either using Hermes for all variants or not (see [enableHermes]).
+   *
+   * Default: []
+   */
+  val enableHermesOnlyInVariants: ListProperty<String> =
+      objects.listProperty(String::class.java).convention(emptyList())
+
+  /** Flags to pass to Hermesc. Default: ["-O", "-output-source-map"] */
+  val hermesFlags: ListProperty<String> =
+      objects.listProperty(String::class.java).convention(listOf("-O", "-output-source-map"))
+
+  /** Codegen Config */
+
+  /**
+   * The path to the react-native-codegen NPM package folder.
+   *
+   * Default: ${rootProject.dir}/../node_modules/@react-native/codegen
+   */
+  val codegenDir: DirectoryProperty =
+      objects.directoryProperty().convention(root.dir("node_modules/@react-native/codegen"))
+
+  /**
+   * The root directory for all JS files for the app.
+   *
+   * Default: the parent folder of the `/android` folder.
+   */
+  val jsRootDir: DirectoryProperty = objects.directoryProperty()
+
+  /**
+   * The library name that will be used for the codegen artifacts.
+   *
+   * Default: <UpperCamelVersionOfProjectPath>Spec (e.g. for :example:project it will be
+   * ExampleProjectSpec).
+   */
+  val libraryName: Property<String> =
+      objects.property(String::class.java).convention(projectPathToLibraryName(project.path))
+
+  /**
+   * Java package name to use for any codegen artifacts produced during build time. Default:
+   * com.facebook.fbreact.specs
+   */
+  val codegenJavaPackageName: Property<String> =
+      objects.property(String::class.java).convention("com.facebook.fbreact.specs")
+
+  /** Auto-linking Utils */
+
+  /**
+   * Utility function to autolink libraries to the app.
+   *
+   * This function will read the autolinking configuration file and add Gradle dependencies to the
+   * app. This function should be invoked inside the react {} block in the app's build.gradle and is
+   * necessary for libraries to be linked correctly.
+   */
+  fun autolinkLibrariesWithApp() {
+    val inputFile =
+        project.rootProject.layout.buildDirectory
+            .file("generated/autolinking/autolinking.json")
+            .get()
+            .asFile
+    val dependenciesToApply = getGradleDependenciesToApply(inputFile)
+    dependenciesToApply.forEach { (configuration, path) ->
+      project.dependencies.add(configuration, project.dependencies.project(mapOf("path" to path)))
+    }
+  }
+
+  companion object {
+    /**
+     * Util function to construct a list of Gradle Configuration <-> Project name pairs for
+     * autolinking. Pairs looks like: "implementation" -> ":react-native_oss-library-example"
+     *
+     * They will be applied to the Gradle project for linking the libraries.
+     *
+     * @param inputFile The file to read the autolinking configuration from.
+     * @return A list of Gradle Configuration <-> Project name pairs.
+     */
+    internal fun getGradleDependenciesToApply(inputFile: File): MutableList<Pair<String, String>> {
+      val model = JsonUtils.fromAutolinkingConfigJson(inputFile)
+      val result = mutableListOf<Pair<String, String>>()
+      model
+          ?.dependencies
+          ?.values
+          ?.filter { it.platforms?.android !== null }
+          ?.filterNot { it.platforms?.android?.isPureCxxDependency == true }
+          ?.forEach { deps ->
+            val nameCleansed = deps.nameCleansed
+            val dependencyConfiguration = deps.platforms?.android?.dependencyConfiguration
+            val buildTypes = deps.platforms?.android?.buildTypes ?: emptyList()
+            if (buildTypes.isEmpty()) {
+              result.add((dependencyConfiguration ?: "implementation") to ":$nameCleansed")
+            } else {
+              buildTypes.forEach { buildType ->
+                result.add(
+                    (dependencyConfiguration ?: "${buildType}Implementation") to ":$nameCleansed")
+              }
+            }
+          }
+      return result
+    }
+  }
+}
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/bin/main/com/facebook/react/ReactPlugin.kt b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/bin/main/com/facebook/react/ReactPlugin.kt
new file mode 100644
index 0000000..ffcf76a
--- /dev/null
+++ b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/bin/main/com/facebook/react/ReactPlugin.kt
@@ -0,0 +1,278 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react
+
+import com.android.build.api.variant.AndroidComponentsExtension
+import com.android.build.gradle.internal.tasks.factory.dependsOn
+import com.facebook.react.internal.PrivateReactExtension
+import com.facebook.react.tasks.GenerateAutolinkingNewArchitecturesFileTask
+import com.facebook.react.tasks.GenerateCodegenArtifactsTask
+import com.facebook.react.tasks.GenerateCodegenSchemaTask
+import com.facebook.react.tasks.GeneratePackageListTask
+import com.facebook.react.utils.AgpConfiguratorUtils.configureBuildConfigFieldsForApp
+import com.facebook.react.utils.AgpConfiguratorUtils.configureBuildConfigFieldsForLibraries
+import com.facebook.react.utils.AgpConfiguratorUtils.configureDevPorts
+import com.facebook.react.utils.AgpConfiguratorUtils.configureNamespaceForLibraries
+import com.facebook.react.utils.BackwardCompatUtils.configureBackwardCompatibilityReactMap
+import com.facebook.react.utils.DependencyUtils.configureDependencies
+import com.facebook.react.utils.DependencyUtils.configureRepositories
+import com.facebook.react.utils.DependencyUtils.readVersionAndGroupStrings
+import com.facebook.react.utils.JdkConfiguratorUtils.configureJavaToolChains
+import com.facebook.react.utils.JsonUtils
+import com.facebook.react.utils.NdkConfiguratorUtils.configureReactNativeNdk
+import com.facebook.react.utils.ProjectUtils.isNewArchEnabled
+import com.facebook.react.utils.ProjectUtils.needsCodegenFromPackageJson
+import com.facebook.react.utils.findPackageJsonFile
+import java.io.File
+import kotlin.system.exitProcess
+import org.gradle.api.Plugin
+import org.gradle.api.Project
+import org.gradle.api.Task
+import org.gradle.api.file.Directory
+import org.gradle.api.provider.Provider
+import org.gradle.internal.jvm.Jvm
+
+class ReactPlugin : Plugin<Project> {
+  override fun apply(project: Project) {
+    checkJvmVersion(project)
+    val extension = project.extensions.create("react", ReactExtension::class.java, project)
+
+    // We register a private extension on the rootProject so that project wide configs
+    // like codegen config can be propagated from app project to libraries.
+    val rootExtension =
+        project.rootProject.extensions.findByType(PrivateReactExtension::class.java)
+            ?: project.rootProject.extensions.create(
+                "privateReact", PrivateReactExtension::class.java, project)
+
+    // App Only Configuration
+    project.pluginManager.withPlugin("com.android.application") {
+      // We wire the root extension with the values coming from the app (either user populated or
+      // defaults).
+      rootExtension.root.set(extension.root)
+      rootExtension.reactNativeDir.set(extension.reactNativeDir)
+      rootExtension.codegenDir.set(extension.codegenDir)
+      rootExtension.nodeExecutableAndArgs.set(extension.nodeExecutableAndArgs)
+
+      project.afterEvaluate {
+        val reactNativeDir = extension.reactNativeDir.get().asFile
+        val propertiesFile = File(reactNativeDir, "ReactAndroid/gradle.properties")
+        val versionAndGroupStrings = readVersionAndGroupStrings(propertiesFile)
+        val versionString = versionAndGroupStrings.first
+        val groupString = versionAndGroupStrings.second
+        configureDependencies(project, versionString, groupString)
+        configureRepositories(project)
+      }
+
+      configureReactNativeNdk(project, extension)
+      configureBuildConfigFieldsForApp(project, extension)
+      configureDevPorts(project)
+      configureBackwardCompatibilityReactMap(project)
+      configureJavaToolChains(project)
+
+      project.extensions.getByType(AndroidComponentsExtension::class.java).apply {
+        onVariants(selector().all()) { variant ->
+          project.configureReactTasks(variant = variant, config = extension)
+        }
+      }
+      configureAutolinking(project, extension)
+      configureCodegen(project, extension, rootExtension, isLibrary = false)
+      configureResources(project, extension)
+    }
+
+    // Library Only Configuration
+    configureBuildConfigFieldsForLibraries(project)
+    configureNamespaceForLibraries(project)
+    project.pluginManager.withPlugin("com.android.library") {
+      configureCodegen(project, extension, rootExtension, isLibrary = true)
+    }
+  }
+
+  private fun checkJvmVersion(project: Project) {
+    val jvmVersion = Jvm.current().javaVersion?.majorVersion
+    if ((jvmVersion?.toIntOrNull() ?: 0) <= 16) {
+      project.logger.error(
+          """
+
+      ********************************************************************************
+
+      ERROR: requires JDK17 or higher.
+      Incompatible major version detected: '$jvmVersion'
+
+      ********************************************************************************
+
+      """
+              .trimIndent())
+      exitProcess(1)
+    }
+  }
+
+  /** This function configures Android resources - in this case just the bundle */
+  private fun configureResources(project: Project, reactExtension: ReactExtension) {
+    project.extensions.getByType(AndroidComponentsExtension::class.java).finalizeDsl { ext ->
+      val bundleFileExtension = reactExtension.bundleAssetName.get().substringAfterLast('.', "")
+      if (!reactExtension.enableBundleCompression.get() && bundleFileExtension.isNotBlank()) {
+        ext.androidResources.noCompress.add(bundleFileExtension)
+      }
+    }
+  }
+
+  /** This function sets up `react-native-codegen` in our Gradle plugin. */
+  @Suppress("UnstableApiUsage")
+  private fun configureCodegen(
+      project: Project,
+      localExtension: ReactExtension,
+      rootExtension: PrivateReactExtension,
+      isLibrary: Boolean
+  ) {
+    // First, we set up the output dir for the codegen.
+    val generatedSrcDir: Provider<Directory> =
+        project.layout.buildDirectory.dir("generated/source/codegen")
+
+    // We specify the default value (convention) for jsRootDir.
+    // It's the root folder for apps (so ../../ from the Gradle project)
+    // and the package folder for library (so ../ from the Gradle project)
+    if (isLibrary) {
+      localExtension.jsRootDir.convention(project.layout.projectDirectory.dir("../"))
+    } else {
+      localExtension.jsRootDir.convention(localExtension.root)
+    }
+
+    // We create the task to produce schema from JS files.
+    val generateCodegenSchemaTask =
+        project.tasks.register(
+            "generateCodegenSchemaFromJavaScript", GenerateCodegenSchemaTask::class.java) { it ->
+              it.nodeExecutableAndArgs.set(rootExtension.nodeExecutableAndArgs)
+              it.codegenDir.set(rootExtension.codegenDir)
+              it.generatedSrcDir.set(generatedSrcDir)
+              it.nodeWorkingDir.set(project.layout.projectDirectory.asFile.absolutePath)
+
+              // We're reading the package.json at configuration time to properly feed
+              // the `jsRootDir` @Input property of this task & the onlyIf. Therefore, the
+              // parsePackageJson should be invoked inside this lambda.
+              val packageJson = findPackageJsonFile(project, rootExtension.root)
+              val parsedPackageJson = packageJson?.let { JsonUtils.fromPackageJson(it) }
+
+              val jsSrcsDirInPackageJson = parsedPackageJson?.codegenConfig?.jsSrcsDir
+              val includesGeneratedCode =
+                  parsedPackageJson?.codegenConfig?.includesGeneratedCode ?: false
+              if (jsSrcsDirInPackageJson != null) {
+                it.jsRootDir.set(File(packageJson.parentFile, jsSrcsDirInPackageJson))
+              } else {
+                it.jsRootDir.set(localExtension.jsRootDir)
+              }
+              it.jsInputFiles.set(
+                  project.fileTree(it.jsRootDir) { tree ->
+                    tree.include("**/*.js")
+                    tree.include("**/*.jsx")
+                    tree.include("**/*.ts")
+                    tree.include("**/*.tsx")
+
+                    tree.exclude("node_modules/**/*")
+                    tree.exclude("**/*.d.ts")
+                    // We want to exclude the build directory, to don't pick them up for execution
+                    // avoidance.
+                    tree.exclude("**/build/**/*")
+                  })
+
+              val needsCodegenFromPackageJson =
+                  project.needsCodegenFromPackageJson(rootExtension.root)
+              it.onlyIf { (isLibrary || needsCodegenFromPackageJson) && !includesGeneratedCode }
+            }
+
+    // We create the task to generate Java code from schema.
+    val generateCodegenArtifactsTask =
+        project.tasks.register(
+            "generateCodegenArtifactsFromSchema", GenerateCodegenArtifactsTask::class.java) { task
+              ->
+              task.dependsOn(generateCodegenSchemaTask)
+              task.reactNativeDir.set(rootExtension.reactNativeDir)
+              task.nodeExecutableAndArgs.set(rootExtension.nodeExecutableAndArgs)
+              task.generatedSrcDir.set(generatedSrcDir)
+              task.packageJsonFile.set(findPackageJsonFile(project, rootExtension.root))
+              task.codegenJavaPackageName.set(localExtension.codegenJavaPackageName)
+              task.libraryName.set(localExtension.libraryName)
+              task.nodeWorkingDir.set(project.layout.projectDirectory.asFile.absolutePath)
+
+              // Please note that appNeedsCodegen is triggering a read of the package.json at
+              // configuration time as we need to feed the onlyIf condition of this task.
+              // Therefore, the appNeedsCodegen needs to be invoked inside this lambda.
+              val needsCodegenFromPackageJson =
+                  project.needsCodegenFromPackageJson(rootExtension.root)
+              val packageJson = findPackageJsonFile(project, rootExtension.root)
+              val parsedPackageJson = packageJson?.let { JsonUtils.fromPackageJson(it) }
+              val includesGeneratedCode =
+                  parsedPackageJson?.codegenConfig?.includesGeneratedCode ?: false
+              task.onlyIf { (isLibrary || needsCodegenFromPackageJson) && !includesGeneratedCode }
+            }
+
+    // We update the android configuration to include the generated sources.
+    // This equivalent to this DSL:
+    //
+    // android { sourceSets { main { java { srcDirs += "$generatedSrcDir/java" } } } }
+    project.extensions.getByType(AndroidComponentsExtension::class.java).finalizeDsl { ext ->
+      ext.sourceSets.getByName("main").java.srcDir(generatedSrcDir.get().dir("java").asFile)
+    }
+
+    // `preBuild` is one of the base tasks automatically registered by AGP.
+    // This will invoke the codegen before compiling the entire project.
+    project.tasks.named("preBuild", Task::class.java).dependsOn(generateCodegenArtifactsTask)
+  }
+
+  /** This function sets up Autolinking for App users */
+  private fun configureAutolinking(
+      project: Project,
+      extension: ReactExtension,
+  ) {
+    val generatedAutolinkingJavaDir: Provider<Directory> =
+        project.layout.buildDirectory.dir("generated/autolinking/src/main/java")
+    val generatedAutolinkingJniDir: Provider<Directory> =
+        project.layout.buildDirectory.dir("generated/autolinking/src/main/jni")
+
+    // The autolinking.json file is available in the root build folder as it's generated
+    // by ReactSettingsPlugin.kt
+    val rootGeneratedAutolinkingFile =
+        project.rootProject.layout.buildDirectory.file("generated/autolinking/autolinking.json")
+
+    // We add a task called generateAutolinkingPackageList to do not clash with the existing task
+    // called generatePackageList. This can to be renamed once we unlink the rn <-> cli
+    // dependency.
+    val generatePackageListTask =
+        project.tasks.register(
+            "generateAutolinkingPackageList", GeneratePackageListTask::class.java) { task ->
+              task.autolinkInputFile.set(rootGeneratedAutolinkingFile)
+              task.generatedOutputDirectory.set(generatedAutolinkingJavaDir)
+            }
+
+    if (project.isNewArchEnabled(extension)) {
+      // For New Arch, we also need to generate code for C++ Autolinking
+      val generateAutolinkingNewArchitectureFilesTask =
+          project.tasks.register(
+              "generateAutolinkingNewArchitectureFiles",
+              GenerateAutolinkingNewArchitecturesFileTask::class.java) { task ->
+                task.autolinkInputFile.set(rootGeneratedAutolinkingFile)
+                task.generatedOutputDirectory.set(generatedAutolinkingJniDir)
+              }
+      project.tasks
+          .named("preBuild", Task::class.java)
+          .dependsOn(generateAutolinkingNewArchitectureFilesTask)
+    }
+
+    // We let generateAutolinkingPackageList depend on the preBuild task so it's executed before
+    // everything else.
+    project.tasks.named("preBuild", Task::class.java).dependsOn(generatePackageListTask)
+
+    // We tell Android Gradle Plugin that inside /build/generated/autolinking/src/main/java there
+    // are sources to be compiled as well.
+    project.extensions.getByType(AndroidComponentsExtension::class.java).apply {
+      onVariants(selector().all()) { variant ->
+        variant.sources.java?.addStaticSourceDirectory(
+            generatedAutolinkingJavaDir.get().asFile.absolutePath)
+      }
+    }
+  }
+}
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/bin/main/com/facebook/react/ReactRootProjectPlugin.kt b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/bin/main/com/facebook/react/ReactRootProjectPlugin.kt
new file mode 100644
index 0000000..5f232cd
--- /dev/null
+++ b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/bin/main/com/facebook/react/ReactRootProjectPlugin.kt
@@ -0,0 +1,30 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react
+
+import org.gradle.api.Plugin
+import org.gradle.api.Project
+
+/**
+ * Gradle plugin applied to the `android/build.gradle` file.
+ *
+ * This plugin allows to specify project wide configurations that can be applied to both apps and
+ * libraries before they're evaluated.
+ */
+class ReactRootProjectPlugin : Plugin<Project> {
+  override fun apply(project: Project) {
+    project.subprojects {
+      // As the :app project (i.e. ReactPlugin) configures both namespaces and JVM toolchains
+      // for libraries, its evaluation must happen before the libraries' evaluation.
+      // Eventually the configuration of namespace/JVM toolchain can be moved inside this plugin.
+      if (it.path != ":app") {
+        it.evaluationDependsOn(":app")
+      }
+    }
+  }
+}
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/bin/main/com/facebook/react/TaskConfiguration.kt b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/bin/main/com/facebook/react/TaskConfiguration.kt
new file mode 100644
index 0000000..a52c797
--- /dev/null
+++ b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/bin/main/com/facebook/react/TaskConfiguration.kt
@@ -0,0 +1,87 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react
+
+import com.android.build.api.variant.Variant
+import com.facebook.react.tasks.BundleHermesCTask
+import com.facebook.react.utils.BackwardCompatUtils.showJSCRemovalMessage
+import com.facebook.react.utils.KotlinStdlibCompatUtils.capitalizeCompat
+import com.facebook.react.utils.NdkConfiguratorUtils.configureJsEnginePackagingOptions
+import com.facebook.react.utils.NdkConfiguratorUtils.configureNewArchPackagingOptions
+import com.facebook.react.utils.ProjectUtils.isHermesEnabled
+import com.facebook.react.utils.ProjectUtils.useThirdPartyJSC
+import com.facebook.react.utils.detectedCliFile
+import com.facebook.react.utils.detectedEntryFile
+import java.io.File
+import org.gradle.api.Project
+
+@Suppress("SpreadOperator", "UnstableApiUsage")
+internal fun Project.configureReactTasks(variant: Variant, config: ReactExtension) {
+  val targetName = variant.name.capitalizeCompat()
+  val targetPath = variant.name
+
+  val buildDir = layout.buildDirectory.get().asFile
+  // Resources: generated/assets/react/<variant>/index.android.bundle
+  val resourcesDir = File(buildDir, "generated/res/react/$targetPath")
+  // Bundle: generated/assets/react/<variant>/index.android.bundle
+  val jsBundleDir = File(buildDir, "generated/assets/react/$targetPath")
+  // Sourcemap: generated/sourcemaps/react/<variant>/index.android.bundle.map
+  val jsSourceMapsDir = File(buildDir, "generated/sourcemaps/react/$targetPath")
+  // Intermediate packager:
+  // intermediates/sourcemaps/react/<variant>/index.android.bundle.packager.map
+  // Intermediate compiler:
+  // intermediates/sourcemaps/react/<variant>/index.android.bundle.compiler.map
+  val jsIntermediateSourceMapsDir = File(buildDir, "intermediates/sourcemaps/react/$targetPath")
+
+  // The location of the cli.js file for React Native
+  val cliFile = detectedCliFile(config)
+
+  val isHermesEnabledInProject = project.isHermesEnabled
+  val isHermesEnabledInThisVariant =
+      if (config.enableHermesOnlyInVariants.get().isNotEmpty()) {
+        config.enableHermesOnlyInVariants.get().contains(variant.name) && isHermesEnabledInProject
+      } else {
+        isHermesEnabledInProject
+      }
+  val isDebuggableVariant =
+      config.debuggableVariants.get().any { it.equals(variant.name, ignoreCase = true) }
+  val useThirdPartyJSC = project.useThirdPartyJSC
+
+  configureNewArchPackagingOptions(project, config, variant)
+  configureJsEnginePackagingOptions(config, variant, isHermesEnabledInThisVariant, useThirdPartyJSC)
+  if (!isHermesEnabledInThisVariant && !useThirdPartyJSC) {
+    showJSCRemovalMessage(project)
+  }
+
+  if (!isDebuggableVariant) {
+    val entryFileEnvVariable = System.getenv("ENTRY_FILE")
+    val bundleTask =
+        tasks.register("createBundle${targetName}JsAndAssets", BundleHermesCTask::class.java) {
+          it.root.set(config.root)
+          it.nodeExecutableAndArgs.set(config.nodeExecutableAndArgs)
+          it.cliFile.set(cliFile)
+          it.bundleCommand.set(config.bundleCommand)
+          it.entryFile.set(detectedEntryFile(config, entryFileEnvVariable))
+          it.extraPackagerArgs.set(config.extraPackagerArgs)
+          it.bundleConfig.set(config.bundleConfig)
+          it.bundleAssetName.set(config.bundleAssetName)
+          it.jsBundleDir.set(jsBundleDir)
+          it.resourcesDir.set(resourcesDir)
+          it.hermesEnabled.set(isHermesEnabledInThisVariant)
+          it.minifyEnabled.set(!isHermesEnabledInThisVariant)
+          it.devEnabled.set(false)
+          it.jsIntermediateSourceMapsDir.set(jsIntermediateSourceMapsDir)
+          it.jsSourceMapsDir.set(jsSourceMapsDir)
+          it.hermesCommand.set(config.hermesCommand)
+          it.hermesFlags.set(config.hermesFlags)
+          it.reactNativeDir.set(config.reactNativeDir)
+        }
+    variant.sources.res?.addGeneratedSourceDirectory(bundleTask, BundleHermesCTask::resourcesDir)
+    variant.sources.assets?.addGeneratedSourceDirectory(bundleTask, BundleHermesCTask::jsBundleDir)
+  }
+}
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/bin/main/com/facebook/react/internal/PrivateReactExtension.kt b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/bin/main/com/facebook/react/internal/PrivateReactExtension.kt
new file mode 100644
index 0000000..31795b3
--- /dev/null
+++ b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/bin/main/com/facebook/react/internal/PrivateReactExtension.kt
@@ -0,0 +1,57 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react.internal
+
+import javax.inject.Inject
+import org.gradle.api.Project
+import org.gradle.api.file.DirectoryProperty
+import org.gradle.api.provider.ListProperty
+
+/**
+ * A private extension we set on the rootProject to make easier to share values at execution time
+ * between app project and library project.
+ *
+ * Specifically, the [codegenDir], [reactNativeDir] and other properties should be provided by apps
+ * (for setups like a monorepo which are app specific) and libraries should honor those values.
+ *
+ * Users are not supposed to access directly this extension from their build.gradle file.
+ */
+abstract class PrivateReactExtension @Inject constructor(project: Project) {
+
+  private val objects = project.objects
+
+  val root: DirectoryProperty =
+      objects
+          .directoryProperty()
+          .convention(
+              // This is the default for the project root if the users hasn't specified anything.
+              // If the project is called "react-native-github" or "react-native-build-from-source"
+              //   - We're inside the Github Repo -> root is defined by RN Tester (so no default
+              // needed)
+              //   - We're inside an includedBuild as we're performing a build from source
+              //     (then we're inside `node_modules/react-native`, so default should be ../../)
+              // If the project is called in any other name
+              //   - We're inside a user project, so inside the ./android folder. Default should be
+              // ../
+              // User can always override this default by setting a `root =` inside the template.
+              if (project.rootProject.name == "react-native-github" ||
+                  project.rootProject.name == "react-native-build-from-source") {
+                project.rootProject.layout.projectDirectory.dir("../../")
+              } else {
+                project.rootProject.layout.projectDirectory.dir("../")
+              })
+
+  val reactNativeDir: DirectoryProperty =
+      objects.directoryProperty().convention(root.dir("node_modules/react-native"))
+
+  val nodeExecutableAndArgs: ListProperty<String> =
+      objects.listProperty(String::class.java).convention(listOf("node"))
+
+  val codegenDir: DirectoryProperty =
+      objects.directoryProperty().convention(root.dir("node_modules/@react-native/codegen"))
+}
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/bin/main/com/facebook/react/tasks/BundleHermesCTask.kt b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/bin/main/com/facebook/react/tasks/BundleHermesCTask.kt
new file mode 100644
index 0000000..67db9dc
--- /dev/null
+++ b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/bin/main/com/facebook/react/tasks/BundleHermesCTask.kt
@@ -0,0 +1,204 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react.tasks
+
+import com.facebook.react.utils.Os.cliPath
+import com.facebook.react.utils.detectOSAwareHermesCommand
+import com.facebook.react.utils.moveTo
+import com.facebook.react.utils.windowsAwareCommandLine
+import java.io.File
+import javax.inject.Inject
+import org.gradle.api.DefaultTask
+import org.gradle.api.file.ConfigurableFileTree
+import org.gradle.api.file.DirectoryProperty
+import org.gradle.api.file.RegularFileProperty
+import org.gradle.api.provider.ListProperty
+import org.gradle.api.provider.Property
+import org.gradle.api.tasks.*
+import org.gradle.process.ExecOperations
+
+abstract class BundleHermesCTask : DefaultTask() {
+
+  init {
+    group = "react"
+  }
+
+  @get:Inject abstract val execOperations: ExecOperations
+
+  @get:Internal abstract val root: DirectoryProperty
+
+  @get:InputFiles
+  val sources: ConfigurableFileTree =
+      project.fileTree(root) {
+        it.include("**/*.js")
+        it.include("**/*.jsx")
+        it.include("**/*.ts")
+        it.include("**/*.tsx")
+        it.exclude("**/android/**/*")
+        it.exclude("**/ios/**/*")
+        it.exclude("**/build/**/*")
+        it.exclude("**/node_modules/**/*")
+      }
+
+  @get:Input abstract val nodeExecutableAndArgs: ListProperty<String>
+
+  @get:InputFile abstract val cliFile: RegularFileProperty
+
+  @get:Internal abstract val reactNativeDir: DirectoryProperty
+
+  @get:Input abstract val bundleCommand: Property<String>
+
+  @get:InputFile abstract val entryFile: RegularFileProperty
+
+  @get:InputFile @get:Optional abstract val bundleConfig: RegularFileProperty
+
+  @get:Input abstract val bundleAssetName: Property<String>
+
+  @get:Input abstract val minifyEnabled: Property<Boolean>
+
+  @get:Input abstract val hermesEnabled: Property<Boolean>
+
+  @get:Input abstract val devEnabled: Property<Boolean>
+
+  @get:Input abstract val extraPackagerArgs: ListProperty<String>
+
+  @get:Input abstract val hermesCommand: Property<String>
+
+  @get:Input abstract val hermesFlags: ListProperty<String>
+
+  @get:OutputDirectory abstract val jsBundleDir: DirectoryProperty
+
+  @get:OutputDirectory abstract val resourcesDir: DirectoryProperty
+
+  @get:OutputDirectory abstract val jsIntermediateSourceMapsDir: RegularFileProperty
+
+  @get:OutputDirectory abstract val jsSourceMapsDir: DirectoryProperty
+
+  @TaskAction
+  fun run() {
+    jsBundleDir.get().asFile.mkdirs()
+    resourcesDir.get().asFile.mkdirs()
+    jsIntermediateSourceMapsDir.get().asFile.mkdirs()
+    jsSourceMapsDir.get().asFile.mkdirs()
+    val bundleAssetFilename = bundleAssetName.get()
+
+    val bundleFile = File(jsBundleDir.get().asFile, bundleAssetFilename)
+    val packagerSourceMap = resolvePackagerSourceMapFile(bundleAssetFilename)
+
+    val bundleCommand = getBundleCommand(bundleFile, packagerSourceMap)
+    runCommand(bundleCommand)
+
+    if (hermesEnabled.get()) {
+      val detectedHermesCommand = detectOSAwareHermesCommand(root.get().asFile, hermesCommand.get())
+      val bytecodeFile = File("${bundleFile}.hbc")
+      val outputSourceMap = resolveOutputSourceMap(bundleAssetFilename)
+      val compilerSourceMap = resolveCompilerSourceMap(bundleAssetFilename)
+
+      val hermesCommand = getHermescCommand(detectedHermesCommand, bytecodeFile, bundleFile)
+      runCommand(hermesCommand)
+      bytecodeFile.moveTo(bundleFile)
+
+      if (hermesFlags.get().contains("-output-source-map")) {
+        val hermesTempSourceMapFile = File("$bytecodeFile.map")
+        hermesTempSourceMapFile.moveTo(compilerSourceMap)
+
+        val reactNativeDir = reactNativeDir.get().asFile
+        val composeScriptFile = File(reactNativeDir, "scripts/compose-source-maps.js")
+        val composeSourceMapsCommand =
+            getComposeSourceMapsCommand(
+                composeScriptFile, packagerSourceMap, compilerSourceMap, outputSourceMap)
+        runCommand(composeSourceMapsCommand)
+      }
+    }
+  }
+
+  internal fun resolvePackagerSourceMapFile(bundleAssetName: String) =
+      if (hermesEnabled.get()) {
+        File(jsIntermediateSourceMapsDir.get().asFile, "$bundleAssetName.packager.map")
+      } else {
+        resolveOutputSourceMap(bundleAssetName)
+      }
+
+  internal fun resolveOutputSourceMap(bundleAssetName: String) =
+      File(jsSourceMapsDir.get().asFile, "$bundleAssetName.map")
+
+  internal fun resolveCompilerSourceMap(bundleAssetName: String) =
+      File(jsIntermediateSourceMapsDir.get().asFile, "$bundleAssetName.compiler.map")
+
+  private fun runCommand(command: List<Any>) {
+    execOperations.exec { exec ->
+      exec.workingDir(root.get().asFile)
+      exec.commandLine(command)
+    }
+  }
+
+  internal fun getBundleCommand(bundleFile: File, sourceMapFile: File): List<Any> {
+    val rootFile = root.get().asFile
+    val commandLine =
+        mutableListOf<String>().apply {
+          addAll(nodeExecutableAndArgs.get())
+          add(cliFile.get().asFile.cliPath(rootFile))
+          add(bundleCommand.get())
+          add("--platform")
+          add("android")
+          add("--dev")
+          add(devEnabled.get().toString())
+          add("--reset-cache")
+          add("--entry-file")
+          add(entryFile.get().asFile.cliPath(rootFile))
+          add("--bundle-output")
+          add(bundleFile.cliPath(rootFile))
+          add("--assets-dest")
+          add(resourcesDir.get().asFile.cliPath(rootFile))
+          add("--sourcemap-output")
+          add(sourceMapFile.cliPath(rootFile))
+          if (bundleConfig.isPresent) {
+            add("--config")
+            add(bundleConfig.get().asFile.cliPath(rootFile))
+          }
+          add("--minify")
+          add(minifyEnabled.get().toString())
+          addAll(extraPackagerArgs.get())
+          add("--verbose")
+        }
+    return windowsAwareCommandLine(commandLine)
+  }
+
+  internal fun getHermescCommand(
+      hermesCommand: String,
+      bytecodeFile: File,
+      bundleFile: File
+  ): List<Any> {
+    val rootFile = root.get().asFile
+    return windowsAwareCommandLine(
+        hermesCommand,
+        "-w",
+        "-emit-binary",
+        "-max-diagnostic-width=80",
+        "-out",
+        bytecodeFile.cliPath(rootFile),
+        bundleFile.cliPath(rootFile),
+        *hermesFlags.get().toTypedArray())
+  }
+
+  internal fun getComposeSourceMapsCommand(
+      composeScript: File,
+      packagerSourceMap: File,
+      compilerSourceMap: File,
+      outputSourceMap: File
+  ): List<Any> {
+    val rootFile = root.get().asFile
+    return windowsAwareCommandLine(
+        *nodeExecutableAndArgs.get().toTypedArray(),
+        composeScript.cliPath(rootFile),
+        packagerSourceMap.cliPath(rootFile),
+        compilerSourceMap.cliPath(rootFile),
+        "-o",
+        outputSourceMap.cliPath(rootFile))
+  }
+}
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/bin/main/com/facebook/react/tasks/GenerateAutolinkingNewArchitecturesFileTask.kt b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/bin/main/com/facebook/react/tasks/GenerateAutolinkingNewArchitecturesFileTask.kt
new file mode 100644
index 0000000..38a31b8
--- /dev/null
+++ b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/bin/main/com/facebook/react/tasks/GenerateAutolinkingNewArchitecturesFileTask.kt
@@ -0,0 +1,252 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react.tasks
+
+import com.facebook.react.model.ModelAutolinkingConfigJson
+import com.facebook.react.model.ModelAutolinkingDependenciesPlatformAndroidJson
+import com.facebook.react.utils.JsonUtils
+import java.io.File
+import org.gradle.api.DefaultTask
+import org.gradle.api.file.DirectoryProperty
+import org.gradle.api.file.RegularFileProperty
+import org.gradle.api.tasks.InputFile
+import org.gradle.api.tasks.OutputDirectory
+import org.gradle.api.tasks.TaskAction
+
+abstract class GenerateAutolinkingNewArchitecturesFileTask : DefaultTask() {
+
+  init {
+    group = "react"
+  }
+
+  @get:InputFile abstract val autolinkInputFile: RegularFileProperty
+
+  @get:OutputDirectory abstract val generatedOutputDirectory: DirectoryProperty
+
+  @TaskAction
+  fun taskAction() {
+    val model = JsonUtils.fromAutolinkingConfigJson(autolinkInputFile.get().asFile)
+
+    val packages = filterAndroidPackages(model)
+    val cmakeFileContent = generateCmakeFileContent(packages)
+    val cppFileContent = generateCppFileContent(packages)
+
+    val outputDir = generatedOutputDirectory.get().asFile
+    outputDir.mkdirs()
+    File(outputDir, CMAKE_FILENAME).apply { writeText(cmakeFileContent) }
+    File(outputDir, CPP_FILENAME).apply { writeText(cppFileContent) }
+    File(outputDir, H_FILENAME).apply { writeText(hTemplate) }
+  }
+
+  internal fun filterAndroidPackages(
+      model: ModelAutolinkingConfigJson?
+  ): List<ModelAutolinkingDependenciesPlatformAndroidJson> =
+      model?.dependencies?.values?.mapNotNull { it.platforms?.android } ?: emptyList()
+
+  internal fun generateCmakeFileContent(
+      packages: List<ModelAutolinkingDependenciesPlatformAndroidJson>
+  ): String {
+    val libraryIncludes =
+        packages.joinToString("\n") { dep ->
+          var addDirectoryString = ""
+          val libraryName = dep.libraryName
+          val cmakeListsPath = dep.cmakeListsPath
+          val cxxModuleCMakeListsPath = dep.cxxModuleCMakeListsPath
+          if (libraryName != null && cmakeListsPath != null) {
+            // If user provided a custom cmakeListsPath, let's honor it.
+            val nativeFolderPath = sanitizeCmakeListsPath(cmakeListsPath)
+            addDirectoryString +=
+                "add_subdirectory(\"$nativeFolderPath\" ${libraryName}_autolinked_build)"
+          }
+          if (cxxModuleCMakeListsPath != null) {
+            // If user provided a custom cxxModuleCMakeListsPath, let's honor it.
+            val nativeFolderPath = sanitizeCmakeListsPath(cxxModuleCMakeListsPath)
+            addDirectoryString +=
+                "\nadd_subdirectory(\"$nativeFolderPath\" ${libraryName}_cxxmodule_autolinked_build)"
+          }
+          addDirectoryString
+        }
+
+    val libraryModules =
+        packages.joinToString("\n  ") { dep ->
+          var autolinkedLibraries = ""
+          if (dep.libraryName != null) {
+            autolinkedLibraries += "$CODEGEN_LIB_PREFIX${dep.libraryName}"
+          }
+          if (dep.cxxModuleCMakeListsModuleName != null) {
+            autolinkedLibraries += "\n${dep.cxxModuleCMakeListsModuleName}"
+          }
+          autolinkedLibraries
+        }
+
+    return CMAKE_TEMPLATE.replace("{{ libraryIncludes }}", libraryIncludes)
+        .replace("{{ libraryModules }}", libraryModules)
+  }
+
+  internal fun generateCppFileContent(
+      packages: List<ModelAutolinkingDependenciesPlatformAndroidJson>
+  ): String {
+    val packagesWithLibraryNames = packages.filter { android -> android.libraryName != null }
+
+    val cppIncludes =
+        packagesWithLibraryNames.joinToString("\n") { dep ->
+          var include = "#include <${dep.libraryName}.h>"
+          if (dep.componentDescriptors.isNotEmpty()) {
+            include +=
+                "\n#include <${COMPONENT_INCLUDE_PATH}/${dep.libraryName}/${COMPONENT_DESCRIPTOR_FILENAME}>"
+          }
+          if (dep.cxxModuleHeaderName != null) {
+            include += "\n#include <${dep.cxxModuleHeaderName}.h>"
+          }
+          include
+        }
+
+    val cppTurboModuleJavaProviders =
+        packagesWithLibraryNames.joinToString("\n") { dep ->
+          val libraryName = dep.libraryName
+          // language=cpp
+          """  
+      auto module_$libraryName = ${libraryName}_ModuleProvider(moduleName, params);
+      if (module_$libraryName != nullptr) {
+      return module_$libraryName;
+      }
+      """
+              .trimIndent()
+        }
+
+    val cppTurboModuleCxxProviders =
+        packagesWithLibraryNames
+            .filter { it.cxxModuleHeaderName != null }
+            .joinToString("\n") { dep ->
+              val cxxModuleHeaderName = dep.cxxModuleHeaderName
+              // language=cpp
+              """
+      if (moduleName == $cxxModuleHeaderName::kModuleName) {
+      return std::make_shared<$cxxModuleHeaderName>(jsInvoker);
+      }
+      """
+                  .trimIndent()
+            }
+
+    val cppComponentDescriptors =
+        packagesWithLibraryNames
+            .filter { it.componentDescriptors.isNotEmpty() }
+            .joinToString("\n") {
+              it.componentDescriptors.joinToString("\n") {
+                "providerRegistry->add(concreteComponentDescriptorProvider<$it>());"
+              }
+            }
+
+    return CPP_TEMPLATE.replace("{{ autolinkingCppIncludes }}", cppIncludes)
+        .replace("{{ autolinkingCppTurboModuleJavaProviders }}", cppTurboModuleJavaProviders)
+        .replace("{{ autolinkingCppTurboModuleCxxProviders }}", cppTurboModuleCxxProviders)
+        .replace("{{ autolinkingCppComponentDescriptors }}", cppComponentDescriptors)
+  }
+
+  companion object {
+    const val CMAKE_FILENAME = "Android-autolinking.cmake"
+
+    const val H_FILENAME = "autolinking.h"
+    const val CPP_FILENAME = "autolinking.cpp"
+
+    const val CODEGEN_LIB_PREFIX = "react_codegen_"
+
+    const val COMPONENT_DESCRIPTOR_FILENAME = "ComponentDescriptors.h"
+    const val COMPONENT_INCLUDE_PATH = "react/renderer/components"
+
+    internal fun sanitizeCmakeListsPath(cmakeListsPath: String): String =
+        cmakeListsPath.replace("CMakeLists.txt", "").replace(" ", "\\ ")
+
+    // language=cmake
+    val CMAKE_TEMPLATE =
+        """
+      # This code was generated by [React Native](https://www.npmjs.com/package/@react-native/gradle-plugin)
+      cmake_minimum_required(VERSION 3.13)
+      set(CMAKE_VERBOSE_MAKEFILE on)
+      
+      # We set REACTNATIVE_MERGED_SO so libraries/apps can selectively decide to depend on either libreactnative.so
+      # or link against a old prefab target (this is needed for React Native 0.76 on).
+      set(REACTNATIVE_MERGED_SO true)
+      
+      {{ libraryIncludes }}
+      
+      set(AUTOLINKED_LIBRARIES
+        {{ libraryModules }}
+      )
+      """
+            .trimIndent()
+
+    // language=cpp
+    val CPP_TEMPLATE =
+        """
+      /**
+       * This code was generated by [React Native](https://www.npmjs.com/package/@react-native/gradle-plugin).
+       *
+       * Do not edit this file as changes may cause incorrect behavior and will be lost
+       * once the code is regenerated.
+       *
+       */
+      
+      #include "autolinking.h"
+      {{ autolinkingCppIncludes }}
+      
+      namespace facebook {
+      namespace react {
+      
+      std::shared_ptr<TurboModule> autolinking_ModuleProvider(const std::string moduleName, const JavaTurboModule::InitParams &params) {
+      {{ autolinkingCppTurboModuleJavaProviders }}
+        return nullptr;
+      }
+      
+      std::shared_ptr<TurboModule> autolinking_cxxModuleProvider(const std::string moduleName, const std::shared_ptr<CallInvoker>& jsInvoker) {
+      {{ autolinkingCppTurboModuleCxxProviders }}
+        return nullptr;
+      }
+      
+      void autolinking_registerProviders(std::shared_ptr<ComponentDescriptorProviderRegistry const> providerRegistry) {
+      {{ autolinkingCppComponentDescriptors }}
+        return;
+      }
+      
+      } // namespace react
+      } // namespace facebook
+      """
+            .trimIndent()
+
+    // language=cpp
+    val hTemplate =
+        """
+      /**
+       * This code was generated by [React Native](https://www.npmjs.com/package/@react-native/gradle-plugin).
+       *
+       * Do not edit this file as changes may cause incorrect behavior and will be lost
+       * once the code is regenerated.
+       *
+       */
+      
+      #pragma once
+      
+      #include <ReactCommon/CallInvoker.h>
+      #include <ReactCommon/JavaTurboModule.h>
+      #include <ReactCommon/TurboModule.h>
+      #include <jsi/jsi.h>
+      #include <react/renderer/componentregistry/ComponentDescriptorProviderRegistry.h>
+      
+      namespace facebook {
+      namespace react {
+      
+      std::shared_ptr<TurboModule> autolinking_ModuleProvider(const std::string moduleName, const JavaTurboModule::InitParams &params);
+      std::shared_ptr<TurboModule> autolinking_cxxModuleProvider(const std::string moduleName, const std::shared_ptr<CallInvoker>& jsInvoker);
+      void autolinking_registerProviders(std::shared_ptr<ComponentDescriptorProviderRegistry const> providerRegistry);
+      
+      } // namespace react
+      } // namespace facebook
+      """
+            .trimIndent()
+  }
+}
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/bin/main/com/facebook/react/tasks/GenerateCodegenArtifactsTask.kt b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/bin/main/com/facebook/react/tasks/GenerateCodegenArtifactsTask.kt
new file mode 100644
index 0000000..c2a72c1
--- /dev/null
+++ b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/bin/main/com/facebook/react/tasks/GenerateCodegenArtifactsTask.kt
@@ -0,0 +1,86 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react.tasks
+
+import com.facebook.react.utils.JsonUtils
+import com.facebook.react.utils.Os.cliPath
+import com.facebook.react.utils.windowsAwareCommandLine
+import java.io.File
+import org.gradle.api.file.Directory
+import org.gradle.api.file.DirectoryProperty
+import org.gradle.api.file.RegularFile
+import org.gradle.api.file.RegularFileProperty
+import org.gradle.api.provider.ListProperty
+import org.gradle.api.provider.Property
+import org.gradle.api.provider.Provider
+import org.gradle.api.tasks.Exec
+import org.gradle.api.tasks.Input
+import org.gradle.api.tasks.InputFile
+import org.gradle.api.tasks.Internal
+import org.gradle.api.tasks.OutputDirectory
+
+abstract class GenerateCodegenArtifactsTask : Exec() {
+
+  @get:Internal abstract val reactNativeDir: DirectoryProperty
+
+  @get:Internal abstract val generatedSrcDir: DirectoryProperty
+
+  @get:InputFile abstract val packageJsonFile: RegularFileProperty
+
+  @get:Input abstract val nodeWorkingDir: Property<String>
+
+  @get:Input abstract val nodeExecutableAndArgs: ListProperty<String>
+
+  @get:Input abstract val codegenJavaPackageName: Property<String>
+
+  @get:Input abstract val libraryName: Property<String>
+
+  @get:InputFile
+  val generatedSchemaFile: Provider<RegularFile> = generatedSrcDir.file("schema.json")
+
+  @get:OutputDirectory val generatedJavaFiles: Provider<Directory> = generatedSrcDir.dir("java")
+
+  @get:OutputDirectory val generatedJniFiles: Provider<Directory> = generatedSrcDir.dir("jni")
+
+  override fun exec() {
+    val (resolvedLibraryName, resolvedCodegenJavaPackageName) = resolveTaskParameters()
+    setupCommandLine(resolvedLibraryName, resolvedCodegenJavaPackageName)
+    super.exec()
+  }
+
+  internal fun resolveTaskParameters(): Pair<String, String> {
+    val parsedPackageJson =
+        if (packageJsonFile.isPresent && packageJsonFile.get().asFile.exists()) {
+          JsonUtils.fromPackageJson(packageJsonFile.get().asFile)
+        } else {
+          null
+        }
+    val resolvedLibraryName = parsedPackageJson?.codegenConfig?.name ?: libraryName.get()
+    val resolvedCodegenJavaPackageName =
+        parsedPackageJson?.codegenConfig?.android?.javaPackageName ?: codegenJavaPackageName.get()
+    return resolvedLibraryName to resolvedCodegenJavaPackageName
+  }
+
+  internal fun setupCommandLine(libraryName: String, codegenJavaPackageName: String) {
+    val workingDir = File(nodeWorkingDir.get())
+    commandLine(
+        windowsAwareCommandLine(
+            *nodeExecutableAndArgs.get().toTypedArray(),
+            reactNativeDir.file("scripts/generate-specs-cli.js").get().asFile.cliPath(workingDir),
+            "--platform",
+            "android",
+            "--schemaPath",
+            generatedSchemaFile.get().asFile.cliPath(workingDir),
+            "--outputDir",
+            generatedSrcDir.get().asFile.cliPath(workingDir),
+            "--libraryName",
+            libraryName,
+            "--javaPackageName",
+            codegenJavaPackageName))
+  }
+}
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/bin/main/com/facebook/react/tasks/GenerateCodegenSchemaTask.kt b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/bin/main/com/facebook/react/tasks/GenerateCodegenSchemaTask.kt
new file mode 100644
index 0000000..dbfc3e1
--- /dev/null
+++ b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/bin/main/com/facebook/react/tasks/GenerateCodegenSchemaTask.kt
@@ -0,0 +1,74 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react.tasks
+
+import com.facebook.react.utils.Os.cliPath
+import com.facebook.react.utils.windowsAwareCommandLine
+import java.io.File
+import org.gradle.api.file.DirectoryProperty
+import org.gradle.api.file.FileTree
+import org.gradle.api.file.RegularFile
+import org.gradle.api.provider.ListProperty
+import org.gradle.api.provider.Property
+import org.gradle.api.provider.Provider
+import org.gradle.api.tasks.*
+
+/**
+ * A task that will collect all the *.js files inside the provided [jsRootDir] and will run the
+ * `combine-js-to-schema-cli.js` on top of it (from `react-native-codegen`). The output is a
+ * `schema.json` file that contains an intermediate representation of the code to be generated.
+ */
+abstract class GenerateCodegenSchemaTask : Exec() {
+
+  @get:Internal abstract val jsRootDir: DirectoryProperty
+
+  @get:Internal abstract val codegenDir: DirectoryProperty
+
+  @get:Internal abstract val generatedSrcDir: DirectoryProperty
+
+  @get:Input abstract val nodeWorkingDir: Property<String>
+
+  @get:Input abstract val nodeExecutableAndArgs: ListProperty<String>
+
+  @get:InputFiles abstract val jsInputFiles: Property<FileTree>
+
+  @get:OutputFile
+  val generatedSchemaFile: Provider<RegularFile> = generatedSrcDir.file("schema.json")
+
+  override fun exec() {
+    wipeOutputDir()
+    setupCommandLine()
+    super.exec()
+  }
+
+  internal fun wipeOutputDir() {
+    generatedSrcDir.asFile.get().apply {
+      deleteRecursively()
+      mkdirs()
+    }
+  }
+
+  internal fun setupCommandLine() {
+    val workingDir = File(nodeWorkingDir.get())
+    commandLine(
+        windowsAwareCommandLine(
+            *nodeExecutableAndArgs.get().toTypedArray(),
+            codegenDir
+                .file("lib/cli/combine/combine-js-to-schema-cli.js")
+                .get()
+                .asFile
+                .cliPath(workingDir),
+            "--platform",
+            "android",
+            "--exclude",
+            "NativeSampleTurboModule",
+            generatedSchemaFile.get().asFile.cliPath(workingDir),
+            jsRootDir.asFile.get().cliPath(workingDir),
+        ))
+  }
+}
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/bin/main/com/facebook/react/tasks/GeneratePackageListTask.kt b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/bin/main/com/facebook/react/tasks/GeneratePackageListTask.kt
new file mode 100644
index 0000000..36cc66c
--- /dev/null
+++ b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/bin/main/com/facebook/react/tasks/GeneratePackageListTask.kt
@@ -0,0 +1,201 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react.tasks
+
+import com.facebook.react.model.ModelAutolinkingConfigJson
+import com.facebook.react.model.ModelAutolinkingDependenciesPlatformAndroidJson
+import com.facebook.react.utils.JsonUtils
+import java.io.File
+import org.gradle.api.DefaultTask
+import org.gradle.api.file.DirectoryProperty
+import org.gradle.api.file.RegularFileProperty
+import org.gradle.api.tasks.InputFile
+import org.gradle.api.tasks.OutputDirectory
+import org.gradle.api.tasks.TaskAction
+
+abstract class GeneratePackageListTask : DefaultTask() {
+
+  init {
+    group = "react"
+  }
+
+  @get:InputFile abstract val autolinkInputFile: RegularFileProperty
+
+  @get:OutputDirectory abstract val generatedOutputDirectory: DirectoryProperty
+
+  @TaskAction
+  fun taskAction() {
+    val model =
+        JsonUtils.fromAutolinkingConfigJson(autolinkInputFile.get().asFile)
+            ?: error(
+                """
+        RNGP - Autolinking: Could not parse autolinking config file:
+        ${autolinkInputFile.get().asFile.absolutePath}
+        
+        The file is either missing or not containing valid JSON so the build won't succeed. 
+      """
+                    .trimIndent())
+
+    val packageName =
+        model.project?.android?.packageName
+            ?: error(
+                "RNGP - Autolinking: Could not find project.android.packageName in react-native config output! Could not autolink packages without this field.")
+
+    val androidPackages = filterAndroidPackages(model)
+    val packageImports = composePackageImports(packageName, androidPackages)
+    val packageClassInstance = composePackageInstance(packageName, androidPackages)
+    val generatedFileContents = composeFileContent(packageImports, packageClassInstance)
+
+    val outputDir = generatedOutputDirectory.get().asFile
+    outputDir.mkdirs()
+    File(outputDir, GENERATED_FILENAME).apply {
+      parentFile.mkdirs()
+      writeText(generatedFileContents)
+    }
+  }
+
+  internal fun composePackageImports(
+      packageName: String,
+      packages: Map<String, ModelAutolinkingDependenciesPlatformAndroidJson>
+  ) =
+      packages.entries.joinToString("\n") { (name, dep) ->
+        val packageImportPath =
+            requireNotNull(dep.packageImportPath) {
+              "RNGP - Autolinking: Missing `packageImportPath` in `config` for dependency $name. This is required to generate the autolinking package list."
+            }
+        "// $name\n${interpolateDynamicValues(packageImportPath, packageName)}"
+      }
+
+  internal fun composePackageInstance(
+      packageName: String,
+      packages: Map<String, ModelAutolinkingDependenciesPlatformAndroidJson>
+  ) =
+      if (packages.isEmpty()) {
+        ""
+      } else {
+        ",\n      " +
+            packages.entries.joinToString(",\n      ") { (name, dep) ->
+              val packageInstance =
+                  requireNotNull(dep.packageInstance) {
+                    "RNGP - Autolinking: Missing `packageInstance` in `config` for dependency $name. This is required to generate the autolinking package list."
+                  }
+              interpolateDynamicValues(packageInstance, packageName)
+            }
+      }
+
+  internal fun filterAndroidPackages(
+      model: ModelAutolinkingConfigJson?
+  ): Map<String, ModelAutolinkingDependenciesPlatformAndroidJson> {
+    val packages = model?.dependencies?.values ?: emptyList()
+    return packages
+        .filter { it.platforms?.android != null }
+        // The pure C++ dependencies won't have a .java/.kt file to import
+        .filterNot { it.platforms?.android?.isPureCxxDependency == true }
+        .associate { it.name to checkNotNull(it.platforms?.android) }
+  }
+
+  internal fun composeFileContent(packageImports: String, packageClassInstance: String): String =
+      generatedFileContentsTemplate
+          .replace("{{ packageImports }}", packageImports)
+          .replace("{{ packageClassInstances }}", packageClassInstance)
+
+  companion object {
+    const val GENERATED_FILENAME = "com/facebook/react/PackageList.java"
+
+    /**
+     * Before adding the package replacement mechanism, BuildConfig and R classes were imported
+     * automatically into the scope of the file. We want to replace all non-FQDN references to those
+     * classes with the package name of the MainApplication.
+     *
+     *     We want to match "R" or "BuildConfig":
+     *     - new Package(R.string…),
+     *     - Module.configure(BuildConfig);
+     *     ^ hence including (BuildConfig|R)
+     *     but we don't want to match "R":
+     *     - new Package(getResources…),
+     *     - new PackageR…,
+     *     - new Royal…,
+     *     ^ hence excluding \w before and after matches
+     *     and "BuildConfig" that has FQDN reference:
+     *     - Module.configure(com.acme.BuildConfig);
+     *     ^ hence excluding . before the match.
+     */
+    internal fun interpolateDynamicValues(input: String, packageName: String): String =
+        input.replace(Regex("([^.\\w])(BuildConfig|R)(\\W)")) { match ->
+          val (prefix, className, suffix) = match.destructured
+          "${prefix}${packageName}.${className}${suffix}"
+        }
+
+    // language=java
+    val generatedFileContentsTemplate =
+        """
+            package com.facebook.react;
+            
+            import android.app.Application;
+            import android.content.Context;
+            import android.content.res.Resources;
+            
+            import com.facebook.react.ReactPackage;
+            import com.facebook.react.shell.MainPackageConfig;
+            import com.facebook.react.shell.MainReactPackage;
+            import java.util.Arrays;
+            import java.util.ArrayList;
+            
+            {{ packageImports }}
+            
+            public class PackageList {
+              private Application application;
+              private ReactNativeHost reactNativeHost;
+              private MainPackageConfig mConfig;
+            
+              public PackageList(ReactNativeHost reactNativeHost) {
+                this(reactNativeHost, null);
+              }
+            
+              public PackageList(Application application) {
+                this(application, null);
+              }
+            
+              public PackageList(ReactNativeHost reactNativeHost, MainPackageConfig config) {
+                this.reactNativeHost = reactNativeHost;
+                mConfig = config;
+              }
+            
+              public PackageList(Application application, MainPackageConfig config) {
+                this.reactNativeHost = null;
+                this.application = application;
+                mConfig = config;
+              }
+            
+              private ReactNativeHost getReactNativeHost() {
+                return this.reactNativeHost;
+              }
+            
+              private Resources getResources() {
+                return this.getApplication().getResources();
+              }
+            
+              private Application getApplication() {
+                if (this.reactNativeHost == null) return this.application;
+                return this.reactNativeHost.getApplication();
+              }
+            
+              private Context getApplicationContext() {
+                return this.getApplication().getApplicationContext();
+              }
+            
+              public ArrayList<ReactPackage> getPackages() {
+                return new ArrayList<>(Arrays.<ReactPackage>asList(
+                  new MainReactPackage(mConfig){{ packageClassInstances }}
+                ));
+              }
+            }
+            """
+            .trimIndent()
+  }
+}
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/bin/main/com/facebook/react/tasks/internal/BuildCodegenCLITask.kt b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/bin/main/com/facebook/react/tasks/internal/BuildCodegenCLITask.kt
new file mode 100644
index 0000000..74eba65
--- /dev/null
+++ b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/bin/main/com/facebook/react/tasks/internal/BuildCodegenCLITask.kt
@@ -0,0 +1,64 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react.tasks.internal
+
+import com.facebook.react.utils.Os.unixifyPath
+import com.facebook.react.utils.windowsAwareBashCommandLine
+import java.io.FileOutputStream
+import org.gradle.api.file.DirectoryProperty
+import org.gradle.api.file.FileTree
+import org.gradle.api.file.RegularFileProperty
+import org.gradle.api.provider.Property
+import org.gradle.api.tasks.*
+
+/**
+ * A Task that will call the `scripts/oss/build.sh` script to trigger the creation of the codegen
+ * lib artifacts.
+ *
+ * NOTE: This task is required when using react-native-codegen from source, instead of npm.
+ */
+abstract class BuildCodegenCLITask : Exec() {
+
+  @get:Internal abstract val codegenDir: DirectoryProperty
+
+  @get:Internal abstract val bashWindowsHome: Property<String>
+
+  @get:Internal abstract val rootProjectName: Property<String>
+
+  @get:InputFiles abstract val inputFiles: Property<FileTree>
+
+  @get:OutputFiles abstract val outputFiles: Property<FileTree>
+
+  @get:OutputFile abstract val logFile: RegularFileProperty
+
+  override fun exec() {
+    // For build from source scenario, we don't need to build the codegen at all.
+    if (rootProjectName.get() == "react-native-build-from-source") {
+      return
+    }
+    val logFileConcrete =
+        logFile.get().asFile.apply {
+          parentFile.mkdirs()
+          if (exists()) {
+            delete()
+          }
+          createNewFile()
+        }
+    standardOutput = FileOutputStream(logFileConcrete)
+    commandLine(
+        windowsAwareBashCommandLine(
+            codegenDir.asFile.get().canonicalPath.unixifyPath().plus(BUILD_SCRIPT_PATH),
+            bashWindowsHome = bashWindowsHome.orNull,
+        ))
+    super.exec()
+  }
+
+  companion object {
+    private const val BUILD_SCRIPT_PATH = "/scripts/oss/build.sh"
+  }
+}
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/bin/main/com/facebook/react/tasks/internal/CustomExecTask.kt b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/bin/main/com/facebook/react/tasks/internal/CustomExecTask.kt
new file mode 100644
index 0000000..ae6d5c1
--- /dev/null
+++ b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/bin/main/com/facebook/react/tasks/internal/CustomExecTask.kt
@@ -0,0 +1,44 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react.tasks.internal
+
+import java.io.File
+import java.io.FileOutputStream
+import org.gradle.api.file.RegularFileProperty
+import org.gradle.api.provider.Property
+import org.gradle.api.tasks.Exec
+import org.gradle.api.tasks.Input
+import org.gradle.api.tasks.Optional
+import org.gradle.api.tasks.OutputFile
+
+/**
+ * A Task that will just expose an Exec-like task and that offers properties to configure the
+ * standard output and error.
+ */
+abstract class CustomExecTask : Exec() {
+
+  @get:OutputFile @get:Optional abstract val standardOutputFile: RegularFileProperty
+
+  @get:OutputFile @get:Optional abstract val errorOutputFile: RegularFileProperty
+
+  @get:Input @get:Optional abstract val onlyIfProvidedPathDoesNotExists: Property<String>
+
+  override fun exec() {
+    if (onlyIfProvidedPathDoesNotExists.isPresent &&
+        File(onlyIfProvidedPathDoesNotExists.get()).exists()) {
+      return
+    }
+    if (standardOutputFile.isPresent) {
+      standardOutput = FileOutputStream(standardOutputFile.get().asFile)
+    }
+    if (errorOutputFile.isPresent) {
+      errorOutput = FileOutputStream(errorOutputFile.get().asFile)
+    }
+    super.exec()
+  }
+}
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/bin/main/com/facebook/react/tasks/internal/PrepareBoostTask.kt b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/bin/main/com/facebook/react/tasks/internal/PrepareBoostTask.kt
new file mode 100644
index 0000000..c13a0d9
--- /dev/null
+++ b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/bin/main/com/facebook/react/tasks/internal/PrepareBoostTask.kt
@@ -0,0 +1,51 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react.tasks.internal
+
+import java.io.File
+import javax.inject.Inject
+import org.gradle.api.DefaultTask
+import org.gradle.api.file.ConfigurableFileCollection
+import org.gradle.api.file.DirectoryProperty
+import org.gradle.api.file.FileSystemOperations
+import org.gradle.api.provider.Property
+import org.gradle.api.tasks.*
+
+/**
+ * A task that takes care of extracting Boost from a source folder/zip and preparing it to be
+ * consumed by the NDK
+ */
+abstract class PrepareBoostTask : DefaultTask() {
+
+  @get:InputFiles abstract val boostPath: ConfigurableFileCollection
+  @get:InputDirectory abstract val boostThirdPartyJniPath: DirectoryProperty
+
+  @get:Input abstract val boostVersion: Property<String>
+
+  @get:OutputDirectory abstract val outputDir: DirectoryProperty
+
+  @get:Inject abstract val fs: FileSystemOperations
+
+  @TaskAction
+  fun taskAction() {
+    fs.copy { it ->
+      it.from(boostPath)
+      it.from(boostThirdPartyJniPath)
+      it.include(
+          "CMakeLists.txt",
+          "boost_${boostVersion.get()}/boost/**/*.hpp",
+          "boost/boost/**/*.hpp",
+          "asm/**/*.S")
+      it.includeEmptyDirs = false
+      it.into(outputDir)
+    }
+    File(outputDir.asFile.get(), "boost").apply {
+      renameTo(File(parentFile, "boost_${boostVersion.get()}"))
+    }
+  }
+}
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/bin/main/com/facebook/react/tasks/internal/PrepareGlogTask.kt b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/bin/main/com/facebook/react/tasks/internal/PrepareGlogTask.kt
new file mode 100644
index 0000000..b20a54d
--- /dev/null
+++ b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/bin/main/com/facebook/react/tasks/internal/PrepareGlogTask.kt
@@ -0,0 +1,83 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react.tasks.internal
+
+import java.io.File
+import javax.inject.Inject
+import org.apache.tools.ant.filters.ReplaceTokens
+import org.gradle.api.DefaultTask
+import org.gradle.api.file.ConfigurableFileCollection
+import org.gradle.api.file.DirectoryProperty
+import org.gradle.api.file.DuplicatesStrategy
+import org.gradle.api.file.FileSystemOperations
+import org.gradle.api.provider.Property
+import org.gradle.api.tasks.*
+
+/**
+ * A task that takes care of extracting Glog from a source folder/zip and preparing it to be
+ * consumed by the NDK. This task will also take care of applying the mapping for Glog parameters.
+ */
+abstract class PrepareGlogTask : DefaultTask() {
+
+  @get:InputFiles abstract val glogPath: ConfigurableFileCollection
+  @get:InputDirectory abstract val glogThirdPartyJniPath: DirectoryProperty
+  @get:Input abstract val glogVersion: Property<String>
+
+  @get:OutputDirectory abstract val outputDir: DirectoryProperty
+
+  @get:Inject abstract val fs: FileSystemOperations
+
+  @TaskAction
+  fun taskAction() {
+    fs.copy { action ->
+      action.from(glogPath)
+      action.from(glogThirdPartyJniPath)
+      action.include("glog-${glogVersion.get()}/src/**/*", "CMakeLists.txt", "config.h")
+      action.duplicatesStrategy = DuplicatesStrategy.INCLUDE
+      action.includeEmptyDirs = false
+      action.filesMatching("**/*.h.in") { matchedFile ->
+        matchedFile.filter(
+            mapOf(
+                "tokens" to
+                    mapOf(
+                        "ac_cv_have_unistd_h" to "1",
+                        "ac_cv_have_stdint_h" to "1",
+                        "ac_cv_have_systypes_h" to "1",
+                        "ac_cv_have_inttypes_h" to "1",
+                        "ac_cv_have_libgflags" to "0",
+                        "ac_google_start_namespace" to "namespace google {",
+                        "ac_cv_have_uint16_t" to "1",
+                        "ac_cv_have_u_int16_t" to "1",
+                        "ac_cv_have___uint16" to "0",
+                        "ac_google_end_namespace" to "}",
+                        "ac_cv_have___builtin_expect" to "1",
+                        "ac_google_namespace" to "google",
+                        "ac_cv___attribute___noinline" to "__attribute__ ((noinline))",
+                        "ac_cv___attribute___noreturn" to "__attribute__ ((noreturn))",
+                        "ac_cv___attribute___printf_4_5" to
+                            "__attribute__((__format__ (__printf__, 4, 5)))")),
+            ReplaceTokens::class.java)
+        matchedFile.path = (matchedFile.name.removeSuffix(".in"))
+      }
+      action.into(outputDir)
+    }
+    val exportedDir = File(outputDir.asFile.get(), "exported/glog/").apply { mkdirs() }
+    fs.copy { action ->
+      action.from(outputDir)
+      action.include(
+          "stl_logging.h",
+          "logging.h",
+          "raw_logging.h",
+          "vlog_is_on.h",
+          "**/src/glog/log_severity.h")
+      action.eachFile { file -> file.path = file.name }
+      action.includeEmptyDirs = false
+      action.into(exportedDir)
+    }
+  }
+}
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/bin/main/com/facebook/react/tasks/internal/PreparePrefabHeadersTask.kt b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/bin/main/com/facebook/react/tasks/internal/PreparePrefabHeadersTask.kt
new file mode 100644
index 0000000..f30392d
--- /dev/null
+++ b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/bin/main/com/facebook/react/tasks/internal/PreparePrefabHeadersTask.kt
@@ -0,0 +1,78 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react.tasks.internal
+
+import com.facebook.react.tasks.internal.utils.PrefabPreprocessingEntry
+import java.io.File
+import javax.inject.Inject
+import org.gradle.api.DefaultTask
+import org.gradle.api.file.DirectoryProperty
+import org.gradle.api.file.FileSystemOperations
+import org.gradle.api.file.RegularFile
+import org.gradle.api.provider.ListProperty
+import org.gradle.api.tasks.Input
+import org.gradle.api.tasks.OutputDirectory
+import org.gradle.api.tasks.TaskAction
+
+/**
+ * A task that takes care of copying headers and filtering them so that can be consumed by the
+ * Prefab protocol. This task handles also the header prefixes.
+ *
+ * It currently filters out some of the Boost headers as they're not used by React Native and are
+ * resulting in bigger .aar (250Mb+).
+ *
+ * You should provide in input a list fo [PrefabPreprocessingEntry] that will be used by this task
+ * to do the necessary copy operations.
+ */
+abstract class PreparePrefabHeadersTask : DefaultTask() {
+
+  @get:Input abstract val input: ListProperty<PrefabPreprocessingEntry>
+
+  @get:OutputDirectory abstract val outputDir: DirectoryProperty
+
+  @get:Inject abstract val fs: FileSystemOperations
+
+  @TaskAction
+  fun taskAction() {
+    input.get().forEach { (libraryName, pathToPrefixCouples) ->
+      val outputFolder: RegularFile = outputDir.file(libraryName).get()
+      pathToPrefixCouples.forEach { (headerPath, headerPrefix) ->
+        fs.copy {
+          it.from(headerPath)
+          it.include("**/*.h")
+          it.exclude("**/*.cpp")
+          it.exclude("**/*.txt")
+          // We don't want to copy all the boost headers as they are 250Mb+
+          it.include("boost/config.hpp")
+          it.include("boost/config/**/*.hpp")
+          it.include("boost/core/*.hpp")
+          it.include("boost/detail/workaround.hpp")
+          it.include("boost/operators.hpp")
+          it.include("boost/preprocessor/**/*.hpp")
+          // Headers needed for exposing rrc_text and rrc_textinput
+          it.include("boost/container_hash/**/*.hpp")
+          it.include("boost/detail/**/*.hpp")
+          it.include("boost/intrusive/**/*.hpp")
+          it.include("boost/iterator/**/*.hpp")
+          it.include("boost/move/**/*.hpp")
+          it.include("boost/mpl/**/*.hpp")
+          it.include("boost/mp11/**/*.hpp")
+          it.include("boost/describe/**/*.hpp")
+          it.include("boost/type_traits/**/*.hpp")
+          it.include("boost/utility/**/*.hpp")
+          it.include("boost/assert.hpp")
+          it.include("boost/static_assert.hpp")
+          it.include("boost/cstdint.hpp")
+          it.include("boost/utility.hpp")
+          it.include("boost/version.hpp")
+          it.into(File(outputFolder.asFile, headerPrefix))
+        }
+      }
+    }
+  }
+}
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/bin/main/com/facebook/react/tasks/internal/utils/PrefabPreprocessingEntry.kt b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/bin/main/com/facebook/react/tasks/internal/utils/PrefabPreprocessingEntry.kt
new file mode 100644
index 0000000..5221001
--- /dev/null
+++ b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/bin/main/com/facebook/react/tasks/internal/utils/PrefabPreprocessingEntry.kt
@@ -0,0 +1,28 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react.tasks.internal.utils
+
+import java.io.Serializable
+
+/**
+ * This data class represents an entry that can be consumed by the [PreparePrefabHeadersTask].
+ *
+ * @param libraryName The name of the library that you're preparing for Prefab
+ * @param pathToPrefixCouples A list of pairs Path to Header prefix. You can use this list to supply
+ *   a list of paths that you want to be considered for prefab. Each path can specify an header
+ *   prefix that will be used by prefab to re-created the header layout.
+ */
+data class PrefabPreprocessingEntry(
+    val libraryName: String,
+    val pathToPrefixCouples: List<Pair<String, String>>,
+) : Serializable {
+  constructor(
+      libraryName: String,
+      pathToPrefixCouple: Pair<String, String>
+  ) : this(libraryName, listOf(pathToPrefixCouple))
+}
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/bin/main/com/facebook/react/utils/AgpConfiguratorUtils.kt b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/bin/main/com/facebook/react/utils/AgpConfiguratorUtils.kt
new file mode 100644
index 0000000..39344aa
--- /dev/null
+++ b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/bin/main/com/facebook/react/utils/AgpConfiguratorUtils.kt
@@ -0,0 +1,106 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react.utils
+
+import com.android.build.api.variant.AndroidComponentsExtension
+import com.android.build.gradle.LibraryExtension
+import com.facebook.react.ReactExtension
+import com.facebook.react.utils.ProjectUtils.isHermesEnabled
+import com.facebook.react.utils.ProjectUtils.isNewArchEnabled
+import java.io.File
+import javax.xml.parsers.DocumentBuilder
+import javax.xml.parsers.DocumentBuilderFactory
+import org.gradle.api.Action
+import org.gradle.api.Project
+import org.gradle.api.plugins.AppliedPlugin
+import org.w3c.dom.Element
+
+@Suppress("UnstableApiUsage")
+internal object AgpConfiguratorUtils {
+
+  fun configureBuildConfigFieldsForApp(project: Project, extension: ReactExtension) {
+    val action =
+        Action<AppliedPlugin> {
+          project.extensions.getByType(AndroidComponentsExtension::class.java).finalizeDsl { ext ->
+            ext.buildFeatures.buildConfig = true
+            ext.defaultConfig.buildConfigField(
+                "boolean",
+                "IS_NEW_ARCHITECTURE_ENABLED",
+                project.isNewArchEnabled(extension).toString())
+            ext.defaultConfig.buildConfigField(
+                "boolean", "IS_HERMES_ENABLED", project.isHermesEnabled.toString())
+          }
+        }
+    project.pluginManager.withPlugin("com.android.application", action)
+    project.pluginManager.withPlugin("com.android.library", action)
+  }
+
+  fun configureBuildConfigFieldsForLibraries(appProject: Project) {
+    appProject.rootProject.allprojects { subproject ->
+      subproject.pluginManager.withPlugin("com.android.library") {
+        subproject.extensions.getByType(AndroidComponentsExtension::class.java).finalizeDsl { ext ->
+          ext.buildFeatures.buildConfig = true
+        }
+      }
+    }
+  }
+
+  fun configureDevPorts(project: Project) {
+    val devServerPort =
+        project.properties["reactNativeDevServerPort"]?.toString() ?: DEFAULT_DEV_SERVER_PORT
+
+    val action =
+        Action<AppliedPlugin> {
+          project.extensions.getByType(AndroidComponentsExtension::class.java).finalizeDsl { ext ->
+            ext.defaultConfig.resValue("integer", "react_native_dev_server_port", devServerPort)
+          }
+        }
+
+    project.pluginManager.withPlugin("com.android.application", action)
+    project.pluginManager.withPlugin("com.android.library", action)
+  }
+
+  fun configureNamespaceForLibraries(appProject: Project) {
+    appProject.rootProject.allprojects { subproject ->
+      subproject.pluginManager.withPlugin("com.android.library") {
+        subproject.extensions.getByType(AndroidComponentsExtension::class.java).finalizeDsl { ext ->
+          if (ext.namespace == null) {
+            val android = subproject.extensions.getByType(LibraryExtension::class.java)
+            val manifestFile = android.sourceSets.getByName("main").manifest.srcFile
+
+            manifestFile
+                .takeIf { it.exists() }
+                ?.let { file ->
+                  getPackageNameFromManifest(file)?.let { packageName ->
+                    ext.namespace = packageName
+                  }
+                }
+          }
+        }
+      }
+    }
+  }
+}
+
+const val DEFAULT_DEV_SERVER_PORT = "8081"
+
+fun getPackageNameFromManifest(manifest: File): String? {
+  val factory: DocumentBuilderFactory = DocumentBuilderFactory.newInstance()
+  val builder: DocumentBuilder = factory.newDocumentBuilder()
+
+  try {
+    val xmlDocument = builder.parse(manifest)
+
+    val manifestElement = xmlDocument.getElementsByTagName("manifest").item(0) as? Element
+    val packageName = manifestElement?.getAttribute("package")
+
+    return if (packageName.isNullOrEmpty()) null else packageName
+  } catch (e: Exception) {
+    return null
+  }
+}
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/bin/main/com/facebook/react/utils/BackwardCompatUtils.kt b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/bin/main/com/facebook/react/utils/BackwardCompatUtils.kt
new file mode 100644
index 0000000..979d553
--- /dev/null
+++ b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/bin/main/com/facebook/react/utils/BackwardCompatUtils.kt
@@ -0,0 +1,70 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react.utils
+
+import java.util.*
+import org.gradle.api.Project
+
+internal object BackwardCompatUtils {
+  private var hasShownJSCRemovalMessage = false
+
+  fun configureBackwardCompatibilityReactMap(project: Project) {
+    if (project.extensions.extraProperties.has("react")) {
+      @Suppress("UNCHECKED_CAST")
+      val reactMap =
+          project.extensions.extraProperties.get("react") as? Map<String, Any?> ?: mapOf()
+      if (reactMap.isNotEmpty()) {
+        project.logger.error(
+            """
+          ********************************************************************************
+ 
+          ERROR: Using old project.ext.react configuration.
+          We identified that your project is using a old configuration block as:
+          
+          project.ext.react = [
+              // ...
+          ]
+          
+          You should migrate to the new configuration:
+          
+          react {
+              // ...
+          }
+          You can find documentation inside `android/app/build.gradle` on how to use it.
+        
+          ********************************************************************************
+          """
+                .trimIndent())
+      }
+    }
+
+    // We set an empty react[] map so if a library is reading it, they will find empty values.
+    project.extensions.extraProperties.set("react", mapOf<String, String>())
+  }
+
+  fun showJSCRemovalMessage(project: Project) {
+    if (hasShownJSCRemovalMessage) {
+      return
+    }
+
+    val message =
+        """
+
+=============== JavaScriptCore is being moved ===============
+JavaScriptCore has been extracted from react-native core
+and will be removed in a future release. It can now be
+installed from `@react-native-community/javascriptcore`
+See: https://github.com/react-native-community/javascriptcore
+=============================================================
+
+"""
+            .trimIndent()
+    project.logger.warn(message)
+    hasShownJSCRemovalMessage = true
+  }
+}
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/bin/main/com/facebook/react/utils/DependencyUtils.kt b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/bin/main/com/facebook/react/utils/DependencyUtils.kt
new file mode 100644
index 0000000..d9cc0f7
--- /dev/null
+++ b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/bin/main/com/facebook/react/utils/DependencyUtils.kt
@@ -0,0 +1,184 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react.utils
+
+import com.facebook.react.utils.PropertyUtils.DEFAULT_INTERNAL_PUBLISHING_GROUP
+import com.facebook.react.utils.PropertyUtils.INCLUDE_JITPACK_REPOSITORY
+import com.facebook.react.utils.PropertyUtils.INCLUDE_JITPACK_REPOSITORY_DEFAULT
+import com.facebook.react.utils.PropertyUtils.INTERNAL_PUBLISHING_GROUP
+import com.facebook.react.utils.PropertyUtils.INTERNAL_REACT_NATIVE_MAVEN_LOCAL_REPO
+import com.facebook.react.utils.PropertyUtils.INTERNAL_USE_HERMES_NIGHTLY
+import com.facebook.react.utils.PropertyUtils.INTERNAL_VERSION_NAME
+import com.facebook.react.utils.PropertyUtils.SCOPED_INCLUDE_JITPACK_REPOSITORY
+import java.io.File
+import java.net.URI
+import java.util.*
+import org.gradle.api.Project
+import org.gradle.api.artifacts.repositories.MavenArtifactRepository
+
+internal object DependencyUtils {
+
+  /**
+   * This method takes care of configuring the repositories{} block for both the app and all the 3rd
+   * party libraries which are auto-linked.
+   */
+  fun configureRepositories(project: Project) {
+    project.rootProject.allprojects { eachProject ->
+      with(eachProject) {
+        if (hasProperty(INTERNAL_REACT_NATIVE_MAVEN_LOCAL_REPO)) {
+          val mavenLocalRepoPath = property(INTERNAL_REACT_NATIVE_MAVEN_LOCAL_REPO) as String
+          mavenRepoFromURI(File(mavenLocalRepoPath).toURI()) { repo ->
+            repo.content { it.excludeGroup("org.webkit") }
+          }
+        }
+        // We add the snapshot for users on nightlies.
+        mavenRepoFromUrl("https://oss.sonatype.org/content/repositories/snapshots/") { repo ->
+          repo.content { it.excludeGroup("org.webkit") }
+        }
+        repositories.mavenCentral { repo ->
+          // We don't want to fetch JSC from Maven Central as there are older versions there.
+          repo.content { it.excludeGroup("org.webkit") }
+
+          // If the user provided a react.internal.mavenLocalRepo, do not attempt to load
+          // anything from Maven Central that is react related.
+          if (hasProperty(INTERNAL_REACT_NATIVE_MAVEN_LOCAL_REPO)) {
+            repo.content { it.excludeGroup("com.facebook.react") }
+          }
+        }
+        repositories.google { repo ->
+          repo.content {
+            // We don't want to fetch JSC or React from Google
+            it.excludeGroup("org.webkit")
+            it.excludeGroup("io.github.react-native-community")
+            it.excludeGroup("com.facebook.react")
+          }
+        }
+        if (shouldAddJitPack()) {
+          mavenRepoFromUrl("https://www.jitpack.io") { repo ->
+            repo.content { content ->
+              // We don't want to fetch JSC or React from JitPack
+              content.excludeGroup("org.webkit")
+              content.excludeGroup("io.github.react-native-community")
+              content.excludeGroup("com.facebook.react")
+            }
+          }
+        }
+      }
+    }
+  }
+
+  /**
+   * This method takes care of configuring the resolution strategy for both the app and all the 3rd
+   * party libraries which are auto-linked. Specifically it takes care of:
+   * - Forcing the react-android/hermes-android version to the one specified in the package.json
+   * - Substituting `react-native` with `react-android` and `hermes-engine` with `hermes-android`.
+   */
+  fun configureDependencies(
+      project: Project,
+      versionString: String,
+      groupString: String = DEFAULT_INTERNAL_PUBLISHING_GROUP
+  ) {
+    if (versionString.isBlank()) return
+    project.rootProject.allprojects { eachProject ->
+      eachProject.configurations.all { configuration ->
+        // Here we set a dependencySubstitution for both react-native and hermes-engine as those
+        // coordinates are voided due to https://github.com/facebook/react-native/issues/35210
+        // This allows users to import libraries that are still using
+        // implementation("com.facebook.react:react-native:+") and resolve the right dependency.
+        configuration.resolutionStrategy.dependencySubstitution {
+          getDependencySubstitutions(versionString, groupString).forEach { (module, dest, reason) ->
+            it.substitute(it.module(module)).using(it.module(dest)).because(reason)
+          }
+        }
+        configuration.resolutionStrategy.force(
+            "${groupString}:react-android:${versionString}",
+        )
+        if (!(eachProject.findProperty(INTERNAL_USE_HERMES_NIGHTLY) as? String).toBoolean()) {
+          // Contributors only: The hermes-engine version is forced only if the user has
+          // not opted into using nightlies for local development.
+          configuration.resolutionStrategy.force("${groupString}:hermes-android:${versionString}")
+        }
+      }
+    }
+  }
+
+  internal fun getDependencySubstitutions(
+      versionString: String,
+      groupString: String = DEFAULT_INTERNAL_PUBLISHING_GROUP
+  ): List<Triple<String, String, String>> {
+    val dependencySubstitution = mutableListOf<Triple<String, String, String>>()
+    dependencySubstitution.add(
+        Triple(
+            "com.facebook.react:react-native",
+            "${groupString}:react-android:${versionString}",
+            "The react-native artifact was deprecated in favor of react-android due to https://github.com/facebook/react-native/issues/35210."))
+    dependencySubstitution.add(
+        Triple(
+            "com.facebook.react:hermes-engine",
+            "${groupString}:hermes-android:${versionString}",
+            "The hermes-engine artifact was deprecated in favor of hermes-android due to https://github.com/facebook/react-native/issues/35210."))
+    if (groupString != DEFAULT_INTERNAL_PUBLISHING_GROUP) {
+      dependencySubstitution.add(
+          Triple(
+              "com.facebook.react:react-android",
+              "${groupString}:react-android:${versionString}",
+              "The react-android dependency was modified to use the correct Maven group."))
+      dependencySubstitution.add(
+          Triple(
+              "com.facebook.react:hermes-android",
+              "${groupString}:hermes-android:${versionString}",
+              "The hermes-android dependency was modified to use the correct Maven group."))
+    }
+    return dependencySubstitution
+  }
+
+  fun readVersionAndGroupStrings(propertiesFile: File): Pair<String, String> {
+    val reactAndroidProperties = Properties()
+    propertiesFile.inputStream().use { reactAndroidProperties.load(it) }
+    val versionStringFromFile = (reactAndroidProperties[INTERNAL_VERSION_NAME] as? String).orEmpty()
+    // If on a nightly, we need to fetch the -SNAPSHOT artifact from Sonatype.
+    val versionString =
+        if (versionStringFromFile.startsWith("0.0.0") || "-nightly-" in versionStringFromFile) {
+          "$versionStringFromFile-SNAPSHOT"
+        } else {
+          versionStringFromFile
+        }
+    // Returns Maven group for repos using different group for Maven artifacts
+    val groupString =
+        reactAndroidProperties[INTERNAL_PUBLISHING_GROUP] as? String
+            ?: DEFAULT_INTERNAL_PUBLISHING_GROUP
+    return Pair(versionString, groupString)
+  }
+
+  fun Project.mavenRepoFromUrl(
+      url: String,
+      action: (MavenArtifactRepository) -> Unit = {}
+  ): MavenArtifactRepository =
+      project.repositories.maven {
+        it.url = URI.create(url)
+        action(it)
+      }
+
+  fun Project.mavenRepoFromURI(
+      uri: URI,
+      action: (MavenArtifactRepository) -> Unit = {}
+  ): MavenArtifactRepository =
+      project.repositories.maven {
+        it.url = uri
+        action(it)
+      }
+
+  internal fun Project.shouldAddJitPack() =
+      when {
+        hasProperty(SCOPED_INCLUDE_JITPACK_REPOSITORY) ->
+            property(SCOPED_INCLUDE_JITPACK_REPOSITORY).toString().toBoolean()
+        hasProperty(INCLUDE_JITPACK_REPOSITORY) ->
+            property(INCLUDE_JITPACK_REPOSITORY).toString().toBoolean()
+        else -> INCLUDE_JITPACK_REPOSITORY_DEFAULT
+      }
+}
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/bin/main/com/facebook/react/utils/FileUtils.kt b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/bin/main/com/facebook/react/utils/FileUtils.kt
new file mode 100644
index 0000000..28774b8
--- /dev/null
+++ b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/bin/main/com/facebook/react/utils/FileUtils.kt
@@ -0,0 +1,20 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react.utils
+
+import java.io.File
+
+internal fun File.moveTo(destination: File) {
+  copyTo(destination, overwrite = true)
+  delete()
+}
+
+internal fun File.recreateDir() {
+  deleteRecursively()
+  mkdirs()
+}
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/bin/main/com/facebook/react/utils/JdkConfiguratorUtils.kt b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/bin/main/com/facebook/react/utils/JdkConfiguratorUtils.kt
new file mode 100644
index 0000000..e59e9d5
--- /dev/null
+++ b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/bin/main/com/facebook/react/utils/JdkConfiguratorUtils.kt
@@ -0,0 +1,52 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react.utils
+
+import com.android.build.api.variant.AndroidComponentsExtension
+import com.facebook.react.utils.PropertyUtils.INTERNAL_DISABLE_JAVA_VERSION_ALIGNMENT
+import org.gradle.api.Action
+import org.gradle.api.JavaVersion
+import org.gradle.api.Project
+import org.gradle.api.plugins.AppliedPlugin
+import org.jetbrains.kotlin.gradle.dsl.kotlinExtension
+
+internal object JdkConfiguratorUtils {
+  /**
+   * Function that takes care of configuring the JDK toolchain for all the projects projects. As we
+   * do decide the JDK version based on the AGP version that RNGP brings over, here we can safely
+   * configure the toolchain to 17.
+   */
+  fun configureJavaToolChains(input: Project) {
+    // Check at the app level if react.internal.disableJavaVersionAlignment is set.
+    if (input.hasProperty(INTERNAL_DISABLE_JAVA_VERSION_ALIGNMENT)) {
+      return
+    }
+    input.rootProject.allprojects { project ->
+      // Allows every single module to set react.internal.disableJavaVersionAlignment also.
+      if (project.hasProperty(INTERNAL_DISABLE_JAVA_VERSION_ALIGNMENT)) {
+        return@allprojects
+      }
+      val action =
+          Action<AppliedPlugin> {
+            project.extensions.getByType(AndroidComponentsExtension::class.java).finalizeDsl { ext
+              ->
+              ext.compileOptions.sourceCompatibility = JavaVersion.VERSION_17
+              ext.compileOptions.targetCompatibility = JavaVersion.VERSION_17
+            }
+          }
+      project.pluginManager.withPlugin("com.android.application", action)
+      project.pluginManager.withPlugin("com.android.library", action)
+      project.pluginManager.withPlugin("org.jetbrains.kotlin.android") {
+        project.kotlinExtension.jvmToolchain(17)
+      }
+      project.pluginManager.withPlugin("org.jetbrains.kotlin.jvm") {
+        project.kotlinExtension.jvmToolchain(17)
+      }
+    }
+  }
+}
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/bin/main/com/facebook/react/utils/NdkConfiguratorUtils.kt b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/bin/main/com/facebook/react/utils/NdkConfiguratorUtils.kt
new file mode 100644
index 0000000..50e0ce0
--- /dev/null
+++ b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/bin/main/com/facebook/react/utils/NdkConfiguratorUtils.kt
@@ -0,0 +1,150 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react.utils
+
+import com.android.build.api.variant.AndroidComponentsExtension
+import com.android.build.api.variant.Variant
+import com.facebook.react.ReactExtension
+import com.facebook.react.utils.ProjectUtils.getReactNativeArchitectures
+import com.facebook.react.utils.ProjectUtils.isNewArchEnabled
+import java.io.File
+import org.gradle.api.Project
+
+internal object NdkConfiguratorUtils {
+  @Suppress("UnstableApiUsage")
+  fun configureReactNativeNdk(project: Project, extension: ReactExtension) {
+    project.pluginManager.withPlugin("com.android.application") {
+      project.extensions.getByType(AndroidComponentsExtension::class.java).finalizeDsl { ext ->
+        if (!project.isNewArchEnabled(extension)) {
+          // For Old Arch, we don't need to setup the NDK
+          return@finalizeDsl
+        }
+        // We enable prefab so users can consume .so/headers from ReactAndroid and hermes-engine
+        // .aar
+        ext.buildFeatures.prefab = true
+
+        // If the user has not provided a CmakeLists.txt path, let's provide
+        // the default one from the framework
+        if (ext.externalNativeBuild.cmake.path == null) {
+          ext.externalNativeBuild.cmake.path =
+              File(
+                  extension.reactNativeDir.get().asFile,
+                  "ReactAndroid/cmake-utils/default-app-setup/CMakeLists.txt")
+        }
+
+        // Parameters should be provided in an additive manner (do not override what
+        // the user provided, but allow for sensible defaults).
+        val cmakeArgs = ext.defaultConfig.externalNativeBuild.cmake.arguments
+        if (cmakeArgs.none { it.startsWith("-DPROJECT_BUILD_DIR") }) {
+          cmakeArgs.add("-DPROJECT_BUILD_DIR=${project.layout.buildDirectory.get().asFile}")
+        }
+        if (cmakeArgs.none { it.startsWith("-DPROJECT_ROOT_DIR") }) {
+          cmakeArgs.add("-DPROJECT_ROOT_DIR=${project.rootProject.layout.projectDirectory.asFile}")
+        }
+        if (cmakeArgs.none { it.startsWith("-DREACT_ANDROID_DIR") }) {
+          cmakeArgs.add(
+              "-DREACT_ANDROID_DIR=${extension.reactNativeDir.file("ReactAndroid").get().asFile}")
+        }
+        if (cmakeArgs.none { it.startsWith("-DANDROID_STL") }) {
+          cmakeArgs.add("-DANDROID_STL=c++_shared")
+        }
+        if (cmakeArgs.none { it.startsWith("-DANDROID_SUPPORT_FLEXIBLE_PAGE_SIZES") }) {
+          cmakeArgs.add("-DANDROID_SUPPORT_FLEXIBLE_PAGE_SIZES=ON")
+        }
+
+        val architectures = project.getReactNativeArchitectures()
+        // abiFilters are split ABI are not compatible each other, so we set the abiFilters
+        // only if the user hasn't enabled the split abi feature.
+        if (architectures.isNotEmpty() && !ext.splits.abi.isEnable) {
+          ext.defaultConfig.ndk.abiFilters.addAll(architectures)
+        }
+      }
+    }
+  }
+
+  /**
+   * This method is used to configure the .so Packaging Options for the given variant. It will make
+   * sure we specify the correct .pickFirsts for all the .so files we are producing or that we're
+   * aware of as some of our dependencies are pulling them in.
+   */
+  fun configureNewArchPackagingOptions(
+      project: Project,
+      extension: ReactExtension,
+      variant: Variant
+  ) {
+    if (!project.isNewArchEnabled(extension)) {
+      // For Old Arch, we set a pickFirst only on libraries that we know are
+      // clashing with our direct dependencies (mainly FBJNI and Hermes).
+      variant.packaging.jniLibs.pickFirsts.addAll(
+          listOf(
+              "**/libfbjni.so",
+              "**/libc++_shared.so",
+          ))
+    } else {
+      // We set some packagingOptions { pickFirst ... } for our users for libraries we own.
+      variant.packaging.jniLibs.pickFirsts.addAll(
+          listOf(
+              // This is the .so provided by FBJNI via prefab
+              "**/libfbjni.so",
+              // Those are prefab libraries we distribute via ReactAndroid
+              // Due to a bug in AGP, they fire a warning on console as both the JNI
+              // and the prefab .so files gets considered.
+              "**/libreactnative.so",
+              "**/libjsi.so",
+              // AGP will give priority of libc++_shared coming from App modules.
+              "**/libc++_shared.so",
+          ))
+    }
+  }
+
+  /**
+   * This method is used to configure the .so Cleanup for the given variant. It takes care of
+   * cleaning up the .so files that are not needed for Hermes or JSC, given a specific variant.
+   */
+  fun configureJsEnginePackagingOptions(
+      config: ReactExtension,
+      variant: Variant,
+      hermesEnabled: Boolean,
+      useThirdPartyJSC: Boolean,
+  ) {
+    if (config.enableSoCleanup.get()) {
+      val (excludes, includes) = getPackagingOptionsForVariant(hermesEnabled, useThirdPartyJSC)
+      variant.packaging.jniLibs.excludes.addAll(excludes)
+      variant.packaging.jniLibs.pickFirsts.addAll(includes)
+    }
+  }
+
+  fun getPackagingOptionsForVariant(
+      hermesEnabled: Boolean,
+      useThirdPartyJSC: Boolean
+  ): Pair<List<String>, List<String>> {
+    val excludes = mutableListOf<String>()
+    val includes = mutableListOf<String>()
+    when {
+      hermesEnabled -> {
+        excludes.add("**/libjsc.so")
+        excludes.add("**/libjsctooling.so")
+        includes.add("**/libhermes.so")
+        includes.add("**/libhermestooling.so")
+      }
+      useThirdPartyJSC -> {
+        excludes.add("**/libhermes.so")
+        excludes.add("**/libhermestooling.so")
+        excludes.add("**/libjsctooling.so")
+        includes.add("**/libjsc.so")
+      }
+      else -> {
+        excludes.add("**/libhermes.so")
+        excludes.add("**/libhermestooling.so")
+        includes.add("**/libjsc.so")
+        includes.add("**/libjsctooling.so")
+      }
+    }
+    return excludes to includes
+  }
+}
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/bin/main/com/facebook/react/utils/PathUtils.kt b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/bin/main/com/facebook/react/utils/PathUtils.kt
new file mode 100644
index 0000000..0081b31
--- /dev/null
+++ b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/bin/main/com/facebook/react/utils/PathUtils.kt
@@ -0,0 +1,232 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+@file:JvmName("PathUtils")
+
+package com.facebook.react.utils
+
+import com.facebook.react.ReactExtension
+import com.facebook.react.model.ModelPackageJson
+import com.facebook.react.utils.KotlinStdlibCompatUtils.capitalizeCompat
+import com.facebook.react.utils.Os.cliPath
+import java.io.File
+import org.gradle.api.Project
+import org.gradle.api.file.DirectoryProperty
+
+/**
+ * Computes the entry file for React Native. The Algo follows this order:
+ * 1. The file pointed by the ENTRY_FILE env variable, if set.
+ * 2. The file provided by the `entryFile` config in the `reactApp` Gradle extension
+ * 3. The `index.android.js` file, if available.
+ * 4. Fallback to the `index.js` file.
+ *
+ * @param config The [ReactExtension] configured for this project
+ */
+internal fun detectedEntryFile(config: ReactExtension, envVariableOverride: String? = null): File =
+    detectEntryFile(
+        entryFile = config.entryFile.orNull?.asFile,
+        reactRoot = config.root.get().asFile,
+        envVariableOverride = envVariableOverride)
+
+/**
+ * Computes the CLI file for React Native. The Algo follows this order:
+ * 1. The path provided by the `cliFile` config in the `react {}` Gradle extension
+ * 2. The output of `node --print "require.resolve('react-native/cli');"` if not failing.
+ * 3. The `node_modules/react-native/cli.js` file if exists
+ * 4. Fails otherwise
+ */
+internal fun detectedCliFile(config: ReactExtension): File =
+    detectCliFile(
+        reactNativeRoot = config.root.get().asFile,
+        preconfiguredCliFile = config.cliFile.asFile.orNull)
+
+/**
+ * Computes the `hermesc` command location. The Algo follows this order:
+ * 1. The path provided by the `hermesCommand` config in the `react` Gradle extension
+ * 2. The file located in `node_modules/react-native/sdks/hermes/build/bin/hermesc`. This will be
+ *    used if the user is building Hermes from source.
+ * 3. The file located in `node_modules/react-native/sdks/hermesc/%OS-BIN%/hermesc` where `%OS-BIN%`
+ *    is substituted with the correct OS arch. This will be used if the user is using a precompiled
+ *    hermes-engine package.
+ * 4. Fails otherwise
+ */
+internal fun detectedHermesCommand(config: ReactExtension): String =
+    detectOSAwareHermesCommand(config.root.get().asFile, config.hermesCommand.get())
+
+private fun detectEntryFile(
+    entryFile: File?,
+    reactRoot: File,
+    envVariableOverride: String? = null
+): File =
+    when {
+      envVariableOverride != null -> File(reactRoot, envVariableOverride)
+      entryFile != null -> entryFile
+      File(reactRoot, "index.android.js").exists() -> File(reactRoot, "index.android.js")
+      else -> File(reactRoot, "index.js")
+    }
+
+private fun detectCliFile(reactNativeRoot: File, preconfiguredCliFile: File?): File {
+  // 1. preconfigured path
+  if (preconfiguredCliFile != null) {
+    if (preconfiguredCliFile.exists()) {
+      return preconfiguredCliFile
+    }
+  }
+
+  // 2. node module path
+  val nodeProcess =
+      Runtime.getRuntime()
+          .exec(
+              arrayOf("node", "--print", "require.resolve('react-native/cli');"),
+              emptyArray(),
+              reactNativeRoot)
+
+  val nodeProcessOutput = nodeProcess.inputStream.use { it.bufferedReader().readText().trim() }
+
+  if (nodeProcessOutput.isNotEmpty()) {
+    val nodeModuleCliJs = File(nodeProcessOutput)
+    if (nodeModuleCliJs.exists()) {
+      return nodeModuleCliJs
+    }
+  }
+
+  // 3. cli.js in the root folder
+  val rootCliJs = File(reactNativeRoot, "node_modules/react-native/cli.js")
+  if (rootCliJs.exists()) {
+    return rootCliJs
+  }
+
+  error(
+      """
+      Couldn't determine CLI location!
+
+      Please set `react { cliFile = file(...) }` inside your
+      build.gradle to the path of the react-native cli.js file.
+      This file typically resides in `node_modules/react-native/cli.js`
+    """
+          .trimIndent())
+}
+
+/**
+ * Computes the `hermesc` command location. The Algo follows this order:
+ * 1. The path provided by the `hermesCommand` config in the `react` Gradle extension
+ * 2. The file located in `node_modules/react-native/sdks/hermes/build/bin/hermesc`. This will be
+ *    used if the user is building Hermes from source.
+ * 3. The file located in `node_modules/react-native/sdks/hermesc/%OS-BIN%/hermesc` where `%OS-BIN%`
+ *    is substituted with the correct OS arch. This will be used if the user is using a precompiled
+ *    hermes-engine package.
+ * 4. Fails otherwise
+ */
+internal fun detectOSAwareHermesCommand(projectRoot: File, hermesCommand: String): String {
+  // 1. If the project specifies a Hermes command, don't second guess it.
+  if (hermesCommand.isNotBlank()) {
+    val osSpecificHermesCommand =
+        if ("%OS-BIN%" in hermesCommand) {
+          hermesCommand.replace("%OS-BIN%", getHermesOSBin())
+        } else {
+          hermesCommand
+        }
+    return osSpecificHermesCommand
+        // Execution on Windows fails with / as separator
+        .replace('/', File.separatorChar)
+  }
+
+  // 2. If the project is building hermes-engine from source, use hermesc from there
+  val builtHermesc =
+      getBuiltHermescFile(projectRoot, System.getenv("REACT_NATIVE_OVERRIDE_HERMES_DIR"))
+  if (builtHermesc.exists()) {
+    return builtHermesc.cliPath(projectRoot)
+  }
+
+  // 3. If the react-native contains a pre-built hermesc, use it.
+  val prebuiltHermesPath =
+      HERMESC_IN_REACT_NATIVE_DIR.plus(getHermesCBin())
+          .replace("%OS-BIN%", getHermesOSBin())
+          // Execution on Windows fails with / as separator
+          .replace('/', File.separatorChar)
+
+  val prebuiltHermes = File(projectRoot, prebuiltHermesPath)
+  if (prebuiltHermes.exists()) {
+    return prebuiltHermes.cliPath(projectRoot)
+  }
+
+  error(
+      "Couldn't determine Hermesc location. " +
+          "Please set `react.hermesCommand` to the path of the hermesc binary file. " +
+          "node_modules/react-native/sdks/hermesc/%OS-BIN%/hermesc")
+}
+
+/**
+ * Gets the location where Hermesc should be. If nothing is specified, built hermesc is assumed to
+ * be inside [HERMESC_BUILT_FROM_SOURCE_DIR]. Otherwise user can specify an override with
+ * [pathOverride], which is assumed to be an absolute path where Hermes source code is
+ * provided/built.
+ *
+ * @param projectRoot The root of the Project.
+ */
+internal fun getBuiltHermescFile(projectRoot: File, pathOverride: String?) =
+    if (!pathOverride.isNullOrBlank()) {
+      File(pathOverride, "build/bin/${getHermesCBin()}")
+    } else {
+      File(projectRoot, HERMESC_BUILT_FROM_SOURCE_DIR.plus(getHermesCBin()))
+    }
+
+internal fun getHermesCBin() = if (Os.isWindows()) "hermesc.exe" else "hermesc"
+
+internal fun getHermesOSBin(): String {
+  if (Os.isWindows()) return "win64-bin"
+  if (Os.isMac()) return "osx-bin"
+  if (Os.isLinuxAmd64()) return "linux64-bin"
+  error(
+      "OS not recognized. Please set project.react.hermesCommand " +
+          "to the path of a working Hermes compiler.")
+}
+
+internal fun projectPathToLibraryName(projectPath: String): String =
+    projectPath
+        .split(':', '-', '_', '.')
+        .joinToString("") { token -> token.capitalizeCompat() }
+        .plus("Spec")
+
+/**
+ * Function to look for the relevant `package.json`. We first look in the parent folder of this
+ * Gradle module (generally the case for library projects) or we fallback to looking into the `root`
+ * folder of a React Native project (generally the case for app projects).
+ */
+internal fun findPackageJsonFile(project: Project, rootProperty: DirectoryProperty): File? {
+  val inParent = project.file("../package.json")
+  if (inParent.exists()) {
+    return inParent
+  }
+
+  val fromExtension = rootProperty.file("package.json").orNull?.asFile
+  if (fromExtension?.exists() == true) {
+    return fromExtension
+  }
+
+  return null
+}
+
+/**
+ * Function to look for the `package.json` and parse it. It returns a [ModelPackageJson] if found or
+ * null others.
+ *
+ * Please note that this function access the [DirectoryProperty] parameter and calls .get() on them,
+ * so calling this during apply() of the ReactPlugin is not recommended. It should be invoked inside
+ * lazy lambdas or at execution time.
+ */
+internal fun readPackageJsonFile(
+    project: Project,
+    rootProperty: DirectoryProperty
+): ModelPackageJson? {
+  val packageJson = findPackageJsonFile(project, rootProperty)
+  return packageJson?.let { JsonUtils.fromPackageJson(it) }
+}
+
+private const val HERMESC_IN_REACT_NATIVE_DIR = "node_modules/react-native/sdks/hermesc/%OS-BIN%/"
+private const val HERMESC_BUILT_FROM_SOURCE_DIR =
+    "node_modules/react-native/ReactAndroid/hermes-engine/build/hermes/bin/"
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/bin/main/com/facebook/react/utils/ProjectUtils.kt b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/bin/main/com/facebook/react/utils/ProjectUtils.kt
new file mode 100644
index 0000000..2b1174c
--- /dev/null
+++ b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/bin/main/com/facebook/react/utils/ProjectUtils.kt
@@ -0,0 +1,95 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react.utils
+
+import com.facebook.react.ReactExtension
+import com.facebook.react.model.ModelPackageJson
+import com.facebook.react.utils.KotlinStdlibCompatUtils.lowercaseCompat
+import com.facebook.react.utils.KotlinStdlibCompatUtils.toBooleanStrictOrNullCompat
+import com.facebook.react.utils.PropertyUtils.HERMES_ENABLED
+import com.facebook.react.utils.PropertyUtils.NEW_ARCH_ENABLED
+import com.facebook.react.utils.PropertyUtils.REACT_NATIVE_ARCHITECTURES
+import com.facebook.react.utils.PropertyUtils.SCOPED_HERMES_ENABLED
+import com.facebook.react.utils.PropertyUtils.SCOPED_NEW_ARCH_ENABLED
+import com.facebook.react.utils.PropertyUtils.SCOPED_REACT_NATIVE_ARCHITECTURES
+import com.facebook.react.utils.PropertyUtils.SCOPED_USE_THIRD_PARTY_JSC
+import com.facebook.react.utils.PropertyUtils.USE_THIRD_PARTY_JSC
+import org.gradle.api.Project
+import org.gradle.api.file.DirectoryProperty
+
+internal object ProjectUtils {
+
+  const val HERMES_FALLBACK = true
+
+  internal fun Project.isNewArchEnabled(extension: ReactExtension): Boolean {
+    return (project.hasProperty(NEW_ARCH_ENABLED) &&
+        project.property(NEW_ARCH_ENABLED).toString().toBoolean()) ||
+        (project.hasProperty(SCOPED_NEW_ARCH_ENABLED) &&
+            project.property(SCOPED_NEW_ARCH_ENABLED).toString().toBoolean())
+  }
+
+  internal val Project.isHermesEnabled: Boolean
+    get() =
+        if (project.hasProperty(HERMES_ENABLED) || project.hasProperty(SCOPED_HERMES_ENABLED)) {
+          val propertyString =
+              if (project.hasProperty(HERMES_ENABLED)) {
+                HERMES_ENABLED
+              } else {
+                SCOPED_HERMES_ENABLED
+              }
+          project
+              .property(propertyString)
+              .toString()
+              .lowercaseCompat()
+              .toBooleanStrictOrNullCompat() ?: true
+        } else if (project.extensions.extraProperties.has("react")) {
+          @Suppress("UNCHECKED_CAST")
+          val reactMap = project.extensions.extraProperties.get("react") as? Map<String, Any?>
+          when (val enableHermesKey = reactMap?.get("enableHermes")) {
+            is Boolean -> enableHermesKey
+            is String -> enableHermesKey.lowercaseCompat().toBooleanStrictOrNullCompat() ?: true
+            else -> HERMES_FALLBACK
+          }
+        } else {
+          HERMES_FALLBACK
+        }
+
+  internal val Project.useThirdPartyJSC: Boolean
+    get() =
+        (project.hasProperty(USE_THIRD_PARTY_JSC) &&
+            project.property(USE_THIRD_PARTY_JSC).toString().toBoolean()) ||
+            (project.hasProperty(SCOPED_USE_THIRD_PARTY_JSC) &&
+                project.property(SCOPED_USE_THIRD_PARTY_JSC).toString().toBoolean())
+
+  internal fun Project.needsCodegenFromPackageJson(rootProperty: DirectoryProperty): Boolean {
+    val parsedPackageJson = readPackageJsonFile(this, rootProperty)
+    return needsCodegenFromPackageJson(parsedPackageJson)
+  }
+
+  internal fun Project.needsCodegenFromPackageJson(model: ModelPackageJson?): Boolean {
+    return model?.codegenConfig != null
+  }
+
+  internal fun Project.getReactNativeArchitectures(): List<String> {
+    val architectures = mutableListOf<String>()
+    if (project.hasProperty(REACT_NATIVE_ARCHITECTURES)) {
+      val architecturesString = project.property(REACT_NATIVE_ARCHITECTURES).toString()
+      architectures.addAll(architecturesString.split(",").filter { it.isNotBlank() })
+    } else if (project.hasProperty(SCOPED_REACT_NATIVE_ARCHITECTURES)) {
+      val architecturesString = project.property(SCOPED_REACT_NATIVE_ARCHITECTURES).toString()
+      architectures.addAll(architecturesString.split(",").filter { it.isNotBlank() })
+    }
+    return architectures
+  }
+
+  internal fun Project.reactNativeDir(extension: ReactExtension): String =
+      extension.reactNativeDir.get().asFile.absolutePath
+
+  internal fun Project.hasPropertySetToFalse(property: String): Boolean =
+      this.hasProperty(property) && this.property(property).toString().toBoolean() == false
+}
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/bin/main/com/facebook/react/utils/PropertyUtils.kt b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/bin/main/com/facebook/react/utils/PropertyUtils.kt
new file mode 100644
index 0000000..e3c0100
--- /dev/null
+++ b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/bin/main/com/facebook/react/utils/PropertyUtils.kt
@@ -0,0 +1,66 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react.utils
+
+/** Collection of all the Gradle Properties that are accepted by React Native Gradle Plugin. */
+object PropertyUtils {
+
+  /** Public property that toggles the New Architecture */
+  const val NEW_ARCH_ENABLED = "newArchEnabled"
+  const val SCOPED_NEW_ARCH_ENABLED = "react.newArchEnabled"
+
+  /** Public property that toggles the New Architecture */
+  const val HERMES_ENABLED = "hermesEnabled"
+  const val SCOPED_HERMES_ENABLED = "react.hermesEnabled"
+
+  /** Public property that excludes jsctooling from core */
+  const val USE_THIRD_PARTY_JSC = "useThirdPartyJSC"
+  const val SCOPED_USE_THIRD_PARTY_JSC = "react.useThirdPartyJSC"
+
+  /** Public property that allows to control which architectures to build for React Native. */
+  const val REACT_NATIVE_ARCHITECTURES = "reactNativeArchitectures"
+  const val SCOPED_REACT_NATIVE_ARCHITECTURES = "react.nativeArchitectures"
+
+  /** Public property that allows to control whether the JitPack repository is included or not */
+  const val INCLUDE_JITPACK_REPOSITORY = "includeJitpackRepository"
+  const val SCOPED_INCLUDE_JITPACK_REPOSITORY = "react.includeJitpackRepository"
+
+  /** By default we include JitPack to avoid breaking user builds */
+  internal const val INCLUDE_JITPACK_REPOSITORY_DEFAULT = true
+
+  /**
+   * Internal Property that acts as a killswitch to configure the JDK version and align it for app
+   * and all the libraries.
+   */
+  const val INTERNAL_DISABLE_JAVA_VERSION_ALIGNMENT = "react.internal.disableJavaVersionAlignment"
+
+  /**
+   * Internal Property that allows to specify a local Maven repository to use for React Native
+   * artifacts It's used on CI to test templates against a version of React Native built on the fly.
+   */
+  const val INTERNAL_REACT_NATIVE_MAVEN_LOCAL_REPO = "react.internal.mavenLocalRepo"
+
+  /**
+   * Internal property used to specify where the Windows Bash executable is located. This is useful
+   * for contributors who are running Windows on their machine.
+   */
+  const val INTERNAL_REACT_WINDOWS_BASH = "react.internal.windowsBashPath"
+
+  /**
+   * Internal property to force the build to use Hermes from the latest nightly. This speeds up the
+   * build at the cost of not testing the latest integration against Hermes.
+   */
+  const val INTERNAL_USE_HERMES_NIGHTLY = "react.internal.useHermesNightly"
+
+  /** Internal property used to override the publishing group for the React Native artifacts. */
+  const val INTERNAL_PUBLISHING_GROUP = "react.internal.publishingGroup"
+  const val DEFAULT_INTERNAL_PUBLISHING_GROUP = "com.facebook.react"
+
+  /** Internal property used to control the version name of React Native */
+  const val INTERNAL_VERSION_NAME = "VERSION_NAME"
+}
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/bin/test/com/facebook/react/ReactExtensionTest.kt b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/bin/test/com/facebook/react/ReactExtensionTest.kt
new file mode 100644
index 0000000..c2db6e1
--- /dev/null
+++ b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/bin/test/com/facebook/react/ReactExtensionTest.kt
@@ -0,0 +1,232 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react
+
+import com.facebook.react.ReactExtension.Companion.getGradleDependenciesToApply
+import org.assertj.core.api.Assertions.assertThat
+import org.intellij.lang.annotations.Language
+import org.junit.Rule
+import org.junit.Test
+import org.junit.rules.TemporaryFolder
+
+class ReactExtensionTest {
+
+  @get:Rule val tempFolder = TemporaryFolder()
+
+  @Test
+  fun getGradleDependenciesToApply_withEmptyFile_returnsEmptyMap() {
+    val validJsonFile =
+        createJsonFile(
+            """
+      {
+        "reactNativeVersion": "1000.0.0"
+      }
+      """
+                .trimIndent())
+
+    val deps = getGradleDependenciesToApply(validJsonFile)
+    assertThat(deps).isEmpty()
+  }
+
+  @Test
+  fun getGradleDependenciesToApply_withOneDependency_returnsValidDep() {
+    val validJsonFile =
+        createJsonFile(
+            """
+      {
+        "reactNativeVersion": "1000.0.0",
+        "dependencies": {
+          "@react-native/oss-library-example": {
+            "root": "./node_modules/@react-native/oss-library-example",
+            "name": "@react-native/oss-library-example",
+            "platforms": {
+              "android": {
+                "sourceDir": "src/main/java",
+                "packageImportPath": "com.facebook.react"
+              }
+            }
+          }
+        }
+      }
+      """
+                .trimIndent())
+
+    val deps = getGradleDependenciesToApply(validJsonFile)
+    assertThat(deps).containsExactly("implementation" to ":react-native_oss-library-example")
+  }
+
+  @Test
+  fun getGradleDependenciesToApply_withDependencyConfiguration_returnsValidConfiguration() {
+    val validJsonFile =
+        createJsonFile(
+            """
+      {
+        "reactNativeVersion": "1000.0.0",
+        "dependencies": {
+          "@react-native/oss-library-example": {
+            "root": "./node_modules/@react-native/oss-library-example",
+            "name": "@react-native/oss-library-example",
+            "platforms": {
+              "android": {
+                "sourceDir": "src/main/java",
+                "packageImportPath": "com.facebook.react",
+                "dependencyConfiguration": "compileOnly"
+              }
+            }
+          }
+        }
+      }
+      """
+                .trimIndent())
+
+    val deps = getGradleDependenciesToApply(validJsonFile)
+    assertThat(deps).containsExactly("compileOnly" to ":react-native_oss-library-example")
+  }
+
+  @Test
+  fun getGradleDependenciesToApply_withBuildTypes_returnsValidConfiguration() {
+    val validJsonFile =
+        createJsonFile(
+            """
+      {
+        "reactNativeVersion": "1000.0.0",
+        "dependencies": {
+          "@react-native/oss-library-example": {
+            "root": "./node_modules/@react-native/oss-library-example",
+            "name": "@react-native/oss-library-example",
+            "platforms": {
+              "android": {
+                "sourceDir": "src/main/java",
+                "packageImportPath": "com.facebook.react",
+                "buildTypes": ["debug", "release"]
+              }
+            }
+          }
+        }
+      }
+      """
+                .trimIndent())
+
+    val deps = getGradleDependenciesToApply(validJsonFile)
+    assertThat(deps)
+        .containsExactly(
+            "debugImplementation" to ":react-native_oss-library-example",
+            "releaseImplementation" to ":react-native_oss-library-example")
+  }
+
+  @Test
+  fun getGradleDependenciesToApply_withMultipleDependencies_returnsValidConfiguration() {
+    val validJsonFile =
+        createJsonFile(
+            """
+      {
+        "reactNativeVersion": "1000.0.0",
+        "dependencies": {
+          "@react-native/oss-library-example": {
+            "root": "./node_modules/@react-native/oss-library-example",
+            "name": "@react-native/oss-library-example",
+            "platforms": {
+              "android": {
+                "sourceDir": "src/main/java",
+                "packageImportPath": "com.facebook.react"
+              }
+            }
+          },
+          "@react-native/another-library-for-testing": {
+            "root": "./node_modules/@react-native/another-library-for-testing",
+            "name": "@react-native/another-library-for-testing",
+            "platforms": {
+              "android": {
+                "sourceDir": "src/main/java",
+                "packageImportPath": "com.facebook.react"
+              }
+            }
+          }
+        }
+      }
+      """
+                .trimIndent())
+
+    val deps = getGradleDependenciesToApply(validJsonFile)
+    assertThat(deps)
+        .containsExactly(
+            "implementation" to ":react-native_oss-library-example",
+            "implementation" to ":react-native_another-library-for-testing")
+  }
+
+  @Test
+  fun getGradleDependenciesToApply_withiOSOnlyLibrary_returnsEmptyDepsMap() {
+    val validJsonFile =
+        createJsonFile(
+            """
+      {
+        "reactNativeVersion": "1000.0.0",
+        "dependencies": {
+          "@react-native/oss-library-example": {
+            "root": "./node_modules/@react-native/oss-library-example",
+            "name": "@react-native/oss-library-example",
+            "platforms": {
+              "ios": {
+                "podspecPath": "./node_modules/@react-native/oss-library-example/oss-library-example.podspec",
+                "version": "0.0.0",
+                "configurations": [],
+                "scriptPhases": []
+              },
+              "android": null
+            }
+          }
+        }
+      }
+      """
+                .trimIndent())
+
+    val deps = getGradleDependenciesToApply(validJsonFile)
+    assertThat(deps).isEmpty()
+  }
+
+  @Test
+  fun getGradleDependenciesToApply_withIsPureCxxDeps_filtersCorrectly() {
+    val validJsonFile =
+        createJsonFile(
+            """
+      {
+        "reactNativeVersion": "1000.0.0",
+        "dependencies": {
+          "@react-native/oss-library-example": {
+            "root": "./node_modules/@react-native/android-example",
+            "name": "@react-native/android-example",
+            "platforms": {
+              "android": {
+                "sourceDir": "src/main/java",
+                "packageImportPath": "com.facebook.react"
+              }
+            }
+          },
+          "@react-native/another-library-for-testing": {
+            "root": "./node_modules/@react-native/cxx-testing",
+            "name": "@react-native/cxx-testing",
+            "platforms": {
+              "android": {
+                "sourceDir": "src/main/java",
+                "packageImportPath": "com.facebook.react",
+                "isPureCxxDependency": true
+              }
+            }
+          }
+        }
+      }
+      """
+                .trimIndent())
+
+    val deps = getGradleDependenciesToApply(validJsonFile)
+    assertThat(deps).containsExactly("implementation" to ":react-native_android-example")
+  }
+
+  private fun createJsonFile(@Language("JSON") input: String) =
+      tempFolder.newFile().apply { writeText(input) }
+}
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/bin/test/com/facebook/react/TestReactExtension.kt b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/bin/test/com/facebook/react/TestReactExtension.kt
new file mode 100644
index 0000000..afc9ff3
--- /dev/null
+++ b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/bin/test/com/facebook/react/TestReactExtension.kt
@@ -0,0 +1,12 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react
+
+import org.gradle.api.Project
+
+class TestReactExtension(project: Project) : ReactExtension(project)
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/bin/test/com/facebook/react/model/ModelAutolinkingDependenciesJsonTest.kt b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/bin/test/com/facebook/react/model/ModelAutolinkingDependenciesJsonTest.kt
new file mode 100644
index 0000000..4ade029
--- /dev/null
+++ b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/bin/test/com/facebook/react/model/ModelAutolinkingDependenciesJsonTest.kt
@@ -0,0 +1,44 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react.model
+
+import org.assertj.core.api.Assertions.assertThat
+import org.junit.Test
+
+class ModelAutolinkingDependenciesJsonTest {
+
+  @Test
+  fun nameCleansed_withoutScope() {
+    assertThat(ModelAutolinkingDependenciesJson("", "name", null).nameCleansed).isEqualTo("name")
+    assertThat(ModelAutolinkingDependenciesJson("", "react~native", null).nameCleansed)
+        .isEqualTo("react_native")
+    assertThat(ModelAutolinkingDependenciesJson("", "react*native", null).nameCleansed)
+        .isEqualTo("react_native")
+    assertThat(ModelAutolinkingDependenciesJson("", "react!native", null).nameCleansed)
+        .isEqualTo("react_native")
+    assertThat(ModelAutolinkingDependenciesJson("", "react'native", null).nameCleansed)
+        .isEqualTo("react_native")
+    assertThat(ModelAutolinkingDependenciesJson("", "react(native", null).nameCleansed)
+        .isEqualTo("react_native")
+    assertThat(ModelAutolinkingDependenciesJson("", "react)native", null).nameCleansed)
+        .isEqualTo("react_native")
+    assertThat(ModelAutolinkingDependenciesJson("", "react~*!'()native", null).nameCleansed)
+        .isEqualTo("react_native")
+  }
+
+  @Test
+  fun nameCleansed_withScope() {
+    assertThat(ModelAutolinkingDependenciesJson("", "@react-native/package", null).nameCleansed)
+        .isEqualTo("react-native_package")
+    assertThat(
+            ModelAutolinkingDependenciesJson(
+                    "", "@this*is~a(more)complicated/example!of~weird)packages", null)
+                .nameCleansed)
+        .isEqualTo("this_is_a_more_complicated_example_of_weird_packages")
+  }
+}
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/bin/test/com/facebook/react/tasks/BundleHermesCTaskTest.kt b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/bin/test/com/facebook/react/tasks/BundleHermesCTaskTest.kt
new file mode 100644
index 0000000..898e8c4
--- /dev/null
+++ b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/bin/test/com/facebook/react/tasks/BundleHermesCTaskTest.kt
@@ -0,0 +1,433 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react.tasks
+
+import com.facebook.react.tests.OS
+import com.facebook.react.tests.OsRule
+import com.facebook.react.tests.WithOs
+import com.facebook.react.tests.createTestTask
+import java.io.File
+import org.assertj.core.api.Assertions.assertThat
+import org.junit.Rule
+import org.junit.Test
+import org.junit.rules.TemporaryFolder
+
+class BundleHermesCTaskTest {
+
+  @get:Rule val tempFolder = TemporaryFolder()
+
+  @get:Rule val osRule = OsRule()
+
+  @Test
+  fun bundleTask_groupIsSetCorrectly() {
+    val task = createTestTask<BundleHermesCTask> {}
+    assertThat(task.group).isEqualTo("react")
+  }
+
+  @Test
+  fun bundleTask_inputFiles_areSetCorrectly() {
+    val rootDir =
+        tempFolder.newFolder("js").apply {
+          File(this, "file.js").createNewFile()
+          File(this, "file.jsx").createNewFile()
+          File(this, "file.ts").createNewFile()
+          File(this, "file.tsx").createNewFile()
+        }
+
+    val task = createTestTask<BundleHermesCTask> { it.root.set(rootDir) }
+
+    assertThat(task.sources.files.size).isEqualTo(4)
+    assertThat(task.sources.files)
+        .containsExactlyInAnyOrder(
+            File(rootDir, "file.js"),
+            File(rootDir, "file.jsx"),
+            File(rootDir, "file.ts"),
+            File(rootDir, "file.tsx"))
+  }
+
+  @Test
+  fun bundleTask_inputFilesInExcludedPath_areExcluded() {
+    fun File.createFileAndPath() {
+      parentFile.mkdirs()
+      createNewFile()
+    }
+
+    val rootDir =
+        tempFolder.newFolder("js").apply {
+          File(this, "afolder/includedfile.js").createFileAndPath()
+          // Those files should be excluded due to their filepath
+          File(this, "android/excludedfile.js").createFileAndPath()
+          File(this, "ios/excludedfile.js").createFileAndPath()
+          File(this, "build/excludedfile.js").createFileAndPath()
+          File(this, "node_modules/react-native/excludedfile.js").createFileAndPath()
+        }
+
+    val task = createTestTask<BundleHermesCTask> { it.root.set(rootDir) }
+
+    assertThat(task.sources.excludes)
+        .containsExactlyInAnyOrder(
+            "**/android/**/*", "**/ios/**/*", "**/build/**/*", "**/node_modules/**/*")
+    assertThat(task.sources.files.size).isEqualTo(1)
+    assertThat(task.sources.files).containsExactly(File(rootDir, "afolder/includedfile.js"))
+  }
+
+  @Test
+  fun bundleTask_staticInputs_areSetCorrectly() {
+    val task =
+        createTestTask<BundleHermesCTask> {
+          it.nodeExecutableAndArgs.set(listOf("node", "arg1", "arg2"))
+          it.bundleCommand.set("bundle")
+          it.bundleAssetName.set("myassetname")
+          it.minifyEnabled.set(true)
+          it.hermesEnabled.set(true)
+          it.devEnabled.set(true)
+          it.extraPackagerArgs.set(listOf("extra", "arg"))
+          it.hermesCommand.set("./my-hermesc")
+          it.hermesFlags.set(listOf("flag1", "flag2"))
+        }
+
+    assertThat(task.nodeExecutableAndArgs.get()).isEqualTo(listOf("node", "arg1", "arg2"))
+    assertThat(task.bundleCommand.get()).isEqualTo("bundle")
+    assertThat(task.bundleAssetName.get()).isEqualTo("myassetname")
+    assertThat(task.minifyEnabled.get()).isTrue()
+    assertThat(task.hermesEnabled.get()).isTrue()
+    assertThat(task.devEnabled.get()).isTrue()
+    assertThat(task.extraPackagerArgs.get()).isEqualTo(listOf("extra", "arg"))
+    assertThat(task.hermesCommand.get()).isEqualTo("./my-hermesc")
+    assertThat(task.hermesFlags.get()).isEqualTo(listOf("flag1", "flag2"))
+  }
+
+  @Test
+  fun bundleTask_filesInput_areSetCorrectly() {
+    val entryFile = tempFolder.newFile("entry.js")
+    val cliFile = tempFolder.newFile("cli.js")
+    val jsBundleDir = tempFolder.newFolder("jsbundle")
+    val resourcesDir = tempFolder.newFolder("resources")
+    val jsIntermediateSourceMapsDir = tempFolder.newFolder("jsIntermediateSourceMaps")
+    val jsSourceMapsDir = tempFolder.newFolder("jsSourceMaps")
+    val bundleConfig = tempFolder.newFile("bundle.config")
+    val reactNativeDir = tempFolder.newFolder("node_modules/react-native")
+
+    val task =
+        createTestTask<BundleHermesCTask> {
+          it.entryFile.set(entryFile)
+          it.cliFile.set(cliFile)
+          it.jsBundleDir.set(jsBundleDir)
+          it.resourcesDir.set(resourcesDir)
+          it.jsIntermediateSourceMapsDir.set(jsIntermediateSourceMapsDir)
+          it.jsSourceMapsDir.set(jsSourceMapsDir)
+          it.bundleConfig.set(bundleConfig)
+          it.reactNativeDir.set(reactNativeDir)
+        }
+
+    assertThat(task.entryFile.get().asFile).isEqualTo(entryFile)
+    assertThat(task.cliFile.get().asFile).isEqualTo(cliFile)
+    assertThat(task.jsBundleDir.get().asFile).isEqualTo(jsBundleDir)
+    assertThat(task.resourcesDir.get().asFile).isEqualTo(resourcesDir)
+    assertThat(task.jsIntermediateSourceMapsDir.get().asFile).isEqualTo(jsIntermediateSourceMapsDir)
+    assertThat(task.jsSourceMapsDir.get().asFile).isEqualTo(jsSourceMapsDir)
+    assertThat(task.bundleConfig.get().asFile).isEqualTo(bundleConfig)
+    assertThat(task.reactNativeDir.get().asFile).isEqualTo(reactNativeDir)
+  }
+
+  @Test
+  fun resolvePackagerSourceMapFile_withHermesEnabled_returnsCorrectFile() {
+    val jsIntermediateSourceMapsDir = tempFolder.newFolder("jsIntermediateSourceMaps")
+    val bundleAssetName = "myassetname"
+    val task =
+        createTestTask<BundleHermesCTask> {
+          it.jsIntermediateSourceMapsDir.set(jsIntermediateSourceMapsDir)
+          it.hermesEnabled.set(true)
+          it.bundleAssetName.set(bundleAssetName)
+        }
+
+    assertThat(task.resolvePackagerSourceMapFile(bundleAssetName))
+        .isEqualTo(File(jsIntermediateSourceMapsDir, "myassetname.packager.map"))
+  }
+
+  @Test
+  fun resolvePackagerSourceMapFile_withHermesDisabled_returnsCorrectFile() {
+    val jsSourceMapsDir = tempFolder.newFolder("jsSourceMaps")
+    val bundleAssetName = "myassetname"
+    val task =
+        createTestTask<BundleHermesCTask> {
+          it.jsSourceMapsDir.set(jsSourceMapsDir)
+          it.hermesEnabled.set(false)
+        }
+
+    assertThat(task.resolvePackagerSourceMapFile(bundleAssetName))
+        .isEqualTo(File(jsSourceMapsDir, "myassetname.map"))
+  }
+
+  @Test
+  fun resolveOutputSourceMap_returnsCorrectFile() {
+    val jsSourceMapsDir = tempFolder.newFolder("jsSourceMaps")
+    val bundleAssetName = "myassetname"
+    val task = createTestTask<BundleHermesCTask> { it.jsSourceMapsDir.set(jsSourceMapsDir) }
+
+    assertThat(task.resolveOutputSourceMap(bundleAssetName))
+        .isEqualTo(File(jsSourceMapsDir, "myassetname.map"))
+  }
+
+  @Test
+  fun resolveCompilerSourceMap_returnsCorrectFile() {
+    val jsIntermediateSourceMapsDir = tempFolder.newFolder("jsIntermediateSourceMaps")
+    val bundleAssetName = "myassetname"
+    val task =
+        createTestTask<BundleHermesCTask> {
+          it.jsIntermediateSourceMapsDir.set(jsIntermediateSourceMapsDir)
+        }
+
+    assertThat(task.resolveCompilerSourceMap(bundleAssetName))
+        .isEqualTo(File(jsIntermediateSourceMapsDir, "myassetname.compiler.map"))
+  }
+
+  @Test
+  fun getBundleCommand_returnsCorrectCommand() {
+    val entryFile = tempFolder.newFile("index.js")
+    val cliFile = tempFolder.newFile("cli.js")
+    val bundleFile = tempFolder.newFile("bundle.js")
+    val sourceMapFile = tempFolder.newFile("bundle.js.map")
+    val resourcesDir = tempFolder.newFolder("res")
+    val bundleConfig = tempFolder.newFile("bundle.config")
+    val task =
+        createTestTask<BundleHermesCTask> {
+          it.nodeExecutableAndArgs.set(listOf("node", "arg1", "arg2"))
+          it.root.set(tempFolder.root)
+          it.cliFile.set(cliFile)
+          it.bundleCommand.set("bundle")
+          it.devEnabled.set(true)
+          it.entryFile.set(entryFile)
+          it.resourcesDir.set(resourcesDir)
+          it.bundleConfig.set(bundleConfig)
+          it.minifyEnabled.set(true)
+          it.extraPackagerArgs.set(listOf("--read-global-cache"))
+        }
+
+    val bundleCommand = task.getBundleCommand(bundleFile, sourceMapFile)
+
+    assertThat(bundleCommand)
+        .containsExactly(
+            "node",
+            "arg1",
+            "arg2",
+            cliFile.absolutePath,
+            "bundle",
+            "--platform",
+            "android",
+            "--dev",
+            "true",
+            "--reset-cache",
+            "--entry-file",
+            entryFile.absolutePath,
+            "--bundle-output",
+            bundleFile.absolutePath,
+            "--assets-dest",
+            resourcesDir.absolutePath,
+            "--sourcemap-output",
+            sourceMapFile.absolutePath,
+            "--config",
+            bundleConfig.absolutePath,
+            "--minify",
+            "true",
+            "--read-global-cache",
+            "--verbose")
+  }
+
+  @Test
+  @WithOs(OS.WIN)
+  fun getBundleCommand_onWindows_returnsWinValidCommandsPaths() {
+    val entryFile = tempFolder.newFile("index.js")
+    val cliFile = tempFolder.newFile("cli.js")
+    val bundleFile = tempFolder.newFile("bundle.js")
+    val sourceMapFile = tempFolder.newFile("bundle.js.map")
+    val resourcesDir = tempFolder.newFolder("res")
+    val bundleConfig = tempFolder.newFile("bundle.config")
+    val task =
+        createTestTask<BundleHermesCTask> {
+          it.nodeExecutableAndArgs.set(listOf("node", "arg1", "arg2"))
+          it.root.set(tempFolder.root)
+          it.cliFile.set(cliFile)
+          it.bundleCommand.set("bundle")
+          it.devEnabled.set(true)
+          it.entryFile.set(entryFile)
+          it.resourcesDir.set(resourcesDir)
+          it.bundleConfig.set(bundleConfig)
+          it.minifyEnabled.set(true)
+          it.extraPackagerArgs.set(listOf("--read-global-cache"))
+        }
+
+    val bundleCommand = task.getBundleCommand(bundleFile, sourceMapFile)
+
+    assertThat(bundleCommand)
+        .containsExactly(
+            "cmd",
+            "/c",
+            "node",
+            "arg1",
+            "arg2",
+            cliFile.relativeTo(tempFolder.root).path,
+            "bundle",
+            "--platform",
+            "android",
+            "--dev",
+            "true",
+            "--reset-cache",
+            "--entry-file",
+            entryFile.relativeTo(tempFolder.root).path,
+            "--bundle-output",
+            bundleFile.relativeTo(tempFolder.root).path,
+            "--assets-dest",
+            resourcesDir.relativeTo(tempFolder.root).path,
+            "--sourcemap-output",
+            sourceMapFile.relativeTo(tempFolder.root).path,
+            "--config",
+            bundleConfig.relativeTo(tempFolder.root).path,
+            "--minify",
+            "true",
+            "--read-global-cache",
+            "--verbose")
+  }
+
+  @Test
+  fun getBundleCommand_withoutConfig_returnsCommandWithoutConfig() {
+    val entryFile = tempFolder.newFile("index.js")
+    val cliFile = tempFolder.newFile("cli.js")
+    val bundleFile = tempFolder.newFile("bundle.js")
+    val sourceMapFile = tempFolder.newFile("bundle.js.map")
+    val resourcesDir = tempFolder.newFolder("res")
+    val task =
+        createTestTask<BundleHermesCTask> {
+          it.nodeExecutableAndArgs.set(listOf("node", "arg1", "arg2"))
+          it.root.set(tempFolder.root)
+          it.cliFile.set(cliFile)
+          it.bundleCommand.set("bundle")
+          it.devEnabled.set(true)
+          it.entryFile.set(entryFile)
+          it.resourcesDir.set(resourcesDir)
+          it.minifyEnabled.set(true)
+          it.extraPackagerArgs.set(listOf("--read-global-cache"))
+        }
+
+    val bundleCommand = task.getBundleCommand(bundleFile, sourceMapFile)
+
+    assertThat(bundleCommand).doesNotContain("--config")
+  }
+
+  @Test
+  fun getHermescCommand_returnsCorrectCommand() {
+    val customHermesc = "hermesc"
+    val bytecodeFile = tempFolder.newFile("bundle.js.hbc")
+    val bundleFile = tempFolder.newFile("bundle.js")
+    val task =
+        createTestTask<BundleHermesCTask> {
+          it.root.set(tempFolder.root)
+          it.hermesFlags.set(listOf("my-custom-hermes-flag"))
+        }
+
+    val hermesCommand = task.getHermescCommand(customHermesc, bytecodeFile, bundleFile)
+
+    assertThat(hermesCommand)
+        .containsExactly(
+            customHermesc,
+            "-w",
+            "-emit-binary",
+            "-max-diagnostic-width=80",
+            "-out",
+            bytecodeFile.absolutePath,
+            bundleFile.absolutePath,
+            "my-custom-hermes-flag")
+  }
+
+  @Test
+  @WithOs(OS.WIN)
+  fun getHermescCommand_onWindows_returnsRelativePaths() {
+    val customHermesc = "hermesc"
+    val bytecodeFile = tempFolder.newFile("bundle.js.hbc")
+    val bundleFile = tempFolder.newFile("bundle.js")
+    val task =
+        createTestTask<BundleHermesCTask> {
+          it.root.set(tempFolder.root)
+          it.hermesFlags.set(listOf("my-custom-hermes-flag"))
+        }
+
+    val hermesCommand = task.getHermescCommand(customHermesc, bytecodeFile, bundleFile)
+
+    assertThat(hermesCommand)
+        .containsExactly(
+            "cmd",
+            "/c",
+            customHermesc,
+            "-w",
+            "-emit-binary",
+            "-max-diagnostic-width=80",
+            "-out",
+            bytecodeFile.relativeTo(tempFolder.root).path,
+            bundleFile.relativeTo(tempFolder.root).path,
+            "my-custom-hermes-flag")
+  }
+
+  @Test
+  fun getComposeSourceMapsCommand_returnsCorrectCommand() {
+    val packagerMap = tempFolder.newFile("bundle.js.packager.map")
+    val compilerMap = tempFolder.newFile("bundle.js.compiler.map")
+    val outputMap = tempFolder.newFile("bundle.js.map")
+    val reactNativeDir = tempFolder.newFolder("node_modules/react-native")
+    val composeSourceMapsFile = File(reactNativeDir, "scripts/compose-source-maps.js")
+    val task =
+        createTestTask<BundleHermesCTask> {
+          it.root.set(tempFolder.root)
+          it.nodeExecutableAndArgs.set(listOf("node", "arg1", "arg2"))
+        }
+
+    val composeSourcemapCommand =
+        task.getComposeSourceMapsCommand(composeSourceMapsFile, packagerMap, compilerMap, outputMap)
+
+    assertThat(composeSourcemapCommand)
+        .containsExactly(
+            "node",
+            "arg1",
+            "arg2",
+            composeSourceMapsFile.absolutePath,
+            packagerMap.absolutePath,
+            compilerMap.absolutePath,
+            "-o",
+            outputMap.absolutePath)
+  }
+
+  @Test
+  @WithOs(OS.WIN)
+  fun getComposeSourceMapsCommand_onWindows_returnsRelativePaths() {
+    val packagerMap = tempFolder.newFile("bundle.js.packager.map")
+    val compilerMap = tempFolder.newFile("bundle.js.compiler.map")
+    val outputMap = tempFolder.newFile("bundle.js.map")
+    val reactNativeDir = tempFolder.newFolder("node_modules/react-native")
+    val composeSourceMapsFile = File(reactNativeDir, "scripts/compose-source-maps.js")
+    val task =
+        createTestTask<BundleHermesCTask> {
+          it.root.set(tempFolder.root)
+          it.nodeExecutableAndArgs.set(listOf("node", "arg1", "arg2"))
+        }
+
+    val composeSourcemapCommand =
+        task.getComposeSourceMapsCommand(composeSourceMapsFile, packagerMap, compilerMap, outputMap)
+
+    assertThat(composeSourcemapCommand)
+        .containsExactly(
+            "cmd",
+            "/c",
+            "node",
+            "arg1",
+            "arg2",
+            composeSourceMapsFile.relativeTo(tempFolder.root).path,
+            packagerMap.relativeTo(tempFolder.root).path,
+            compilerMap.relativeTo(tempFolder.root).path,
+            "-o",
+            outputMap.relativeTo(tempFolder.root).path)
+  }
+}
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/bin/test/com/facebook/react/tasks/GenerateAutolinkingNewArchitecturesFileTaskTest.kt b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/bin/test/com/facebook/react/tasks/GenerateAutolinkingNewArchitecturesFileTaskTest.kt
new file mode 100644
index 0000000..b8d14bf
--- /dev/null
+++ b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/bin/test/com/facebook/react/tasks/GenerateAutolinkingNewArchitecturesFileTaskTest.kt
@@ -0,0 +1,303 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react.tasks
+
+import com.facebook.react.model.ModelAutolinkingConfigJson
+import com.facebook.react.model.ModelAutolinkingDependenciesJson
+import com.facebook.react.model.ModelAutolinkingDependenciesPlatformAndroidJson
+import com.facebook.react.model.ModelAutolinkingDependenciesPlatformJson
+import com.facebook.react.tasks.GenerateAutolinkingNewArchitecturesFileTask.Companion.sanitizeCmakeListsPath
+import com.facebook.react.tests.createTestTask
+import org.assertj.core.api.Assertions.assertThat
+import org.junit.Rule
+import org.junit.Test
+import org.junit.rules.TemporaryFolder
+
+class GenerateAutolinkingNewArchitecturesFileTaskTest {
+
+  @get:Rule val tempFolder = TemporaryFolder()
+
+  @Test
+  fun generatePackageListTask_groupIsSetCorrectly() {
+    val task = createTestTask<GenerateAutolinkingNewArchitecturesFileTask> {}
+    assertThat(task.group).isEqualTo("react")
+  }
+
+  @Test
+  fun generatePackageListTask_staticInputs_areSetCorrectly() {
+    val outputFolder = tempFolder.newFolder("build")
+    val inputFile = tempFolder.newFile("config.json")
+
+    val task =
+        createTestTask<GenerateAutolinkingNewArchitecturesFileTask> {
+          it.generatedOutputDirectory.set(outputFolder)
+          it.autolinkInputFile.set(inputFile)
+        }
+
+    assertThat(task.generatedOutputDirectory.get().asFile).isEqualTo(outputFolder)
+    assertThat(task.generatedOutputDirectory.get().asFile).isEqualTo(outputFolder)
+  }
+
+  @Test
+  fun filterAndroidPackages_withNull_returnsEmpty() {
+    val task = createTestTask<GenerateAutolinkingNewArchitecturesFileTask>()
+    val result = task.filterAndroidPackages(null)
+    assertThat(result).isEmpty()
+  }
+
+  @Test
+  fun filterAndroidPackages_withEmptyObject_returnsEmpty() {
+    val task = createTestTask<GenerateAutolinkingNewArchitecturesFileTask>()
+    val result = task.filterAndroidPackages(ModelAutolinkingConfigJson("1000.0.0", null, null))
+    assertThat(result).isEmpty()
+  }
+
+  @Test
+  fun filterAndroidPackages_withNoAndroidObject_returnsEmpty() {
+    val task = createTestTask<GenerateAutolinkingNewArchitecturesFileTask>()
+    val result =
+        task.filterAndroidPackages(
+            ModelAutolinkingConfigJson(
+                reactNativeVersion = "1000.0.0",
+                dependencies =
+                    mapOf(
+                        "a-dependency" to
+                            ModelAutolinkingDependenciesJson(
+                                root = "./a/directory",
+                                name = "a-dependency",
+                                platforms =
+                                    ModelAutolinkingDependenciesPlatformJson(android = null))),
+                project = null))
+    assertThat(result).isEmpty()
+  }
+
+  @Test
+  fun filterAndroidPackages_withValidAndroidObject_returnsIt() {
+    val task = createTestTask<GenerateAutolinkingNewArchitecturesFileTask>()
+    val android =
+        ModelAutolinkingDependenciesPlatformAndroidJson(
+            sourceDir = "./a/directory/android",
+            packageImportPath = "import com.facebook.react.aPackage;",
+            packageInstance = "new APackage()",
+            buildTypes = emptyList(),
+        )
+
+    val result =
+        task.filterAndroidPackages(
+            ModelAutolinkingConfigJson(
+                reactNativeVersion = "1000.0.0",
+                dependencies =
+                    mapOf(
+                        "a-dependency" to
+                            ModelAutolinkingDependenciesJson(
+                                root = "./a/directory",
+                                name = "a-dependency",
+                                platforms =
+                                    ModelAutolinkingDependenciesPlatformJson(android = android))),
+                project = null))
+    assertThat(result).containsExactly(android)
+  }
+
+  @Test
+  fun generateCmakeFileContent_withNoPackages_returnsEmpty() {
+    val output =
+        createTestTask<GenerateAutolinkingNewArchitecturesFileTask>()
+            .generateCmakeFileContent(emptyList())
+    // language=cmake
+    assertThat(output)
+        .isEqualTo(
+            """
+      # This code was generated by [React Native](https://www.npmjs.com/package/@react-native/gradle-plugin)
+      cmake_minimum_required(VERSION 3.13)
+      set(CMAKE_VERBOSE_MAKEFILE on)
+      
+      # We set REACTNATIVE_MERGED_SO so libraries/apps can selectively decide to depend on either libreactnative.so
+      # or link against a old prefab target (this is needed for React Native 0.76 on).
+      set(REACTNATIVE_MERGED_SO true)
+      
+      
+      
+      set(AUTOLINKED_LIBRARIES
+        
+      )
+    """
+                .trimIndent())
+  }
+
+  @Test
+  fun generateCmakeFileContent_withPackages_returnsImportCorrectly() {
+    val output =
+        createTestTask<GenerateAutolinkingNewArchitecturesFileTask>()
+            .generateCmakeFileContent(testDependencies)
+    // language=cmake
+    assertThat(output)
+        .isEqualTo(
+            """
+      # This code was generated by [React Native](https://www.npmjs.com/package/@react-native/gradle-plugin)
+      cmake_minimum_required(VERSION 3.13)
+      set(CMAKE_VERBOSE_MAKEFILE on)
+      
+      # We set REACTNATIVE_MERGED_SO so libraries/apps can selectively decide to depend on either libreactnative.so
+      # or link against a old prefab target (this is needed for React Native 0.76 on).
+      set(REACTNATIVE_MERGED_SO true)
+      
+      add_subdirectory("./a/directory/" aPackage_autolinked_build)
+      add_subdirectory("./another/directory/with\ spaces/" anotherPackage_autolinked_build)
+      add_subdirectory("./another/directory/cxx/" anotherPackage_cxxmodule_autolinked_build)
+      
+      set(AUTOLINKED_LIBRARIES
+        react_codegen_aPackage
+        react_codegen_anotherPackage
+      another_cxxModule
+      )
+    """
+                .trimIndent())
+  }
+
+  @Test
+  fun generateCppFileContent_withNoPackages_returnsEmpty() {
+    val output =
+        createTestTask<GenerateAutolinkingNewArchitecturesFileTask>()
+            .generateCppFileContent(emptyList())
+    // language=cpp
+    assertThat(output)
+        .isEqualTo(
+            """
+      /**
+       * This code was generated by [React Native](https://www.npmjs.com/package/@react-native/gradle-plugin).
+       *
+       * Do not edit this file as changes may cause incorrect behavior and will be lost
+       * once the code is regenerated.
+       *
+       */
+
+      #include "autolinking.h"
+
+
+      namespace facebook {
+      namespace react {
+
+      std::shared_ptr<TurboModule> autolinking_ModuleProvider(const std::string moduleName, const JavaTurboModule::InitParams &params) {
+
+        return nullptr;
+      }
+
+      std::shared_ptr<TurboModule> autolinking_cxxModuleProvider(const std::string moduleName, const std::shared_ptr<CallInvoker>& jsInvoker) {
+
+        return nullptr;
+      }
+
+      void autolinking_registerProviders(std::shared_ptr<ComponentDescriptorProviderRegistry const> providerRegistry) {
+
+        return;
+      }
+
+      } // namespace react
+      } // namespace facebook
+    """
+                .trimIndent())
+  }
+
+  @Test
+  fun generateCppFileContent_withPackages_returnsImportCorrectly() {
+    val output =
+        createTestTask<GenerateAutolinkingNewArchitecturesFileTask>()
+            .generateCppFileContent(testDependencies)
+    // language=cpp
+    assertThat(output)
+        .isEqualTo(
+            """
+      /**
+       * This code was generated by [React Native](https://www.npmjs.com/package/@react-native/gradle-plugin).
+       *
+       * Do not edit this file as changes may cause incorrect behavior and will be lost
+       * once the code is regenerated.
+       *
+       */
+
+      #include "autolinking.h"
+      #include <aPackage.h>
+      #include <anotherPackage.h>
+      #include <react/renderer/components/anotherPackage/ComponentDescriptors.h>
+      #include <AnotherCxxModule.h>
+
+      namespace facebook {
+      namespace react {
+
+      std::shared_ptr<TurboModule> autolinking_ModuleProvider(const std::string moduleName, const JavaTurboModule::InitParams &params) {
+      auto module_aPackage = aPackage_ModuleProvider(moduleName, params);
+      if (module_aPackage != nullptr) {
+      return module_aPackage;
+      }
+      auto module_anotherPackage = anotherPackage_ModuleProvider(moduleName, params);
+      if (module_anotherPackage != nullptr) {
+      return module_anotherPackage;
+      }
+        return nullptr;
+      }
+
+      std::shared_ptr<TurboModule> autolinking_cxxModuleProvider(const std::string moduleName, const std::shared_ptr<CallInvoker>& jsInvoker) {
+      if (moduleName == AnotherCxxModule::kModuleName) {
+      return std::make_shared<AnotherCxxModule>(jsInvoker);
+      }
+        return nullptr;
+      }
+
+      void autolinking_registerProviders(std::shared_ptr<ComponentDescriptorProviderRegistry const> providerRegistry) {
+      providerRegistry->add(concreteComponentDescriptorProvider<AnotherPackageComponentDescriptor>());
+        return;
+      }
+
+      } // namespace react
+      } // namespace facebook
+    """
+                .trimIndent())
+  }
+
+  @Test
+  fun sanitizeCmakeListsPath_withPathEndingWithFileName_removesFilename() {
+    val input = "./a/directory/CMakeLists.txt"
+    assertThat(sanitizeCmakeListsPath(input)).isEqualTo("./a/directory/")
+  }
+
+  @Test
+  fun sanitizeCmakeListsPath_withSpaces_removesSpaces() {
+    val input = "./a/dir ectory/with spaces/"
+    assertThat(sanitizeCmakeListsPath(input)).isEqualTo("./a/dir\\ ectory/with\\ spaces/")
+  }
+
+  @Test
+  fun sanitizeCmakeListsPath_withPathEndingWithFileNameAndSpaces_sanitizesIt() {
+    val input = "./a/dir ectory/CMakeLists.txt"
+    assertThat(sanitizeCmakeListsPath(input)).isEqualTo("./a/dir\\ ectory/")
+  }
+
+  private val testDependencies =
+      listOf(
+          ModelAutolinkingDependenciesPlatformAndroidJson(
+              sourceDir = "./a/directory",
+              packageImportPath = "import com.facebook.react.aPackage;",
+              packageInstance = "new APackage()",
+              buildTypes = emptyList(),
+              libraryName = "aPackage",
+              componentDescriptors = emptyList(),
+              cmakeListsPath = "./a/directory/CMakeLists.txt",
+          ),
+          ModelAutolinkingDependenciesPlatformAndroidJson(
+              sourceDir = "./another/directory",
+              packageImportPath = "import com.facebook.react.anotherPackage;",
+              packageInstance = "new AnotherPackage()",
+              buildTypes = emptyList(),
+              libraryName = "anotherPackage",
+              componentDescriptors = listOf("AnotherPackageComponentDescriptor"),
+              cmakeListsPath = "./another/directory/with spaces/CMakeLists.txt",
+              cxxModuleCMakeListsPath = "./another/directory/cxx/CMakeLists.txt",
+              cxxModuleHeaderName = "AnotherCxxModule",
+              cxxModuleCMakeListsModuleName = "another_cxxModule",
+          ))
+}
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/bin/test/com/facebook/react/tasks/GenerateCodegenArtifactsTaskTest.kt b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/bin/test/com/facebook/react/tasks/GenerateCodegenArtifactsTaskTest.kt
new file mode 100644
index 0000000..c3da68e
--- /dev/null
+++ b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/bin/test/com/facebook/react/tasks/GenerateCodegenArtifactsTaskTest.kt
@@ -0,0 +1,210 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react.tasks
+
+import com.facebook.react.tests.*
+import com.facebook.react.tests.createProject
+import com.facebook.react.tests.createTestTask
+import java.io.File
+import org.assertj.core.api.Assertions.assertThat
+import org.junit.Rule
+import org.junit.Test
+import org.junit.rules.TemporaryFolder
+
+class GenerateCodegenArtifactsTaskTest {
+
+  @get:Rule val tempFolder = TemporaryFolder()
+
+  @get:Rule val osRule = OsRule()
+
+  @Test
+  fun generateCodegenSchema_inputFiles_areSetCorrectly() {
+    val outputDir = tempFolder.newFolder("output")
+
+    val task = createTestTask<GenerateCodegenArtifactsTask> { it.generatedSrcDir.set(outputDir) }
+
+    assertThat(task.generatedSchemaFile.get().asFile).isEqualTo(File(outputDir, "schema.json"))
+  }
+
+  @Test
+  fun generateCodegenSchema_outputFile_isSetCorrectly() {
+    val outputDir = tempFolder.newFolder("output")
+
+    val task = createTestTask<GenerateCodegenArtifactsTask> { it.generatedSrcDir.set(outputDir) }
+
+    assertThat(task.generatedJavaFiles.get().asFile).isEqualTo(File(outputDir, "java"))
+    assertThat(task.generatedJniFiles.get().asFile).isEqualTo(File(outputDir, "jni"))
+  }
+
+  @Test
+  fun generateCodegenSchema_simpleProperties_areInsideInput() {
+    val packageJsonFile = tempFolder.newFile("package.json")
+
+    val task =
+        createTestTask<GenerateCodegenArtifactsTask> {
+          it.nodeExecutableAndArgs.set(listOf("npm", "help"))
+          it.codegenJavaPackageName.set("com.example.test")
+          it.libraryName.set("example-test")
+          it.packageJsonFile.set(packageJsonFile)
+        }
+
+    assertThat(task.nodeExecutableAndArgs.get()).isEqualTo(listOf("npm", "help"))
+    assertThat(task.codegenJavaPackageName.get()).isEqualTo("com.example.test")
+    assertThat(task.libraryName.get()).isEqualTo("example-test")
+    assertThat(task.inputs.properties)
+        .containsKeys("nodeExecutableAndArgs", "codegenJavaPackageName", "libraryName")
+  }
+
+  @Test
+  @WithOs(OS.LINUX)
+  fun setupCommandLine_willSetupCorrectly() {
+    val reactNativeDir = tempFolder.newFolder("node_modules/react-native/")
+    val outputDir = tempFolder.newFolder("output")
+
+    val task =
+        createTestTask<GenerateCodegenArtifactsTask> { task ->
+          task.reactNativeDir.set(reactNativeDir)
+          task.generatedSrcDir.set(outputDir)
+          task.nodeExecutableAndArgs.set(listOf("--verbose"))
+          task.nodeWorkingDir.set(tempFolder.root.absolutePath)
+        }
+
+    task.setupCommandLine("example-test", "com.example.test")
+
+    assertThat(task.commandLine)
+        .containsExactly(
+            "--verbose",
+            File(reactNativeDir, "scripts/generate-specs-cli.js").toString(),
+            "--platform",
+            "android",
+            "--schemaPath",
+            File(outputDir, "schema.json").toString(),
+            "--outputDir",
+            outputDir.toString(),
+            "--libraryName",
+            "example-test",
+            "--javaPackageName",
+            "com.example.test",
+        )
+  }
+
+  @Test
+  @WithOs(OS.WIN)
+  fun setupCommandLine_onWindows_willSetupCorrectly() {
+    val reactNativeDir = tempFolder.newFolder("node_modules/react-native/")
+    val outputDir = tempFolder.newFolder("output")
+
+    val project = createProject()
+    val task =
+        createTestTask<GenerateCodegenArtifactsTask>(project) { task ->
+          task.reactNativeDir.set(reactNativeDir)
+          task.generatedSrcDir.set(outputDir)
+          task.nodeExecutableAndArgs.set(listOf("--verbose"))
+          task.nodeWorkingDir.set(project.projectDir.absolutePath)
+        }
+
+    task.setupCommandLine("example-test", "com.example.test")
+
+    assertThat(task.commandLine)
+        .containsExactly(
+            "cmd",
+            "/c",
+            "--verbose",
+            File(reactNativeDir, "scripts/generate-specs-cli.js")
+                .relativeTo(project.projectDir)
+                .path,
+            "--platform",
+            "android",
+            "--schemaPath",
+            File(outputDir, "schema.json").relativeTo(project.projectDir).path,
+            "--outputDir",
+            outputDir.relativeTo(project.projectDir).path,
+            "--libraryName",
+            "example-test",
+            "--javaPackageName",
+            "com.example.test",
+        )
+  }
+
+  @Test
+  fun resolveTaskParameters_withConfigInPackageJson_usesIt() {
+    val packageJsonFile =
+        tempFolder.newFile("package.json").apply {
+          // language=JSON
+          writeText(
+              """
+        {
+            "name": "@a/library",
+            "codegenConfig": {
+                "name": "an-awesome-library",
+                "android": {
+                  "javaPackageName": "com.awesome.package"
+                }
+            }
+        }
+        """
+                  .trimIndent())
+        }
+
+    val task =
+        createTestTask<GenerateCodegenArtifactsTask> {
+          it.packageJsonFile.set(packageJsonFile)
+          it.codegenJavaPackageName.set("com.example.ignored")
+          it.libraryName.set("a-library-name-that-is-ignored")
+        }
+
+    val (libraryName, javaPackageName) = task.resolveTaskParameters()
+
+    assertThat(libraryName).isEqualTo("an-awesome-library")
+    assertThat(javaPackageName).isEqualTo("com.awesome.package")
+  }
+
+  @Test
+  fun resolveTaskParameters_withConfigMissingInPackageJson_usesGradleOne() {
+    val packageJsonFile =
+        tempFolder.newFile("package.json").apply {
+          // language=JSON
+          writeText(
+              """
+        {
+            "name": "@a/library",
+            "codegenConfig": {
+            }
+        }
+        """
+                  .trimIndent())
+        }
+
+    val task =
+        createTestTask<GenerateCodegenArtifactsTask> {
+          it.packageJsonFile.set(packageJsonFile)
+          it.codegenJavaPackageName.set("com.example.test")
+          it.libraryName.set("a-library-name-from-gradle")
+        }
+
+    val (libraryName, javaPackageName) = task.resolveTaskParameters()
+
+    assertThat(libraryName).isEqualTo("a-library-name-from-gradle")
+    assertThat(javaPackageName).isEqualTo("com.example.test")
+  }
+
+  @Test
+  fun resolveTaskParameters_withMissingPackageJson_usesGradleOne() {
+    val task =
+        createTestTask<GenerateCodegenArtifactsTask> {
+          it.packageJsonFile.set(File(tempFolder.root, "package.json"))
+          it.codegenJavaPackageName.set("com.example.test")
+          it.libraryName.set("a-library-name-from-gradle")
+        }
+
+    val (libraryName, javaPackageName) = task.resolveTaskParameters()
+
+    assertThat(libraryName).isEqualTo("a-library-name-from-gradle")
+    assertThat(javaPackageName).isEqualTo("com.example.test")
+  }
+}
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/bin/test/com/facebook/react/tasks/GenerateCodegenSchemaTaskTest.kt b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/bin/test/com/facebook/react/tasks/GenerateCodegenSchemaTaskTest.kt
new file mode 100644
index 0000000..7b3508b
--- /dev/null
+++ b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/bin/test/com/facebook/react/tasks/GenerateCodegenSchemaTaskTest.kt
@@ -0,0 +1,140 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react.tasks
+
+import com.facebook.react.tests.*
+import com.facebook.react.tests.createProject
+import com.facebook.react.tests.createTestTask
+import java.io.File
+import org.assertj.core.api.Assertions.assertThat
+import org.junit.Rule
+import org.junit.Test
+import org.junit.rules.TemporaryFolder
+
+class GenerateCodegenSchemaTaskTest {
+
+  @get:Rule val tempFolder = TemporaryFolder()
+
+  @get:Rule val osRule = OsRule()
+
+  @Test
+  fun generateCodegenSchema_outputFile_isSetCorrectly() {
+    val outputDir = tempFolder.newFolder("output")
+
+    val task = createTestTask<GenerateCodegenSchemaTask> { it.generatedSrcDir.set(outputDir) }
+
+    assertThat(task.generatedSchemaFile.get().asFile).isEqualTo(File(outputDir, "schema.json"))
+  }
+
+  @Test
+  fun generateCodegenSchema_nodeExecutablesArgs_areInsideInput() {
+    val task =
+        createTestTask<GenerateCodegenSchemaTask> {
+          it.nodeExecutableAndArgs.set(listOf("npm", "help"))
+        }
+
+    assertThat(task.nodeExecutableAndArgs.get()).isEqualTo(listOf("npm", "help"))
+    assertThat(task.inputs.properties).containsKey("nodeExecutableAndArgs")
+  }
+
+  @Test
+  fun wipeOutputDir_willCreateOutputDir() {
+    val task =
+        createTestTask<GenerateCodegenSchemaTask> {
+          it.generatedSrcDir.set(File(tempFolder.root, "output"))
+        }
+
+    task.wipeOutputDir()
+
+    assertThat(File(tempFolder.root, "output")).exists()
+    assertThat(File(tempFolder.root, "output").listFiles()).isEmpty()
+  }
+
+  @Test
+  fun wipeOutputDir_willWipeOutputDir() {
+    val outputDir =
+        tempFolder.newFolder("output").apply { File(this, "some-generated-file").createNewFile() }
+
+    val task = createTestTask<GenerateCodegenSchemaTask> { it.generatedSrcDir.set(outputDir) }
+
+    task.wipeOutputDir()
+
+    assertThat(outputDir.exists()).isTrue()
+    assertThat(outputDir.listFiles()).isEmpty()
+  }
+
+  @Test
+  @WithOs(OS.LINUX)
+  fun setupCommandLine_willSetupCorrectly() {
+    val codegenDir = tempFolder.newFolder("codegen")
+    val jsRootDir = tempFolder.newFolder("js")
+    val outputDir = tempFolder.newFolder("output")
+    val workingDir = jsRootDir
+
+    val task =
+        createTestTask<GenerateCodegenSchemaTask> { task ->
+          task.codegenDir.set(codegenDir)
+          task.jsRootDir.set(jsRootDir)
+          task.generatedSrcDir.set(outputDir)
+          task.nodeExecutableAndArgs.set(listOf("node", "--verbose"))
+          task.nodeWorkingDir.set(workingDir.absolutePath)
+        }
+
+    task.setupCommandLine()
+
+    assertThat(task.commandLine)
+        .containsExactly(
+            "node",
+            "--verbose",
+            File(codegenDir, "lib/cli/combine/combine-js-to-schema-cli.js").toString(),
+            "--platform",
+            "android",
+            "--exclude",
+            "NativeSampleTurboModule",
+            File(outputDir, "schema.json").toString(),
+            jsRootDir.toString(),
+        )
+  }
+
+  @Test
+  @WithOs(OS.WIN)
+  fun setupCommandLine_onWindows_willSetupCorrectly() {
+    val codegenDir = tempFolder.newFolder("codegen")
+    val jsRootDir = tempFolder.newFolder("js")
+    val outputDir = tempFolder.newFolder("output")
+
+    val project = createProject()
+    val task =
+        createTestTask<GenerateCodegenSchemaTask>(project) { task ->
+          task.codegenDir.set(codegenDir)
+          task.jsRootDir.set(jsRootDir)
+          task.generatedSrcDir.set(outputDir)
+          task.nodeExecutableAndArgs.set(listOf("node", "--verbose"))
+          task.nodeWorkingDir.set(project.rootDir.absolutePath)
+        }
+
+    task.setupCommandLine()
+
+    assertThat(task.commandLine)
+        .containsExactly(
+            "cmd",
+            "/c",
+            "node",
+            "--verbose",
+            File(codegenDir, "lib/cli/combine/combine-js-to-schema-cli.js")
+                .relativeTo(project.projectDir)
+                .path,
+            "--platform",
+            "android",
+            "--exclude",
+            "NativeSampleTurboModule",
+            File(outputDir, "schema.json").relativeTo(project.projectDir).path,
+            jsRootDir.relativeTo(project.projectDir).path,
+        )
+  }
+}
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/bin/test/com/facebook/react/tasks/GeneratePackageListTaskTest.kt b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/bin/test/com/facebook/react/tasks/GeneratePackageListTaskTest.kt
new file mode 100644
index 0000000..0214403
--- /dev/null
+++ b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/bin/test/com/facebook/react/tasks/GeneratePackageListTaskTest.kt
@@ -0,0 +1,390 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react.tasks
+
+import com.facebook.react.model.ModelAutolinkingConfigJson
+import com.facebook.react.model.ModelAutolinkingDependenciesJson
+import com.facebook.react.model.ModelAutolinkingDependenciesPlatformAndroidJson
+import com.facebook.react.model.ModelAutolinkingDependenciesPlatformJson
+import com.facebook.react.tests.createTestTask
+import org.assertj.core.api.Assertions.assertThat
+import org.junit.Rule
+import org.junit.Test
+import org.junit.rules.TemporaryFolder
+
+class GeneratePackageListTaskTest {
+
+  @get:Rule val tempFolder = TemporaryFolder()
+
+  @Test
+  fun generatePackageListTask_groupIsSetCorrectly() {
+    val task = createTestTask<GeneratePackageListTask> {}
+    assertThat(task.group).isEqualTo("react")
+  }
+
+  @Test
+  fun generatePackageListTask_staticInputs_areSetCorrectly() {
+    val outputFolder = tempFolder.newFolder("build")
+    val inputFile = tempFolder.newFile("config.json")
+
+    val task =
+        createTestTask<GeneratePackageListTask> {
+          it.generatedOutputDirectory.set(outputFolder)
+          it.autolinkInputFile.set(inputFile)
+        }
+
+    assertThat(task.inputs.files.singleFile).isEqualTo(inputFile)
+    assertThat(task.outputs.files.singleFile).isEqualTo(outputFolder)
+  }
+
+  @Test
+  fun composePackageImports_withNoPackages_returnsEmpty() {
+    val task = createTestTask<GeneratePackageListTask>()
+    val packageName = "com.facebook.react"
+    val result = task.composePackageImports(packageName, emptyMap())
+    assertThat(result).isEqualTo("")
+  }
+
+  @Test
+  fun composePackageImports_withPackages_returnsImportCorrectly() {
+    val task = createTestTask<GeneratePackageListTask>()
+    val packageName = "com.facebook.react"
+
+    val result = task.composePackageImports(packageName, testDependencies)
+    assertThat(result)
+        .isEqualTo(
+            """
+      // @react-native/a-package
+      import com.facebook.react.aPackage;
+      // @react-native/another-package
+      import com.facebook.react.anotherPackage;
+    """
+                .trimIndent())
+  }
+
+  @Test
+  fun composePackageInstance_withNoPackages_returnsEmpty() {
+    val task = createTestTask<GeneratePackageListTask>()
+    val packageName = "com.facebook.react"
+    val result = task.composePackageInstance(packageName, emptyMap())
+    assertThat(result).isEqualTo("")
+  }
+
+  @Test
+  fun composePackageInstance_withPackages_returnsImportCorrectly() {
+    val task = createTestTask<GeneratePackageListTask>()
+    val packageName = "com.facebook.react"
+
+    val result = task.composePackageInstance(packageName, testDependencies)
+    assertThat(result)
+        .isEqualTo(
+            """
+      ,
+            new APackage(),
+            new AnotherPackage()
+    """
+                .trimIndent())
+  }
+
+  @Test
+  fun interpolateDynamicValues_withNoBuildConfigOrROccurrencies_doesNothing() {
+    val packageName = "com.facebook.react"
+    val input = "com.facebook.react.aPackage"
+    val output = GeneratePackageListTask.interpolateDynamicValues(input, packageName)
+    assertThat(output).isEqualTo(input)
+  }
+
+  @Test
+  fun interpolateDynamicValues_withR_doesQualifyThem() {
+    val packageName = "com.facebook.react"
+    val input = "new APackageWithR(R.string.value)"
+    val output = GeneratePackageListTask.interpolateDynamicValues(input, packageName)
+    assertThat(output).isEqualTo("new APackageWithR(com.facebook.react.R.string.value)")
+  }
+
+  @Test
+  fun interpolateDynamicValues_withBuildConfig_doesQualifyThem() {
+    val packageName = "com.facebook.react"
+    val input = "new APackageWithBuildConfigInTheName(BuildConfig.VALUE)"
+    val output = GeneratePackageListTask.interpolateDynamicValues(input, packageName)
+    assertThat(output)
+        .isEqualTo("new APackageWithBuildConfigInTheName(com.facebook.react.BuildConfig.VALUE)")
+  }
+
+  @Test
+  fun filterAndroidPackages_withNull_returnsEmpty() {
+    val task = createTestTask<GeneratePackageListTask>()
+    val result = task.filterAndroidPackages(null)
+    assertThat(result)
+        .isEqualTo(emptyMap<String, ModelAutolinkingDependenciesPlatformAndroidJson>())
+  }
+
+  @Test
+  fun filterAndroidPackages_withEmptyObject_returnsEmpty() {
+    val task = createTestTask<GeneratePackageListTask>()
+    val result = task.filterAndroidPackages(ModelAutolinkingConfigJson("1000.0.0", null, null))
+    assertThat(result)
+        .isEqualTo(emptyMap<String, ModelAutolinkingDependenciesPlatformAndroidJson>())
+  }
+
+  @Test
+  fun filterAndroidPackages_withNoAndroidObject_returnsEmpty() {
+    val task = createTestTask<GeneratePackageListTask>()
+    val result =
+        task.filterAndroidPackages(
+            ModelAutolinkingConfigJson(
+                reactNativeVersion = "1000.0.0",
+                dependencies =
+                    mapOf(
+                        "a-dependency" to
+                            ModelAutolinkingDependenciesJson(
+                                root = "./a/directory",
+                                name = "a-dependency",
+                                platforms =
+                                    ModelAutolinkingDependenciesPlatformJson(android = null))),
+                project = null))
+    assertThat(result)
+        .isEqualTo(emptyMap<String, ModelAutolinkingDependenciesPlatformAndroidJson>())
+  }
+
+  @Test
+  fun filterAndroidPackages_withValidAndroidObject_returnsIt() {
+    val task = createTestTask<GeneratePackageListTask>()
+    val android =
+        ModelAutolinkingDependenciesPlatformAndroidJson(
+            sourceDir = "./a/directory/android",
+            packageImportPath = "import com.facebook.react.aPackage;",
+            packageInstance = "new APackage()",
+            buildTypes = emptyList(),
+        )
+
+    val result =
+        task.filterAndroidPackages(
+            ModelAutolinkingConfigJson(
+                reactNativeVersion = "1000.0.0",
+                dependencies =
+                    mapOf(
+                        "a-dependency" to
+                            ModelAutolinkingDependenciesJson(
+                                root = "./a/directory",
+                                name = "a-dependency",
+                                platforms =
+                                    ModelAutolinkingDependenciesPlatformJson(android = android))),
+                project = null))
+    assertThat(result.entries.size).isEqualTo(1)
+    assertThat(result["a-dependency"]).isEqualTo(android)
+  }
+
+  @Test
+  fun filterAndroidPackages_withIsPureCxxDependencyObject_returnsIt() {
+    val task = createTestTask<GeneratePackageListTask>()
+    val android =
+        ModelAutolinkingDependenciesPlatformAndroidJson(
+            sourceDir = "./a/directory/android",
+            packageImportPath = "import com.facebook.react.aPackage;",
+            packageInstance = "new APackage()",
+            buildTypes = emptyList(),
+            isPureCxxDependency = true)
+
+    val result =
+        task.filterAndroidPackages(
+            ModelAutolinkingConfigJson(
+                reactNativeVersion = "1000.0.0",
+                dependencies =
+                    mapOf(
+                        "a-pure-cxx-dependency" to
+                            ModelAutolinkingDependenciesJson(
+                                root = "./a/directory",
+                                name = "a-pure-cxx-dependency",
+                                platforms =
+                                    ModelAutolinkingDependenciesPlatformJson(android = android))),
+                project = null))
+    assertThat(result)
+        .isEqualTo(emptyMap<String, ModelAutolinkingDependenciesPlatformAndroidJson>())
+  }
+
+  @Test
+  fun composeFileContent_withNoPackages_returnsValidFile() {
+    val task = createTestTask<GeneratePackageListTask>()
+    val packageName = "com.facebook.react"
+    val imports = task.composePackageImports(packageName, emptyMap())
+    val instance = task.composePackageInstance(packageName, emptyMap())
+    val result = task.composeFileContent(imports, instance)
+    // language=java
+    assertThat(result)
+        .isEqualTo(
+            """
+    package com.facebook.react;
+
+    import android.app.Application;
+    import android.content.Context;
+    import android.content.res.Resources;
+
+    import com.facebook.react.ReactPackage;
+    import com.facebook.react.shell.MainPackageConfig;
+    import com.facebook.react.shell.MainReactPackage;
+    import java.util.Arrays;
+    import java.util.ArrayList;
+
+
+
+    public class PackageList {
+      private Application application;
+      private ReactNativeHost reactNativeHost;
+      private MainPackageConfig mConfig;
+
+      public PackageList(ReactNativeHost reactNativeHost) {
+        this(reactNativeHost, null);
+      }
+
+      public PackageList(Application application) {
+        this(application, null);
+      }
+
+      public PackageList(ReactNativeHost reactNativeHost, MainPackageConfig config) {
+        this.reactNativeHost = reactNativeHost;
+        mConfig = config;
+      }
+
+      public PackageList(Application application, MainPackageConfig config) {
+        this.reactNativeHost = null;
+        this.application = application;
+        mConfig = config;
+      }
+
+      private ReactNativeHost getReactNativeHost() {
+        return this.reactNativeHost;
+      }
+
+      private Resources getResources() {
+        return this.getApplication().getResources();
+      }
+
+      private Application getApplication() {
+        if (this.reactNativeHost == null) return this.application;
+        return this.reactNativeHost.getApplication();
+      }
+
+      private Context getApplicationContext() {
+        return this.getApplication().getApplicationContext();
+      }
+
+      public ArrayList<ReactPackage> getPackages() {
+        return new ArrayList<>(Arrays.<ReactPackage>asList(
+          new MainReactPackage(mConfig)
+        ));
+      }
+    }
+    """
+                .trimIndent())
+  }
+
+  @Test
+  fun composeFileContent_withPackages_returnsValidFile() {
+    val task = createTestTask<GeneratePackageListTask>()
+    val packageName = "com.facebook.react"
+    val imports = task.composePackageImports(packageName, testDependencies)
+    val instance = task.composePackageInstance(packageName, testDependencies)
+    val result = task.composeFileContent(imports, instance)
+    // language=java
+    assertThat(result)
+        .isEqualTo(
+            """
+    package com.facebook.react;
+
+    import android.app.Application;
+    import android.content.Context;
+    import android.content.res.Resources;
+
+    import com.facebook.react.ReactPackage;
+    import com.facebook.react.shell.MainPackageConfig;
+    import com.facebook.react.shell.MainReactPackage;
+    import java.util.Arrays;
+    import java.util.ArrayList;
+
+    // @react-native/a-package
+    import com.facebook.react.aPackage;
+    // @react-native/another-package
+    import com.facebook.react.anotherPackage;
+
+    public class PackageList {
+      private Application application;
+      private ReactNativeHost reactNativeHost;
+      private MainPackageConfig mConfig;
+
+      public PackageList(ReactNativeHost reactNativeHost) {
+        this(reactNativeHost, null);
+      }
+
+      public PackageList(Application application) {
+        this(application, null);
+      }
+
+      public PackageList(ReactNativeHost reactNativeHost, MainPackageConfig config) {
+        this.reactNativeHost = reactNativeHost;
+        mConfig = config;
+      }
+
+      public PackageList(Application application, MainPackageConfig config) {
+        this.reactNativeHost = null;
+        this.application = application;
+        mConfig = config;
+      }
+
+      private ReactNativeHost getReactNativeHost() {
+        return this.reactNativeHost;
+      }
+
+      private Resources getResources() {
+        return this.getApplication().getResources();
+      }
+
+      private Application getApplication() {
+        if (this.reactNativeHost == null) return this.application;
+        return this.reactNativeHost.getApplication();
+      }
+
+      private Context getApplicationContext() {
+        return this.getApplication().getApplicationContext();
+      }
+
+      public ArrayList<ReactPackage> getPackages() {
+        return new ArrayList<>(Arrays.<ReactPackage>asList(
+          new MainReactPackage(mConfig),
+          new APackage(),
+          new AnotherPackage()
+        ));
+      }
+    }
+    """
+                .trimIndent())
+  }
+
+  private val testDependencies =
+      mapOf(
+          "@react-native/a-package" to
+              ModelAutolinkingDependenciesPlatformAndroidJson(
+                  sourceDir = "./a/directory",
+                  packageImportPath = "import com.facebook.react.aPackage;",
+                  packageInstance = "new APackage()",
+                  buildTypes = emptyList(),
+                  libraryName = "aPackage",
+                  componentDescriptors = emptyList(),
+                  cmakeListsPath = "./a/directory/CMakeLists.txt",
+              ),
+          "@react-native/another-package" to
+              ModelAutolinkingDependenciesPlatformAndroidJson(
+                  sourceDir = "./another/directory",
+                  packageImportPath = "import com.facebook.react.anotherPackage;",
+                  packageInstance = "new AnotherPackage()",
+                  buildTypes = emptyList(),
+                  libraryName = "anotherPackage",
+                  componentDescriptors = emptyList(),
+                  cmakeListsPath = "./another/directory/CMakeLists.txt",
+              ))
+}
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/bin/test/com/facebook/react/tasks/internal/BuildCodegenCLITaskTest.kt b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/bin/test/com/facebook/react/tasks/internal/BuildCodegenCLITaskTest.kt
new file mode 100644
index 0000000..480f64d
--- /dev/null
+++ b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/bin/test/com/facebook/react/tasks/internal/BuildCodegenCLITaskTest.kt
@@ -0,0 +1,40 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react.tasks.internal
+
+import com.facebook.react.tests.createProject
+import com.facebook.react.tests.createTestTask
+import org.assertj.core.api.Assertions.assertThat
+import org.junit.Rule
+import org.junit.Test
+import org.junit.rules.TemporaryFolder
+
+class BuildCodegenCLITaskTest {
+
+  @get:Rule val tempFolder = TemporaryFolder()
+
+  @Test
+  fun buildCodegenCli_inputProperties_areSetCorrectly() {
+    val project = createProject(tempFolder.root)
+    val bashPath = tempFolder.newFile("bash").absolutePath
+    val logFile = tempFolder.newFile("logfile.out")
+    val fileTree = project.fileTree(".")
+    val task =
+        createTestTask<BuildCodegenCLITask> { task ->
+          task.bashWindowsHome.set(bashPath)
+          task.logFile.set(logFile)
+          task.inputFiles.set(fileTree)
+          task.outputFiles.set(fileTree)
+        }
+
+    assertThat(task.bashWindowsHome.get()).isEqualTo(bashPath)
+    assertThat(task.logFile.get().asFile).isEqualTo(logFile)
+    assertThat(task.inputFiles.get()).isEqualTo(fileTree)
+    assertThat(task.outputFiles.get()).isEqualTo(fileTree)
+  }
+}
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/bin/test/com/facebook/react/tasks/internal/CustomExecTaskTest.kt b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/bin/test/com/facebook/react/tasks/internal/CustomExecTaskTest.kt
new file mode 100644
index 0000000..c61d5b3
--- /dev/null
+++ b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/bin/test/com/facebook/react/tasks/internal/CustomExecTaskTest.kt
@@ -0,0 +1,33 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react.tasks.internal
+
+import com.facebook.react.tests.createTestTask
+import org.assertj.core.api.Assertions.assertThat
+import org.junit.Rule
+import org.junit.Test
+import org.junit.rules.TemporaryFolder
+
+class CustomExecTaskTest {
+
+  @get:Rule val tempFolder = TemporaryFolder()
+
+  @Test
+  fun customExec_inputProperties_areSetCorrectly() {
+    val outFile = tempFolder.newFile("stdout")
+    val errFile = tempFolder.newFile("stderr")
+    val task =
+        createTestTask<CustomExecTask> { task ->
+          task.errorOutputFile.set(errFile)
+          task.standardOutputFile.set(outFile)
+        }
+
+    assertThat(task.errorOutputFile.get().asFile).isEqualTo(errFile)
+    assertThat(task.standardOutputFile.get().asFile).isEqualTo(outFile)
+  }
+}
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/bin/test/com/facebook/react/tasks/internal/PrepareBoostTaskTest.kt b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/bin/test/com/facebook/react/tasks/internal/PrepareBoostTaskTest.kt
new file mode 100644
index 0000000..c72ad86
--- /dev/null
+++ b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/bin/test/com/facebook/react/tasks/internal/PrepareBoostTaskTest.kt
@@ -0,0 +1,116 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react.tasks.internal
+
+import com.facebook.react.tests.createProject
+import com.facebook.react.tests.createTestTask
+import java.io.*
+import org.assertj.core.api.Assertions.assertThat
+import org.assertj.core.api.Assertions.assertThatThrownBy
+import org.junit.Rule
+import org.junit.Test
+import org.junit.rules.TemporaryFolder
+
+class PrepareBoostTaskTest {
+
+  @get:Rule val tempFolder = TemporaryFolder()
+
+  @Test
+  fun prepareBoostTask_withMissingConfiguration_fails() {
+    val task = createTestTask<PrepareBoostTask>()
+    assertThatThrownBy { task.taskAction() }
+        .isInstanceOf(IllegalStateException::class.java)
+        .hasMessage(
+            "Cannot query the value of task ':PrepareBoostTask' property 'boostVersion' because it has no value available.")
+  }
+
+  @Test
+  fun prepareBoostTask_copiesCMakefile() {
+    val boostpath = tempFolder.newFolder("boostpath")
+    val output = tempFolder.newFolder("output")
+    val project = createProject()
+    val boostThirdPartyJniPath = File(project.projectDir, "src/main/jni/third-party/boost/")
+    val task =
+        createTestTask<PrepareBoostTask>(project = project) {
+          it.boostPath.setFrom(boostpath)
+          it.boostThirdPartyJniPath.set(boostThirdPartyJniPath)
+          it.boostVersion.set("1.0.0")
+          it.outputDir.set(output)
+        }
+    File(boostThirdPartyJniPath, "CMakeLists.txt").apply {
+      parentFile.mkdirs()
+      createNewFile()
+    }
+    task.taskAction()
+
+    assertThat(output.listFiles()).extracting("name").contains("CMakeLists.txt")
+  }
+
+  @Test
+  fun prepareBoostTask_copiesAsmFiles() {
+    val boostpath = tempFolder.newFolder("boostpath")
+    val boostThirdPartyJniPath = tempFolder.newFolder("boostpath/jni")
+    val output = tempFolder.newFolder("output")
+    val task =
+        createTestTask<PrepareBoostTask> {
+          it.boostPath.setFrom(boostpath)
+          it.boostThirdPartyJniPath.set(boostThirdPartyJniPath)
+          it.boostVersion.set("1.0.0")
+          it.outputDir.set(output)
+        }
+    File(boostpath, "asm/asm.S").apply {
+      parentFile.mkdirs()
+      createNewFile()
+    }
+    task.taskAction()
+
+    assertThat(File(output, "asm/asm.S")).exists()
+  }
+
+  @Test
+  fun prepareBoostTask_copiesBoostSourceFiles() {
+    val boostpath = tempFolder.newFolder("boostpath")
+    val boostThirdPartyJniPath = tempFolder.newFolder("boostpath/jni")
+    val output = tempFolder.newFolder("output")
+    val task =
+        createTestTask<PrepareBoostTask> {
+          it.boostPath.setFrom(boostpath)
+          it.boostThirdPartyJniPath.set(boostThirdPartyJniPath)
+          it.boostVersion.set("1.0.0")
+          it.outputDir.set(output)
+        }
+    File(boostpath, "boost_1.0.0/boost/config.hpp").apply {
+      parentFile.mkdirs()
+      createNewFile()
+    }
+    task.taskAction()
+
+    assertThat(File(output, "boost_1.0.0/boost/config.hpp")).exists()
+  }
+
+  @Test
+  fun prepareBoostTask_copiesVersionlessBoostSourceFiles() {
+    val boostpath = tempFolder.newFolder("boostpath")
+    val boostThirdPartyJniPath = tempFolder.newFolder("boostpath/jni")
+    val output = tempFolder.newFolder("output")
+    val task =
+        createTestTask<PrepareBoostTask> {
+          it.boostPath.setFrom(boostpath)
+          it.boostThirdPartyJniPath.set(boostThirdPartyJniPath)
+          it.boostVersion.set("1.0.0")
+          it.outputDir.set(output)
+        }
+    File(boostpath, "boost/boost/config.hpp").apply {
+      parentFile.mkdirs()
+      createNewFile()
+    }
+    task.taskAction()
+
+    assertThat(File(output, "boost_1.0.0/boost/config.hpp")).exists()
+  }
+}
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/bin/test/com/facebook/react/tasks/internal/PrepareGlogTaskTest.kt b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/bin/test/com/facebook/react/tasks/internal/PrepareGlogTaskTest.kt
new file mode 100644
index 0000000..a382b10
--- /dev/null
+++ b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/bin/test/com/facebook/react/tasks/internal/PrepareGlogTaskTest.kt
@@ -0,0 +1,140 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react.tasks.internal
+
+import com.facebook.react.tests.createProject
+import com.facebook.react.tests.createTestTask
+import java.io.*
+import org.assertj.core.api.Assertions.assertThat
+import org.junit.Rule
+import org.junit.Test
+import org.junit.rules.TemporaryFolder
+
+class PrepareGlogTaskTest {
+
+  @get:Rule val tempFolder = TemporaryFolder()
+
+  @Test(expected = IllegalStateException::class)
+  fun prepareGlogTask_withMissingConfiguration_fails() {
+    val task = createTestTask<PrepareGlogTask>()
+
+    task.taskAction()
+  }
+
+  @Test
+  fun prepareGlogTask_copiesCMakefile() {
+    val glogpath = tempFolder.newFolder("glogpath")
+    val output = tempFolder.newFolder("output")
+    val project = createProject()
+    val glogThirdPartyJniPath = File(project.projectDir, "src/main/jni/third-party/glog/")
+    val task =
+        createTestTask<PrepareGlogTask>(project = project) {
+          it.glogPath.setFrom(glogpath)
+          it.glogThirdPartyJniPath.set(glogThirdPartyJniPath)
+          it.glogVersion.set("1.0.0")
+          it.outputDir.set(output)
+        }
+    File(glogThirdPartyJniPath, "CMakeLists.txt").apply {
+      parentFile.mkdirs()
+      createNewFile()
+    }
+    task.taskAction()
+
+    assertThat(output.listFiles()!!.any { it.name == "CMakeLists.txt" }).isTrue()
+  }
+
+  @Test
+  fun prepareGlogTask_copiesConfigHeaderFile() {
+    val glogpath = tempFolder.newFolder("glogpath")
+    val output = tempFolder.newFolder("output")
+    val project = createProject()
+    val glogThirdPartyJniPath = File(project.projectDir, "src/main/jni/third-party/glog/")
+    val task =
+        createTestTask<PrepareGlogTask>(project = project) {
+          it.glogPath.setFrom(glogpath)
+          it.glogThirdPartyJniPath.set(glogThirdPartyJniPath)
+          it.glogVersion.set("1.0.0")
+          it.outputDir.set(output)
+        }
+    File(glogThirdPartyJniPath, "config.h").apply {
+      parentFile.mkdirs()
+      createNewFile()
+    }
+    task.taskAction()
+
+    assertThat(output.listFiles()!!.any { it.name == "config.h" }).isTrue()
+  }
+
+  @Test
+  fun prepareGlogTask_copiesSourceCode() {
+    val glogpath = tempFolder.newFolder("glogpath")
+    val glogThirdPartyJniPath = tempFolder.newFolder("glogpath/jni")
+    val output = tempFolder.newFolder("output")
+    val task =
+        createTestTask<PrepareGlogTask> {
+          it.glogPath.setFrom(glogpath)
+          it.glogThirdPartyJniPath.set(glogThirdPartyJniPath)
+          it.glogVersion.set("1.0.0")
+          it.outputDir.set(output)
+        }
+    File(glogpath, "glog-1.0.0/src/glog.cpp").apply {
+      parentFile.mkdirs()
+      createNewFile()
+    }
+
+    task.taskAction()
+
+    assertThat(File(output, "glog-1.0.0/src/glog.cpp").exists()).isTrue()
+  }
+
+  @Test
+  fun prepareGlogTask_replacesTokenCorrectly() {
+    val glogpath = tempFolder.newFolder("glogpath")
+    val glogThirdPartyJniPath = tempFolder.newFolder("glogpath/jni")
+    val output = tempFolder.newFolder("output")
+    val task =
+        createTestTask<PrepareGlogTask> {
+          it.glogPath.setFrom(glogpath)
+          it.glogThirdPartyJniPath.set(glogThirdPartyJniPath)
+          it.glogVersion.set("1.0.0")
+          it.outputDir.set(output)
+        }
+    File(glogpath, "glog-1.0.0/src/glog.h.in").apply {
+      parentFile.mkdirs()
+      writeText("ac_google_start_namespace")
+    }
+
+    task.taskAction()
+
+    val expectedFile = File(output, "glog.h")
+    assertThat(expectedFile.exists()).isTrue()
+    assertThat(expectedFile.readText()).isEqualTo("ac_google_start_namespace")
+  }
+
+  @Test
+  fun prepareGlogTask_exportsHeaderCorrectly() {
+    val glogpath = tempFolder.newFolder("glogpath")
+    val glogThirdPartyJniPath = tempFolder.newFolder("glogpath/jni")
+    val output = tempFolder.newFolder("output")
+    val task =
+        createTestTask<PrepareGlogTask> {
+          it.glogPath.setFrom(glogpath)
+          it.glogThirdPartyJniPath.set(glogThirdPartyJniPath)
+          it.glogVersion.set("1.0.0")
+          it.outputDir.set(output)
+        }
+    File(glogpath, "glog-1.0.0/src/logging.h.in").apply {
+      parentFile.mkdirs()
+      writeText("ac_google_start_namespace")
+    }
+
+    task.taskAction()
+
+    assertThat(File(output, "exported/glog/logging.h").exists()).isTrue()
+  }
+}
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/bin/test/com/facebook/react/tasks/internal/PreparePrefabHeadersTaskTest.kt b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/bin/test/com/facebook/react/tasks/internal/PreparePrefabHeadersTaskTest.kt
new file mode 100644
index 0000000..bf974bb
--- /dev/null
+++ b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/bin/test/com/facebook/react/tasks/internal/PreparePrefabHeadersTaskTest.kt
@@ -0,0 +1,200 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react.tasks.internal
+
+import com.facebook.react.tasks.internal.utils.PrefabPreprocessingEntry
+import com.facebook.react.tests.createProject
+import com.facebook.react.tests.createTestTask
+import java.io.*
+import org.assertj.core.api.Assertions.assertThat
+import org.junit.Rule
+import org.junit.Test
+import org.junit.rules.TemporaryFolder
+
+class PreparePrefabHeadersTaskTest {
+
+  @get:Rule val tempFolder = TemporaryFolder()
+
+  @Test
+  fun preparePrefabHeadersTask_withMissingConfiguration_doesNothing() {
+    val task = createTestTask<PreparePrefabHeadersTask>()
+
+    task.taskAction()
+  }
+
+  @Test
+  fun preparePrefabHeadersTask_withSingleEntry_copiesHeaderFile() {
+    val outputDir = tempFolder.newFolder("output")
+    File(tempFolder.root, "input/hello.h").createNewPathAndFile()
+
+    val project = createProject(projectDir = tempFolder.root)
+    val task =
+        createTestTask<PreparePrefabHeadersTask>(project = project) {
+          it.outputDir.set(outputDir)
+          it.input.set(listOf(PrefabPreprocessingEntry("sample_library", "input/" to "")))
+        }
+
+    task.taskAction()
+
+    assertThat(File(outputDir, "sample_library/hello.h")).exists()
+  }
+
+  @Test
+  fun preparePrefabHeadersTask_withSingleEntry_respectsPrefix() {
+    val expectedPrefix = "react/render/something/"
+    val outputDir = tempFolder.newFolder("output")
+    File(tempFolder.root, "input/hello.h").createNewPathAndFile()
+
+    val project = createProject(projectDir = tempFolder.root)
+    val task =
+        createTestTask<PreparePrefabHeadersTask>(project = project) {
+          it.outputDir.set(outputDir)
+          it.input.set(
+              listOf(PrefabPreprocessingEntry("sample_library", "input/" to expectedPrefix)))
+        }
+
+    task.taskAction()
+
+    assertThat(File(outputDir, "sample_library/${expectedPrefix}hello.h")).exists()
+  }
+
+  @Test
+  fun preparePrefabHeadersTask_ignoresUnnecessaryFiles() {
+    val expectedPrefix = "react/render/something/"
+    val outputDir = tempFolder.newFolder("output")
+    File(tempFolder.root, "input/hello.hpp").createNewPathAndFile()
+    File(tempFolder.root, "input/hello.cpp").createNewPathAndFile()
+    File(tempFolder.root, "input/CMakeLists.txt").createNewPathAndFile()
+
+    val project = createProject(projectDir = tempFolder.root)
+    val task =
+        createTestTask<PreparePrefabHeadersTask>(project = project) {
+          it.outputDir.set(outputDir)
+          it.input.set(
+              listOf(PrefabPreprocessingEntry("sample_library", "input/" to expectedPrefix)))
+        }
+
+    task.taskAction()
+
+    assertThat(File(outputDir, "sample_library/hello.hpp")).doesNotExist()
+    assertThat(File(outputDir, "sample_library/hello.cpp")).doesNotExist()
+    assertThat(File(outputDir, "sample_library/CMakeLists.txt")).doesNotExist()
+  }
+
+  @Test
+  fun preparePrefabHeadersTask_withMultiplePaths_copiesHeaderFiles() {
+    val outputDir = tempFolder.newFolder("output")
+    File(tempFolder.root, "input/component1/hello1.h").createNewPathAndFile()
+    File(tempFolder.root, "input/component2/debug/hello2.h").createNewPathAndFile()
+
+    val project = createProject(projectDir = tempFolder.root)
+    val task =
+        createTestTask<PreparePrefabHeadersTask>(project = project) {
+          it.outputDir.set(outputDir)
+          it.input.set(
+              listOf(
+                  PrefabPreprocessingEntry(
+                      "sample_library",
+                      listOf("input/component1/" to "", "input/component2/" to "")),
+              ))
+        }
+
+    task.taskAction()
+
+    assertThat(File(outputDir, "sample_library/hello1.h")).exists()
+    assertThat(File(outputDir, "sample_library/debug/hello2.h")).exists()
+  }
+
+  @Test
+  fun preparePrefabHeadersTask_withMultipleEntries_copiesHeaderFiles() {
+    val outputDir = tempFolder.newFolder("output")
+    File(tempFolder.root, "input/lib1/hello1.h").createNewPathAndFile()
+    File(tempFolder.root, "input/lib2/hello2.h").createNewPathAndFile()
+
+    val project = createProject(projectDir = tempFolder.root)
+    val task =
+        createTestTask<PreparePrefabHeadersTask>(project = project) {
+          it.outputDir.set(outputDir)
+          it.input.set(
+              listOf(
+                  PrefabPreprocessingEntry("libraryone", "input/lib1/" to ""),
+                  PrefabPreprocessingEntry("librarytwo", "input/lib2/" to "")))
+        }
+
+    task.taskAction()
+
+    assertThat(File(outputDir, "libraryone/hello1.h")).exists()
+    assertThat(File(outputDir, "librarytwo/hello2.h")).exists()
+  }
+
+  @Test
+  fun preparePrefabHeadersTask_withReusedHeaders_copiesHeadersTwice() {
+    val outputDir = tempFolder.newFolder("output")
+    File(tempFolder.root, "input/lib1/hello1.h").createNewPathAndFile()
+    File(tempFolder.root, "input/lib2/hello2.h").createNewPathAndFile()
+    File(tempFolder.root, "input/shared/sharedheader.h").createNewPathAndFile()
+
+    val project = createProject(projectDir = tempFolder.root)
+    val task =
+        createTestTask<PreparePrefabHeadersTask>(project = project) {
+          it.outputDir.set(outputDir)
+          it.input.set(
+              listOf(
+                  PrefabPreprocessingEntry(
+                      "libraryone", listOf("input/lib1/" to "", "input/shared/" to "shared/")),
+                  PrefabPreprocessingEntry(
+                      "librarytwo", listOf("input/lib2/" to "", "input/shared/" to "shared/")),
+              ))
+        }
+
+    task.taskAction()
+
+    assertThat(File(outputDir, "libraryone/hello1.h")).exists()
+    assertThat(File(outputDir, "libraryone/shared/sharedheader.h")).exists()
+    assertThat(File(outputDir, "librarytwo/hello2.h")).exists()
+    assertThat(File(outputDir, "librarytwo/shared/sharedheader.h")).exists()
+  }
+
+  @Test
+  fun preparePrefabHeadersTask_withBoostHeaders_filtersThemCorrectly() {
+    val outputDir = tempFolder.newFolder("output")
+    File(tempFolder.root, "boost/boost/config.hpp").createNewPathAndFile()
+    File(tempFolder.root, "boost/boost/operators.hpp").createNewPathAndFile()
+    File(tempFolder.root, "boost/boost/config/default/default.hpp").createNewPathAndFile()
+    File(tempFolder.root, "boost/boost/core/core.hpp").createNewPathAndFile()
+    File(tempFolder.root, "boost/boost/detail/workaround.hpp").createNewPathAndFile()
+    File(tempFolder.root, "boost/boost/preprocessor/preprocessor.hpp").createNewPathAndFile()
+    File(tempFolder.root, "boost/boost/preprocessor/detail/preprocessor_detail.hpp")
+        .createNewPathAndFile()
+    File(tempFolder.root, "boost/boost/anothermodule/wedontuse.hpp").createNewPathAndFile()
+
+    val project = createProject(projectDir = tempFolder.root)
+    val task =
+        createTestTask<PreparePrefabHeadersTask>(project = project) {
+          it.outputDir.set(outputDir)
+          it.input.set(listOf(PrefabPreprocessingEntry("sample_library", "boost/" to "")))
+        }
+
+    task.taskAction()
+
+    assertThat(File(outputDir, "sample_library/boost/config.hpp")).exists()
+    assertThat(File(outputDir, "sample_library/boost/operators.hpp")).exists()
+    assertThat(File(outputDir, "sample_library/boost/config/default/default.hpp")).exists()
+    assertThat(File(outputDir, "sample_library/boost/core/core.hpp")).exists()
+    assertThat(File(outputDir, "sample_library/boost/detail/workaround.hpp")).exists()
+    assertThat(File(outputDir, "sample_library/boost/preprocessor/preprocessor.hpp")).exists()
+    assertThat(File(outputDir, "sample_library/boost/preprocessor/detail/preprocessor_detail.hpp"))
+        .exists()
+    assertThat(File(outputDir, "sample_library/boost/anothermodule/wedontuse.hpp")).doesNotExist()
+  }
+
+  private fun File.createNewPathAndFile() {
+    parentFile.mkdirs()
+    createNewFile()
+  }
+}
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/bin/test/com/facebook/react/tasks/internal/utils/PrefabPreprocessingEntryTest.kt b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/bin/test/com/facebook/react/tasks/internal/utils/PrefabPreprocessingEntryTest.kt
new file mode 100644
index 0000000..a8ab050
--- /dev/null
+++ b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/bin/test/com/facebook/react/tasks/internal/utils/PrefabPreprocessingEntryTest.kt
@@ -0,0 +1,25 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react.tasks.internal.utils
+
+import groovy.test.GroovyTestCase.assertEquals
+import org.junit.Test
+
+class PrefabPreprocessingEntryTest {
+
+  @Test
+  fun secondaryConstructor_createsAList() {
+    val sampleEntry =
+        PrefabPreprocessingEntry(
+            libraryName = "justALibrary", pathToPrefixCouple = "aPath" to "andAPrefix")
+
+    assertEquals(1, sampleEntry.pathToPrefixCouples.size)
+    assertEquals("aPath", sampleEntry.pathToPrefixCouples[0].first)
+    assertEquals("andAPrefix", sampleEntry.pathToPrefixCouples[0].second)
+  }
+}
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/bin/test/com/facebook/react/tests/TaskTestUtils.kt b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/bin/test/com/facebook/react/tests/TaskTestUtils.kt
new file mode 100644
index 0000000..b677cca
--- /dev/null
+++ b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/bin/test/com/facebook/react/tests/TaskTestUtils.kt
@@ -0,0 +1,69 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react.tests
+
+import java.io.*
+import java.net.URI
+import java.nio.file.FileSystems
+import java.nio.file.Files
+import java.util.zip.ZipEntry
+import java.util.zip.ZipOutputStream
+import org.gradle.api.Project
+import org.gradle.api.Task
+import org.gradle.testfixtures.ProjectBuilder
+
+internal fun createProject(projectDir: File? = null): Project {
+  val project =
+      ProjectBuilder.builder()
+          .apply {
+            if (projectDir != null) {
+              withProjectDir(projectDir)
+            }
+          }
+          .build()
+
+  project.plugins.apply("com.android.library")
+  project.plugins.apply("com.facebook.react")
+  return project
+}
+
+internal inline fun <reified T : Task> createTestTask(
+    project: Project = createProject(),
+    taskName: String = T::class.java.simpleName,
+    crossinline block: (T) -> Unit = {}
+): T = project.tasks.register(taskName, T::class.java) { block(it) }.get()
+
+/** A util function to zip a list of files from [contents] inside the zipfile at [destination]. */
+internal fun zipFiles(destination: File, contents: List<File>) {
+  ZipOutputStream(BufferedOutputStream(FileOutputStream(destination.absolutePath))).use { out ->
+    for (file in contents) {
+      FileInputStream(file).use { fi ->
+        BufferedInputStream(fi).use { origin ->
+          val entry = ZipEntry(file.name)
+          out.putNextEntry(entry)
+          origin.copyTo(out, 1024)
+        }
+      }
+    }
+  }
+}
+
+/** A util function to create a zip given a list of dummy files path. */
+internal fun createZip(dest: File, paths: List<String>) {
+  val env = mapOf("create" to "true")
+  val uri = URI.create("jar:file:$dest")
+
+  FileSystems.newFileSystem(uri, env).use { zipfs ->
+    paths.forEach {
+      val zipEntryPath = zipfs.getPath(it)
+      val zipEntryFolder = zipEntryPath.subpath(0, zipEntryPath.nameCount - 1)
+      Files.createDirectories(zipEntryFolder)
+      Files.createFile(zipEntryPath)
+    }
+  }
+}
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/bin/test/com/facebook/react/utils/AgpConfiguratorUtilsTest.kt b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/bin/test/com/facebook/react/utils/AgpConfiguratorUtilsTest.kt
new file mode 100644
index 0000000..c468a54
--- /dev/null
+++ b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/bin/test/com/facebook/react/utils/AgpConfiguratorUtilsTest.kt
@@ -0,0 +1,65 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react.utils
+
+import java.io.File
+import org.assertj.core.api.Assertions.assertThat
+import org.junit.Rule
+import org.junit.Test
+import org.junit.rules.TemporaryFolder
+
+class AgpConfiguratorUtilsTest {
+
+  @get:Rule val tempFolder = TemporaryFolder()
+
+  @Test
+  fun getPackageNameFromManifest_withEmptyFile_returnsNull() {
+    val mainFolder = tempFolder.newFolder("awesome-module/src/main/")
+    val manifest = File(mainFolder, "AndroidManifest.xml").apply { writeText("") }
+
+    val actual = getPackageNameFromManifest(manifest)
+    assertThat(actual).isNull()
+  }
+
+  @Test
+  fun getPackageNameFromManifest_withMissingPackage_returnsNull() {
+    val mainFolder = tempFolder.newFolder("awesome-module/src/main/")
+    val manifest =
+        File(mainFolder, "AndroidManifest.xml").apply {
+          writeText(
+              // language=xml
+              """
+          <manifest xmlns:android="http://schemas.android.com/apk/res/android">
+          </manifest>
+          """
+                  .trimIndent())
+        }
+
+    val actual = getPackageNameFromManifest(manifest)
+    assertThat(actual).isNull()
+  }
+
+  @Test
+  fun getPackageNameFromManifest_withPackage_returnsPackage() {
+    val mainFolder = tempFolder.newFolder("awesome-module/src/main/")
+    val manifest =
+        File(mainFolder, "AndroidManifest.xml").apply {
+          writeText(
+              // language=xml
+              """
+          <manifest xmlns:android="http://schemas.android.com/apk/res/android" package="com.facebook.react" >
+          </manifest>
+          """
+                  .trimIndent())
+        }
+
+    val actual = getPackageNameFromManifest(manifest)
+    assertThat(actual).isNotNull()
+    assertThat(actual).isEqualTo("com.facebook.react")
+  }
+}
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/bin/test/com/facebook/react/utils/BackwardCompatUtilsTest.kt b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/bin/test/com/facebook/react/utils/BackwardCompatUtilsTest.kt
new file mode 100644
index 0000000..6716a18
--- /dev/null
+++ b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/bin/test/com/facebook/react/utils/BackwardCompatUtilsTest.kt
@@ -0,0 +1,43 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react.utils
+
+import com.facebook.react.tests.createProject
+import com.facebook.react.utils.BackwardCompatUtils.configureBackwardCompatibilityReactMap
+import org.assertj.core.api.Assertions.assertThat
+import org.junit.Rule
+import org.junit.Test
+import org.junit.rules.TemporaryFolder
+
+class BackwardCompatUtilsTest {
+
+  @get:Rule val tempFolder = TemporaryFolder()
+
+  @Test
+  fun configureBackwardCompatibilityReactMap_addsEmptyReactMap() {
+    val project = createProject()
+
+    configureBackwardCompatibilityReactMap(project)
+
+    assertThat(project.extensions.extraProperties.has("react")).isTrue()
+    @Suppress("UNCHECKED_CAST")
+    assertThat(project.extensions.extraProperties.get("react") as Map<String, Any?>).isEmpty()
+  }
+
+  @Test
+  fun configureBackwardCompatibilityReactMap_withExistingMapSetByUser_wipesTheMap() {
+    val project = createProject()
+    project.extensions.extraProperties.set("react", mapOf("enableHermes" to true))
+
+    configureBackwardCompatibilityReactMap(project)
+
+    assertThat(project.extensions.extraProperties.has("react")).isTrue()
+    @Suppress("UNCHECKED_CAST")
+    assertThat(project.extensions.extraProperties.get("react") as Map<String, Any?>).isEmpty()
+  }
+}
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/bin/test/com/facebook/react/utils/DependencyUtilsTest.kt b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/bin/test/com/facebook/react/utils/DependencyUtilsTest.kt
new file mode 100644
index 0000000..155f18b
--- /dev/null
+++ b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/bin/test/com/facebook/react/utils/DependencyUtilsTest.kt
@@ -0,0 +1,482 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react.utils
+
+import com.facebook.react.tests.createProject
+import com.facebook.react.utils.DependencyUtils.configureDependencies
+import com.facebook.react.utils.DependencyUtils.configureRepositories
+import com.facebook.react.utils.DependencyUtils.getDependencySubstitutions
+import com.facebook.react.utils.DependencyUtils.mavenRepoFromURI
+import com.facebook.react.utils.DependencyUtils.mavenRepoFromUrl
+import com.facebook.react.utils.DependencyUtils.readVersionAndGroupStrings
+import com.facebook.react.utils.DependencyUtils.shouldAddJitPack
+import java.net.URI
+import org.assertj.core.api.Assertions.assertThat
+import org.gradle.api.artifacts.repositories.MavenArtifactRepository
+import org.gradle.testfixtures.ProjectBuilder
+import org.junit.Rule
+import org.junit.Test
+import org.junit.rules.TemporaryFolder
+
+class DependencyUtilsTest {
+
+  @get:Rule val tempFolder = TemporaryFolder()
+
+  @Test
+  fun configureRepositories_withProjectPropertySet_configuresMavenLocalCorrectly() {
+    val localMaven = tempFolder.newFolder("m2")
+    val localMavenURI = localMaven.toURI()
+    val project = createProject()
+    project.extensions.extraProperties.set("react.internal.mavenLocalRepo", localMaven.absolutePath)
+
+    configureRepositories(project)
+
+    assertThat(
+            project.repositories.firstOrNull {
+              it is MavenArtifactRepository && it.url == localMavenURI
+            })
+        .isNotNull()
+  }
+
+  @Test
+  fun configureRepositories_containsSnapshotRepo() {
+    val repositoryURI = URI.create("https://oss.sonatype.org/content/repositories/snapshots/")
+    val project = createProject()
+
+    configureRepositories(project)
+
+    assertThat(
+            project.repositories.firstOrNull {
+              it is MavenArtifactRepository && it.url == repositoryURI
+            })
+        .isNotNull()
+  }
+
+  @Test
+  fun configureRepositories_containsMavenCentral() {
+    val repositoryURI = URI.create("https://repo.maven.apache.org/maven2/")
+    val project = createProject()
+
+    configureRepositories(project)
+
+    assertThat(
+            project.repositories.firstOrNull {
+              it is MavenArtifactRepository && it.url == repositoryURI
+            })
+        .isNotNull()
+  }
+
+  @Test
+  fun configureRepositories_containsGoogleRepo() {
+    val repositoryURI = URI.create("https://dl.google.com/dl/android/maven2/")
+    val project = createProject()
+
+    configureRepositories(project)
+
+    assertThat(
+            project.repositories.firstOrNull {
+              it is MavenArtifactRepository && it.url == repositoryURI
+            })
+        .isNotNull()
+  }
+
+  @Test
+  fun configureRepositories_containsJitPack() {
+    val repositoryURI = URI.create("https://www.jitpack.io")
+    val project = createProject()
+
+    configureRepositories(project)
+
+    assertThat(
+            project.repositories.firstOrNull {
+              it is MavenArtifactRepository && it.url == repositoryURI
+            })
+        .isNotNull()
+  }
+
+  @Test
+  fun configureRepositories_withIncludeJitpackRepositoryFalse_doesNotContainJitPack() {
+    val repositoryURI = URI.create("https://www.jitpack.io")
+    var project = createProject()
+    project.extensions.extraProperties.set("includeJitpackRepository", "false")
+
+    configureRepositories(project)
+
+    assertThat(
+            project.repositories.firstOrNull {
+              it is MavenArtifactRepository && it.url == repositoryURI
+            })
+        .isNull()
+
+    // We test both with scoped and unscoped property
+    project = createProject()
+    project.extensions.extraProperties.set("react.includeJitpackRepository", "false")
+
+    configureRepositories(project)
+
+    assertThat(
+            project.repositories.firstOrNull {
+              it is MavenArtifactRepository && it.url == repositoryURI
+            })
+        .isNull()
+  }
+
+  @Test
+  fun configureRepositories_withincludeJitpackRepositoryTrue_containJitPack() {
+    val repositoryURI = URI.create("https://www.jitpack.io")
+    var project = createProject()
+    project.extensions.extraProperties.set("includeJitpackRepository", "true")
+
+    configureRepositories(project)
+
+    assertThat(
+            project.repositories.firstOrNull {
+              it is MavenArtifactRepository && it.url == repositoryURI
+            })
+        .isNotNull()
+
+    // We test both with scoped and unscoped property
+    project = createProject()
+    project.extensions.extraProperties.set("react.includeJitpackRepository", "true")
+
+    configureRepositories(project)
+
+    assertThat(
+            project.repositories.firstOrNull {
+              it is MavenArtifactRepository && it.url == repositoryURI
+            })
+        .isNotNull()
+  }
+
+  @Test
+  fun configureRepositories_withProjectPropertySet_hasHigherPriorityThanMavenCentral() {
+    val localMaven = tempFolder.newFolder("m2")
+    val localMavenURI = localMaven.toURI()
+    val mavenCentralURI = URI.create("https://repo.maven.apache.org/maven2/")
+    val project = createProject()
+    project.extensions.extraProperties.set("react.internal.mavenLocalRepo", localMaven.absolutePath)
+
+    configureRepositories(project)
+
+    val indexOfLocalRepo =
+        project.repositories.indexOfFirst {
+          it is MavenArtifactRepository && it.url == localMavenURI
+        }
+    val indexOfMavenCentral =
+        project.repositories.indexOfFirst {
+          it is MavenArtifactRepository && it.url == mavenCentralURI
+        }
+    assertThat(indexOfLocalRepo < indexOfMavenCentral).isTrue()
+  }
+
+  @Test
+  fun configureRepositories_snapshotRepoHasHigherPriorityThanMavenCentral() {
+    val repositoryURI = URI.create("https://oss.sonatype.org/content/repositories/snapshots/")
+    val mavenCentralURI = URI.create("https://repo.maven.apache.org/maven2/")
+    val project = createProject()
+
+    configureRepositories(project)
+
+    val indexOfSnapshotRepo =
+        project.repositories.indexOfFirst {
+          it is MavenArtifactRepository && it.url == repositoryURI
+        }
+    val indexOfMavenCentral =
+        project.repositories.indexOfFirst {
+          it is MavenArtifactRepository && it.url == mavenCentralURI
+        }
+    assertThat(indexOfSnapshotRepo < indexOfMavenCentral).isTrue()
+  }
+
+  @Test
+  fun configureRepositories_appliesToAllProjects() {
+    val repositoryURI = URI.create("https://repo.maven.apache.org/maven2/")
+    val rootProject = ProjectBuilder.builder().build()
+    val appProject = ProjectBuilder.builder().withName("app").withParent(rootProject).build()
+    val libProject = ProjectBuilder.builder().withName("lib").withParent(rootProject).build()
+
+    configureRepositories(appProject)
+
+    assertThat(
+            appProject.repositories.firstOrNull {
+              it is MavenArtifactRepository && it.url == repositoryURI
+            })
+        .isNotNull()
+    assertThat(
+            libProject.repositories.firstOrNull {
+              it is MavenArtifactRepository && it.url == repositoryURI
+            })
+        .isNotNull()
+  }
+
+  @Test
+  fun configureRepositories_withPreviousExclusionRulesOnMavenCentral_appliesCorrectly() {
+    val repositoryURI = URI.create("https://repo.maven.apache.org/maven2/")
+    val rootProject = ProjectBuilder.builder().build()
+    val appProject = ProjectBuilder.builder().withName("app").withParent(rootProject).build()
+    val libProject = ProjectBuilder.builder().withName("lib").withParent(rootProject).build()
+
+    // Let's emulate a library which set an `excludeGroup` on `com.facebook.react` for Central.
+    libProject.repositories.mavenCentral { repo ->
+      repo.content { content -> content.excludeGroup("com.facebook.react") }
+    }
+
+    configureRepositories(appProject)
+
+    // We need to make sure we have Maven Central defined twice, one by the library,
+    // and another is the override by RNGP.
+    assertThat(
+            libProject.repositories.count {
+              it is MavenArtifactRepository && it.url == repositoryURI
+            })
+        .isEqualTo(2)
+  }
+
+  @Test
+  fun configureDependencies_withEmptyVersion_doesNothing() {
+    val project = createProject()
+
+    configureDependencies(project, "")
+
+    assertThat(project.configurations.first().resolutionStrategy.forcedModules.isEmpty()).isTrue()
+  }
+
+  @Test
+  fun configureDependencies_withVersionString_appliesResolutionStrategy() {
+    val project = createProject()
+
+    configureDependencies(project, "1.2.3")
+
+    val forcedModules = project.configurations.first().resolutionStrategy.forcedModules
+    assertThat(forcedModules.any { it.toString() == "com.facebook.react:react-android:1.2.3" })
+        .isTrue()
+    assertThat(forcedModules.any { it.toString() == "com.facebook.react:hermes-android:1.2.3" })
+        .isTrue()
+  }
+
+  @Test
+  fun configureDependencies_withVersionString_appliesOnAllProjects() {
+    val rootProject = ProjectBuilder.builder().build()
+    val appProject = ProjectBuilder.builder().withName("app").withParent(rootProject).build()
+    val libProject = ProjectBuilder.builder().withName("lib").withParent(rootProject).build()
+    appProject.plugins.apply("com.android.application")
+    libProject.plugins.apply("com.android.library")
+
+    configureDependencies(appProject, "1.2.3")
+
+    val appForcedModules = appProject.configurations.first().resolutionStrategy.forcedModules
+    val libForcedModules = libProject.configurations.first().resolutionStrategy.forcedModules
+    assertThat(appForcedModules.any { it.toString() == "com.facebook.react:react-android:1.2.3" })
+        .isTrue()
+    assertThat(appForcedModules.any { it.toString() == "com.facebook.react:hermes-android:1.2.3" })
+        .isTrue()
+    assertThat(libForcedModules.any { it.toString() == "com.facebook.react:react-android:1.2.3" })
+        .isTrue()
+    assertThat(libForcedModules.any { it.toString() == "com.facebook.react:hermes-android:1.2.3" })
+        .isTrue()
+  }
+
+  @Test
+  fun configureDependencies_withVersionStringAndGroupString_appliesOnAllProjects() {
+    val rootProject = ProjectBuilder.builder().build()
+    val appProject = ProjectBuilder.builder().withName("app").withParent(rootProject).build()
+    val libProject = ProjectBuilder.builder().withName("lib").withParent(rootProject).build()
+    appProject.plugins.apply("com.android.application")
+    libProject.plugins.apply("com.android.library")
+
+    configureDependencies(appProject, "1.2.3", "io.github.test")
+
+    val appForcedModules = appProject.configurations.first().resolutionStrategy.forcedModules
+    val libForcedModules = libProject.configurations.first().resolutionStrategy.forcedModules
+    assertThat(appForcedModules.any { it.toString() == "io.github.test:react-android:1.2.3" })
+        .isTrue()
+    assertThat(appForcedModules.any { it.toString() == "io.github.test:hermes-android:1.2.3" })
+        .isTrue()
+    assertThat(libForcedModules.any { it.toString() == "io.github.test:react-android:1.2.3" })
+        .isTrue()
+    assertThat(libForcedModules.any { it.toString() == "io.github.test:hermes-android:1.2.3" })
+        .isTrue()
+  }
+
+  @Test
+  fun getDependencySubstitutions_withDefaultGroup_substitutesCorrectly() {
+    val dependencySubstitutions = getDependencySubstitutions("0.42.0")
+
+    assertThat("com.facebook.react:react-native").isEqualTo(dependencySubstitutions[0].first)
+    assertThat("com.facebook.react:react-android:0.42.0")
+        .isEqualTo(dependencySubstitutions[0].second)
+    assertThat(
+            "The react-native artifact was deprecated in favor of react-android due to https://github.com/facebook/react-native/issues/35210.")
+        .isEqualTo(dependencySubstitutions[0].third)
+    assertThat("com.facebook.react:hermes-engine").isEqualTo(dependencySubstitutions[1].first)
+    assertThat("com.facebook.react:hermes-android:0.42.0")
+        .isEqualTo(dependencySubstitutions[1].second)
+    assertThat(
+            "The hermes-engine artifact was deprecated in favor of hermes-android due to https://github.com/facebook/react-native/issues/35210.")
+        .isEqualTo(dependencySubstitutions[1].third)
+  }
+
+  @Test
+  fun getDependencySubstitutions_withCustomGroup_substitutesCorrectly() {
+    val dependencySubstitutions = getDependencySubstitutions("0.42.0", "io.github.test")
+
+    assertThat("com.facebook.react:react-native").isEqualTo(dependencySubstitutions[0].first)
+    assertThat("io.github.test:react-android:0.42.0").isEqualTo(dependencySubstitutions[0].second)
+    assertThat(
+            "The react-native artifact was deprecated in favor of react-android due to https://github.com/facebook/react-native/issues/35210.")
+        .isEqualTo(dependencySubstitutions[0].third)
+    assertThat("com.facebook.react:hermes-engine").isEqualTo(dependencySubstitutions[1].first)
+    assertThat("io.github.test:hermes-android:0.42.0").isEqualTo(dependencySubstitutions[1].second)
+    assertThat(
+            "The hermes-engine artifact was deprecated in favor of hermes-android due to https://github.com/facebook/react-native/issues/35210.")
+        .isEqualTo(dependencySubstitutions[1].third)
+    assertThat("com.facebook.react:react-android").isEqualTo(dependencySubstitutions[2].first)
+    assertThat("io.github.test:react-android:0.42.0").isEqualTo(dependencySubstitutions[2].second)
+    assertThat("The react-android dependency was modified to use the correct Maven group.")
+        .isEqualTo(dependencySubstitutions[2].third)
+    assertThat("com.facebook.react:hermes-android").isEqualTo(dependencySubstitutions[3].first)
+    assertThat("io.github.test:hermes-android:0.42.0").isEqualTo(dependencySubstitutions[3].second)
+    assertThat("The hermes-android dependency was modified to use the correct Maven group.")
+        .isEqualTo(dependencySubstitutions[3].third)
+  }
+
+  @Test
+  fun readVersionString_withCorrectVersionString_returnsIt() {
+    val propertiesFile =
+        tempFolder.newFile("gradle.properties").apply {
+          writeText(
+              """
+        VERSION_NAME=1000.0.0
+        ANOTHER_PROPERTY=true
+      """
+                  .trimIndent())
+        }
+
+    val versionString = readVersionAndGroupStrings(propertiesFile).first
+
+    assertThat(versionString).isEqualTo("1000.0.0")
+  }
+
+  @Test
+  fun readVersionString_withNightlyVersionString_returnsSnapshotVersion() {
+    val propertiesFile =
+        tempFolder.newFile("gradle.properties").apply {
+          writeText(
+              """
+        VERSION_NAME=0.0.0-20221101-2019-cfe811ab1
+        ANOTHER_PROPERTY=true
+      """
+                  .trimIndent())
+        }
+
+    val versionString = readVersionAndGroupStrings(propertiesFile).first
+
+    assertThat(versionString).isEqualTo("0.0.0-20221101-2019-cfe811ab1-SNAPSHOT")
+  }
+
+  @Test
+  fun readVersionString_withMissingVersionString_returnsEmpty() {
+    val propertiesFile =
+        tempFolder.newFile("gradle.properties").apply {
+          writeText(
+              """
+        ANOTHER_PROPERTY=true
+      """
+                  .trimIndent())
+        }
+
+    val versionString = readVersionAndGroupStrings(propertiesFile).first
+    assertThat(versionString).isEqualTo("")
+  }
+
+  @Test
+  fun readVersionString_withEmptyVersionString_returnsEmpty() {
+    val propertiesFile =
+        tempFolder.newFile("gradle.properties").apply {
+          writeText(
+              """
+        VERSION_NAME=
+        ANOTHER_PROPERTY=true
+      """
+                  .trimIndent())
+        }
+
+    val versionString = readVersionAndGroupStrings(propertiesFile).first
+    assertThat(versionString).isEqualTo("")
+  }
+
+  @Test
+  fun readGroupString_withCorrectGroupString_returnsIt() {
+    val propertiesFile =
+        tempFolder.newFile("gradle.properties").apply {
+          writeText(
+              """
+        react.internal.publishingGroup=io.github.test
+        ANOTHER_PROPERTY=true
+      """
+                  .trimIndent())
+        }
+
+    val groupString = readVersionAndGroupStrings(propertiesFile).second
+
+    assertThat(groupString).isEqualTo("io.github.test")
+  }
+
+  @Test
+  fun readGroupString_withEmptyGroupString_returnsDefault() {
+    val propertiesFile =
+        tempFolder.newFile("gradle.properties").apply {
+          writeText(
+              """
+        ANOTHER_PROPERTY=true
+      """
+                  .trimIndent())
+        }
+
+    val groupString = readVersionAndGroupStrings(propertiesFile).second
+
+    assertThat(groupString).isEqualTo("com.facebook.react")
+  }
+
+  @Test
+  fun mavenRepoFromUrl_worksCorrectly() {
+    val process = createProject()
+    val mavenRepo = process.mavenRepoFromUrl("https://hello.world")
+
+    assertThat(mavenRepo.url).isEqualTo(URI.create("https://hello.world"))
+  }
+
+  @Test
+  fun mavenRepoFromURI_worksCorrectly() {
+    val process = createProject()
+    val repoFolder = tempFolder.newFolder("maven-repo")
+    val mavenRepo = process.mavenRepoFromURI(repoFolder.toURI())
+
+    assertThat(mavenRepo.url).isEqualTo(repoFolder.toURI())
+  }
+
+  @Test
+  fun shouldAddJitPack_withScopedProperty() {
+    val project = createProject(tempFolder.root)
+    project.extensions.extraProperties.set("react.includeJitpackRepository", "false")
+    assertThat(project.shouldAddJitPack()).isFalse()
+  }
+
+  @Test
+  fun shouldAddJitPack_withUnscopedProperty() {
+    val project = createProject(tempFolder.root)
+    project.extensions.extraProperties.set("react.includeJitpackRepository", "false")
+    assertThat(project.shouldAddJitPack()).isFalse()
+  }
+
+  @Test
+  fun shouldAddJitPack_defaultIsTrue() {
+    val project = createProject(tempFolder.root)
+    assertThat(project.shouldAddJitPack()).isTrue()
+  }
+}
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/bin/test/com/facebook/react/utils/FileUtilsTest.kt b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/bin/test/com/facebook/react/utils/FileUtilsTest.kt
new file mode 100644
index 0000000..9f08ba4
--- /dev/null
+++ b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/bin/test/com/facebook/react/utils/FileUtilsTest.kt
@@ -0,0 +1,45 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react.utils
+
+import java.io.File
+import org.assertj.core.api.Assertions.assertThat
+import org.junit.Rule
+import org.junit.Test
+import org.junit.rules.TemporaryFolder
+
+class FileUtilsTest {
+
+  @get:Rule val tempFolder = TemporaryFolder()
+
+  @Test
+  fun moveTo_movesCorrectly() {
+    val fileToMove = tempFolder.newFile().apply { writeText("42") }
+    val destFolder = tempFolder.newFolder("destFolder")
+    val destFile = File(destFolder, "destFile")
+
+    fileToMove.moveTo(destFile)
+
+    assertThat(destFile).hasContent("42")
+    assertThat(fileToMove).doesNotExist()
+  }
+
+  @Test
+  fun recreateDir_worksCorrectly() {
+    val subFolder = tempFolder.newFolder()
+    File(subFolder, "1").apply { writeText("1") }
+    File(subFolder, "2").apply { writeText("2") }
+    File(subFolder, "subDir").apply { mkdirs() }
+    File(subFolder, "subDir/3").apply { writeText("3") }
+
+    subFolder.recreateDir()
+
+    assertThat(subFolder).exists()
+    assertThat(subFolder.listFiles()).hasSize(0)
+  }
+}
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/bin/test/com/facebook/react/utils/NdkConfiguratorUtilsTest.kt b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/bin/test/com/facebook/react/utils/NdkConfiguratorUtilsTest.kt
new file mode 100644
index 0000000..a0dd3e3
--- /dev/null
+++ b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/bin/test/com/facebook/react/utils/NdkConfiguratorUtilsTest.kt
@@ -0,0 +1,73 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react.utils
+
+import com.facebook.react.utils.NdkConfiguratorUtils.getPackagingOptionsForVariant
+import org.assertj.core.api.Assertions.assertThat
+import org.junit.Test
+
+class NdkConfiguratorUtilsTest {
+
+  @Test
+  fun getPackagingOptionsForVariant_withHermesEnabledAndThirdPartyJSCDisabled() {
+    val (excludes, includes) =
+        getPackagingOptionsForVariant(
+            hermesEnabled = true,
+            useThirdPartyJSC = false,
+        )
+
+    assertThat(excludes).containsExactly("**/libjsc.so", "**/libjsctooling.so")
+    assertThat(includes).doesNotContain("**/libjsc.so", "**/libjsctooling.so")
+
+    assertThat(includes).containsExactly("**/libhermes.so", "**/libhermestooling.so")
+    assertThat(excludes).doesNotContain("**/libhermes.so", "**/libhermestooling.so")
+  }
+
+  @Test
+  fun getPackagingOptionsForVariant_withHermesEnabledAndThirdPartyJSC() {
+    val (excludes, includes) =
+        getPackagingOptionsForVariant(
+            hermesEnabled = true,
+            useThirdPartyJSC = true,
+        )
+
+    assertThat(excludes).containsExactly("**/libjsc.so", "**/libjsctooling.so")
+    assertThat(includes).doesNotContain("**/libjsc.so", "**/libjsctooling.so")
+
+    assertThat(includes).containsExactly("**/libhermes.so", "**/libhermestooling.so")
+    assertThat(excludes).doesNotContain("**/libhermes.so", "**/libhermestooling.so")
+  }
+
+  @Test
+  fun getPackagingOptionsForVariant_withHermesDisabledAndThirdPartyJSCDisabled() {
+    val (excludes, includes) =
+        getPackagingOptionsForVariant(
+            hermesEnabled = false,
+            useThirdPartyJSC = false,
+        )
+
+    assertThat(excludes).containsExactly("**/libhermes.so", "**/libhermestooling.so")
+    assertThat(includes).doesNotContain("**/libhermes.so", "**/libhermestooling.so")
+
+    assertThat(includes).containsExactly("**/libjsc.so", "**/libjsctooling.so")
+    assertThat(excludes).doesNotContain("**/libjsc.so", "**/libjsctooling.so")
+  }
+
+  @Test
+  fun getPackagingOptionsForVariant_withHermesDisabledAndThirdPartyJSC() {
+    val (excludes, includes) =
+        getPackagingOptionsForVariant(
+            hermesEnabled = false,
+            useThirdPartyJSC = true,
+        )
+
+    assertThat(includes).containsExactly("**/libjsc.so")
+    assertThat(excludes)
+        .containsExactly("**/libhermes.so", "**/libhermestooling.so", "**/libjsctooling.so")
+  }
+}
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/bin/test/com/facebook/react/utils/PathUtilsTest.kt b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/bin/test/com/facebook/react/utils/PathUtilsTest.kt
new file mode 100644
index 0000000..0b4cfc8
--- /dev/null
+++ b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/bin/test/com/facebook/react/utils/PathUtilsTest.kt
@@ -0,0 +1,325 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react.utils
+
+import com.facebook.react.ReactExtension
+import com.facebook.react.TestReactExtension
+import com.facebook.react.tests.OS
+import com.facebook.react.tests.OsRule
+import com.facebook.react.tests.WithOs
+import java.io.File
+import org.assertj.core.api.Assertions.assertThat
+import org.gradle.testfixtures.ProjectBuilder
+import org.junit.Assume.assumeTrue
+import org.junit.Rule
+import org.junit.Test
+import org.junit.rules.TemporaryFolder
+
+class PathUtilsTest {
+
+  @get:Rule val tempFolder = TemporaryFolder()
+  @get:Rule val osRule = OsRule()
+
+  @Test
+  fun detectedEntryFile_withProvidedVariable() {
+    val extension = TestReactExtension(ProjectBuilder.builder().build())
+    val expected = tempFolder.newFile("fake.index.js")
+    extension.entryFile.set(expected)
+
+    val actual = detectedEntryFile(extension)
+
+    assertThat(actual).isEqualTo(expected)
+  }
+
+  @Test
+  fun detectedEntryFile_withAndroidEntryPoint() {
+    val extension = TestReactExtension(ProjectBuilder.builder().build())
+    extension.root.set(tempFolder.root)
+    tempFolder.newFile("index.android.js")
+
+    val actual = detectedEntryFile(extension)
+
+    assertThat(actual).isEqualTo(File(tempFolder.root, "index.android.js"))
+  }
+
+  @Test
+  fun detectedEntryFile_withDefaultEntryPoint() {
+    val extension = TestReactExtension(ProjectBuilder.builder().build())
+    extension.root.set(tempFolder.root)
+
+    val actual = detectedEntryFile(extension)
+
+    assertThat(actual).isEqualTo(File(tempFolder.root, "index.js"))
+  }
+
+  @Test
+  fun detectedEntryFile_withEnvironmentVariable() {
+    val extension = TestReactExtension(ProjectBuilder.builder().build())
+    val expected = tempFolder.newFile("./fromenv.index.js")
+    // As we can't override env variable for tests, we're going to emulate them here.
+    val envVariable = "./fromenv.index.js"
+
+    extension.root.set(tempFolder.root)
+
+    val actual = detectedEntryFile(extension, envVariable)
+
+    assertThat(actual).isEqualTo(expected)
+  }
+
+  @Test
+  fun detectedCliPath_withCliPathFromExtensionAndFileExists_returnsIt() {
+    val project = ProjectBuilder.builder().build()
+    val cliFile = tempFolder.newFile("cli.js").apply { createNewFile() }
+    val extension = TestReactExtension(project)
+    extension.cliFile.set(cliFile)
+
+    val actual = detectedCliFile(extension)
+
+    assertThat(actual).isEqualTo(cliFile)
+  }
+
+  @Test
+  fun detectedCliPath_withCliFromNodeModules() {
+    val project = ProjectBuilder.builder().build()
+    val extension = TestReactExtension(project)
+    File(tempFolder.root, "node_modules/react-native/cli.js").apply {
+      parentFile.mkdirs()
+      writeText("<!-- nothing to see here -->")
+    }
+    val locationToResolveFrom = File(tempFolder.root, "a-subdirectory").apply { mkdirs() }
+    extension.root.set(locationToResolveFrom)
+
+    val actual = detectedCliFile(extension)
+
+    assertThat(actual.readText()).isEqualTo("<!-- nothing to see here -->")
+  }
+
+  @Test(expected = IllegalStateException::class)
+  fun detectedCliPath_failsIfNotFound() {
+    val project = ProjectBuilder.builder().build()
+    val extension = TestReactExtension(project)
+
+    // Because react-native is now a package, it is always
+    // accessible from <root>/node_modules/react-native
+    // We need to provide location where cli.js file won't be resolved
+    extension.root.set(tempFolder.root)
+
+    detectedCliFile(extension)
+  }
+
+  @Test
+  fun projectPathToLibraryName_withSimplePath() {
+    assertThat(projectPathToLibraryName(":sample")).isEqualTo("SampleSpec")
+  }
+
+  @Test
+  fun projectPathToLibraryName_withComplexPath() {
+    assertThat(projectPathToLibraryName(":sample:android:app")).isEqualTo("SampleAndroidAppSpec")
+  }
+
+  @Test
+  fun projectPathToLibraryName_withKebabCase() {
+    assertThat(projectPathToLibraryName("sample-android-app")).isEqualTo("SampleAndroidAppSpec")
+  }
+
+  @Test
+  fun projectPathToLibraryName_withDotsAndUnderscores() {
+    assertThat(projectPathToLibraryName("sample_android.app")).isEqualTo("SampleAndroidAppSpec")
+  }
+
+  @Test
+  fun detectOSAwareHermesCommand_withProvidedCommand() {
+    assertThat(detectOSAwareHermesCommand(tempFolder.root, "./my-home/hermes"))
+        .isEqualTo("./my-home/hermes")
+  }
+
+  @Test
+  fun detectOSAwareHermesCommand_withHermescBuiltLocally() {
+    // As we can't mock env variables, we skip this test if an override of the Hermes
+    // path has been provided.
+    assumeTrue(System.getenv("REACT_NATIVE_OVERRIDE_HERMES_DIR") == null)
+
+    tempFolder.newFolder("node_modules/react-native/ReactAndroid/hermes-engine/build/hermes/bin/")
+    val expected =
+        tempFolder.newFile(
+            "node_modules/react-native/ReactAndroid/hermes-engine/build/hermes/bin/hermesc")
+
+    assertThat(detectOSAwareHermesCommand(tempFolder.root, "")).isEqualTo(expected.toString())
+  }
+
+  @Test
+  @WithOs(OS.MAC)
+  fun detectOSAwareHermesCommand_withBundledHermescInsideRN() {
+    tempFolder.newFolder("node_modules/react-native/sdks/hermesc/osx-bin/")
+    val expected = tempFolder.newFile("node_modules/react-native/sdks/hermesc/osx-bin/hermesc")
+
+    assertThat(detectOSAwareHermesCommand(tempFolder.root, "")).isEqualTo(expected.toString())
+  }
+
+  @Test(expected = IllegalStateException::class)
+  @WithOs(OS.MAC)
+  fun detectOSAwareHermesCommand_failsIfNotFound() {
+    detectOSAwareHermesCommand(tempFolder.root, "")
+  }
+
+  @Test
+  @WithOs(OS.MAC)
+  fun detectOSAwareHermesCommand_withProvidedCommand_takesPrecedence() {
+    tempFolder.newFolder("node_modules/react-native/sdks/hermes/build/bin/")
+    tempFolder.newFile("node_modules/react-native/sdks/hermes/build/bin/hermesc")
+    tempFolder.newFolder("node_modules/react-native/sdks/hermesc/osx-bin/")
+    tempFolder.newFile("node_modules/react-native/sdks/hermesc/osx-bin/hermesc")
+
+    assertThat(detectOSAwareHermesCommand(tempFolder.root, "./my-home/hermes"))
+        .isEqualTo("./my-home/hermes")
+  }
+
+  @Test
+  @WithOs(OS.MAC)
+  fun detectOSAwareHermesCommand_withoutProvidedCommand_builtHermescTakesPrecedence() {
+    // As we can't mock env variables, we skip this test if an override of the Hermes
+    // path has been provided.
+    assumeTrue(System.getenv("REACT_NATIVE_OVERRIDE_HERMES_DIR") == null)
+
+    tempFolder.newFolder("node_modules/react-native/ReactAndroid/hermes-engine/build/hermes/bin/")
+    val expected =
+        tempFolder.newFile(
+            "node_modules/react-native/ReactAndroid/hermes-engine/build/hermes/bin/hermesc")
+    tempFolder.newFolder("node_modules/react-native/sdks/hermesc/osx-bin/")
+    tempFolder.newFile("node_modules/react-native/sdks/hermesc/osx-bin/hermesc")
+
+    assertThat(detectOSAwareHermesCommand(tempFolder.root, "")).isEqualTo(expected.toString())
+  }
+
+  @Test
+  fun getBuiltHermescFile_withoutOverride() {
+    assertThat(getBuiltHermescFile(tempFolder.root, ""))
+        .isEqualTo(
+            File(
+                tempFolder.root,
+                "node_modules/react-native/ReactAndroid/hermes-engine/build/hermes/bin/hermesc"))
+  }
+
+  @Test
+  @WithOs(OS.WIN)
+  fun getBuiltHermescFile_onWindows_withoutOverride() {
+    assertThat(getBuiltHermescFile(tempFolder.root, ""))
+        .isEqualTo(
+            File(
+                tempFolder.root,
+                "node_modules/react-native/ReactAndroid/hermes-engine/build/hermes/bin/hermesc.exe"))
+  }
+
+  @Test
+  fun getBuiltHermescFile_withOverride() {
+    assertThat(getBuiltHermescFile(tempFolder.root, "/home/ci/hermes"))
+        .isEqualTo(File("/home/ci/hermes/build/bin/hermesc"))
+  }
+
+  @Test
+  @WithOs(OS.WIN)
+  fun getHermesCBin_onWindows_returnsHermescExe() {
+    assertThat(getHermesCBin()).isEqualTo("hermesc.exe")
+  }
+
+  @Test
+  @WithOs(OS.LINUX)
+  fun getHermesCBin_onLinux_returnsHermesc() {
+    assertThat(getHermesCBin()).isEqualTo("hermesc")
+  }
+
+  @Test
+  @WithOs(OS.MAC)
+  fun getHermesCBin_onMac_returnsHermesc() {
+    assertThat(getHermesCBin()).isEqualTo("hermesc")
+  }
+
+  @Test
+  fun findPackageJsonFile_withFileInParentFolder_picksItUp() {
+    tempFolder.newFile("package.json")
+    val moduleFolder = tempFolder.newFolder("awesome-module")
+
+    val project = ProjectBuilder.builder().withProjectDir(moduleFolder).build()
+    project.plugins.apply("com.android.library")
+    project.plugins.apply("com.facebook.react")
+    val extension = project.extensions.getByType(ReactExtension::class.java)
+
+    assertThat(findPackageJsonFile(project, extension.root))
+        .isEqualTo(project.file("../package.json"))
+  }
+
+  @Test
+  fun findPackageJsonFile_withFileConfiguredInExtension_picksItUp() {
+    val moduleFolder = tempFolder.newFolder("awesome-module")
+    val localFile = File(moduleFolder, "package.json").apply { writeText("{}") }
+
+    val project = ProjectBuilder.builder().withProjectDir(moduleFolder).build()
+    project.plugins.apply("com.android.library")
+    project.plugins.apply("com.facebook.react")
+    val extension =
+        project.extensions.getByType(ReactExtension::class.java).apply { root.set(moduleFolder) }
+
+    assertThat(findPackageJsonFile(project, extension.root)).isEqualTo(localFile)
+  }
+
+  @Test
+  fun readPackageJsonFile_withMissingFile_returnsNull() {
+    val moduleFolder = tempFolder.newFolder("awesome-module")
+    val project = ProjectBuilder.builder().withProjectDir(moduleFolder).build()
+    project.plugins.apply("com.android.library")
+    project.plugins.apply("com.facebook.react")
+    val extension =
+        project.extensions.getByType(ReactExtension::class.java).apply { root.set(moduleFolder) }
+
+    val actual = readPackageJsonFile(project, extension.root)
+
+    assertThat(actual).isNull()
+  }
+
+  @Test
+  fun readPackageJsonFile_withFileConfiguredInExtension_andMissingCodegenConfig_returnsNullCodegenConfig() {
+    val moduleFolder = tempFolder.newFolder("awesome-module")
+    File(moduleFolder, "package.json").apply { writeText("{}") }
+    val project = ProjectBuilder.builder().withProjectDir(moduleFolder).build()
+    project.plugins.apply("com.android.library")
+    project.plugins.apply("com.facebook.react")
+    val extension =
+        project.extensions.getByType(ReactExtension::class.java).apply { root.set(moduleFolder) }
+
+    val actual = readPackageJsonFile(project, extension.root)
+
+    assertThat(actual).isNotNull()
+    assertThat(actual!!.codegenConfig).isNull()
+  }
+
+  @Test
+  fun readPackageJsonFile_withFileConfiguredInExtension_andHavingCodegenConfig_returnsValidCodegenConfig() {
+    val moduleFolder = tempFolder.newFolder("awesome-module")
+    File(moduleFolder, "package.json").apply {
+      writeText(
+          // language=json
+          """
+      {
+        "name": "a-library",
+        "codegenConfig": {}
+      }
+      """
+              .trimIndent())
+    }
+    val project = ProjectBuilder.builder().withProjectDir(moduleFolder).build()
+    project.plugins.apply("com.android.library")
+    project.plugins.apply("com.facebook.react")
+    val extension =
+        project.extensions.getByType(ReactExtension::class.java).apply { root.set(moduleFolder) }
+
+    val actual = readPackageJsonFile(project, extension.root)
+
+    assertThat(actual).isNotNull()
+    assertThat(actual!!.codegenConfig).isNotNull()
+  }
+}
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/bin/test/com/facebook/react/utils/ProjectUtilsTest.kt b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/bin/test/com/facebook/react/utils/ProjectUtilsTest.kt
new file mode 100644
index 0000000..7cd48df
--- /dev/null
+++ b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/bin/test/com/facebook/react/utils/ProjectUtilsTest.kt
@@ -0,0 +1,250 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react.utils
+
+import com.facebook.react.TestReactExtension
+import com.facebook.react.model.ModelCodegenConfig
+import com.facebook.react.model.ModelPackageJson
+import com.facebook.react.tests.createProject
+import com.facebook.react.utils.ProjectUtils.getReactNativeArchitectures
+import com.facebook.react.utils.ProjectUtils.isHermesEnabled
+import com.facebook.react.utils.ProjectUtils.isNewArchEnabled
+import com.facebook.react.utils.ProjectUtils.needsCodegenFromPackageJson
+import java.io.File
+import org.assertj.core.api.Assertions.assertThat
+import org.junit.Rule
+import org.junit.Test
+import org.junit.rules.TemporaryFolder
+
+class ProjectUtilsTest {
+
+  @get:Rule val tempFolder = TemporaryFolder()
+
+  @Test
+  fun isNewArchEnabled_returnsFalseByDefault() {
+    val project = createProject()
+    val extension = TestReactExtension(project)
+    assertThat(createProject().isNewArchEnabled(extension)).isFalse()
+  }
+
+  @Test
+  fun isNewArchEnabled_withDisabled_returnsFalse() {
+    val project = createProject()
+    project.extensions.extraProperties.set("newArchEnabled", "false")
+    val extension = TestReactExtension(project)
+    assertThat(project.isNewArchEnabled(extension)).isFalse()
+  }
+
+  @Test
+  fun isNewArchEnabled_withEnabled_returnsTrue() {
+    val project = createProject()
+    project.extensions.extraProperties.set("newArchEnabled", "true")
+    val extension = TestReactExtension(project)
+    assertThat(project.isNewArchEnabled(extension)).isTrue()
+  }
+
+  @Test
+  fun isNewArchEnabled_withInvalid_returnsFalse() {
+    val project = createProject()
+    project.extensions.extraProperties.set("newArchEnabled", "¯\\_(ツ)_/¯")
+    val extension = TestReactExtension(project)
+    assertThat(project.isNewArchEnabled(extension)).isFalse()
+  }
+
+  @Test
+  fun isNewArchEnabled_withRNVersion0_returnFalse() {
+    val project = createProject()
+    val extension = TestReactExtension(project)
+    File(tempFolder.root, "package.json").apply {
+      writeText(
+          // language=json
+          """
+      {
+        "version": "0.73.0"
+      }
+      """
+              .trimIndent())
+    }
+    extension.reactNativeDir.set(tempFolder.root)
+    assertThat(project.isNewArchEnabled(extension)).isFalse()
+  }
+
+  @Test
+  fun isNewArchEnabled_withRNVersion1000_returnFalse() {
+    val project = createProject()
+    val extension = TestReactExtension(project)
+    File(tempFolder.root, "package.json").apply {
+      writeText(
+          // language=json
+          """
+      {
+        "version": "1000.0.0"
+      }
+      """
+              .trimIndent())
+    }
+    extension.reactNativeDir.set(tempFolder.root)
+    assertThat(project.isNewArchEnabled(extension)).isFalse()
+  }
+
+  @Test
+  fun isHermesEnabled_returnsTrueByDefault() {
+    assertThat(createProject().isHermesEnabled).isTrue()
+  }
+
+  @Test
+  fun isNewArchEnabled_withDisabledViaProperty_returnsFalse() {
+    val project = createProject()
+    project.extensions.extraProperties.set("hermesEnabled", "false")
+    assertThat(project.isHermesEnabled).isFalse()
+  }
+
+  @Test
+  fun isHermesEnabled_withEnabledViaProperty_returnsTrue() {
+    val project = createProject()
+    project.extensions.extraProperties.set("hermesEnabled", "true")
+    assertThat(project.isHermesEnabled).isTrue()
+  }
+
+  @Test
+  fun isHermesEnabled_withInvalidViaProperty_returnsTrue() {
+    val project = createProject()
+    project.extensions.extraProperties.set("hermesEnabled", "¯\\_(ツ)_/¯")
+    assertThat(project.isHermesEnabled).isTrue()
+  }
+
+  @Test
+  fun isHermesEnabled_withDisabledViaExt_returnsFalse() {
+    val project = createProject()
+    val extMap = mapOf("enableHermes" to false)
+    project.extensions.extraProperties.set("react", extMap)
+    assertThat(project.isHermesEnabled).isFalse()
+  }
+
+  @Test
+  fun isHermesEnabled_withEnabledViaExt_returnsTrue() {
+    val project = createProject()
+    val extMap = mapOf("enableHermes" to true)
+    project.extensions.extraProperties.set("react", extMap)
+    assertThat(project.isHermesEnabled).isTrue()
+  }
+
+  @Test
+  fun isHermesEnabled_withDisabledViaExtAsString_returnsFalse() {
+    val project = createProject()
+    val extMap = mapOf("enableHermes" to "false")
+    project.extensions.extraProperties.set("react", extMap)
+    assertThat(project.isHermesEnabled).isFalse()
+  }
+
+  @Test
+  fun isHermesEnabled_withInvalidViaExt_returnsTrue() {
+    val project = createProject()
+    val extMap = mapOf("enableHermes" to "¯\\_(ツ)_/¯")
+    project.extensions.extraProperties.set("react", extMap)
+    assertThat(project.isHermesEnabled).isTrue()
+  }
+
+  @Test
+  fun needsCodegenFromPackageJson_withCodegenConfigInPackageJson_returnsTrue() {
+    val project = createProject()
+    val extension = TestReactExtension(project)
+    File(tempFolder.root, "package.json").apply {
+      writeText(
+          // language=json
+          """
+      {
+        "name": "a-library",
+        "codegenConfig": {}
+      }
+      """
+              .trimIndent())
+    }
+    extension.root.set(tempFolder.root)
+    assertThat(project.needsCodegenFromPackageJson(extension.root)).isTrue()
+  }
+
+  @Test
+  fun needsCodegenFromPackageJson_withMissingCodegenConfigInPackageJson_returnsFalse() {
+    val project = createProject()
+    val extension = TestReactExtension(project)
+    File(tempFolder.root, "package.json").apply {
+      writeText(
+          // language=json
+          """
+      {
+        "name": "a-library"
+      }
+      """
+              .trimIndent())
+    }
+    extension.root.set(tempFolder.root)
+    assertThat(project.needsCodegenFromPackageJson(extension.root)).isFalse()
+  }
+
+  @Test
+  fun needsCodegenFromPackageJson_withCodegenConfigInModel_returnsTrue() {
+    val project = createProject()
+    val model = ModelPackageJson("1000.0.0", ModelCodegenConfig(null, null, null, null, false))
+
+    assertThat(project.needsCodegenFromPackageJson(model)).isTrue()
+  }
+
+  @Test
+  fun needsCodegenFromPackageJson_withMissingCodegenConfigInModel_returnsFalse() {
+    val project = createProject()
+    val model = ModelPackageJson("1000.0.0", null)
+
+    assertThat(project.needsCodegenFromPackageJson(model)).isFalse()
+  }
+
+  @Test
+  fun needsCodegenFromPackageJson_withMissingPackageJson_returnsFalse() {
+    val project = createProject()
+    val extension = TestReactExtension(project)
+
+    assertThat(project.needsCodegenFromPackageJson(extension.root)).isFalse()
+  }
+
+  @Test
+  fun getReactNativeArchitectures_withMissingProperty_returnsEmptyList() {
+    val project = createProject()
+    assertThat(project.getReactNativeArchitectures().isEmpty()).isTrue()
+  }
+
+  @Test
+  fun getReactNativeArchitectures_withEmptyProperty_returnsEmptyList() {
+    val project = createProject()
+    project.extensions.extraProperties.set("reactNativeArchitectures", "")
+    assertThat(project.getReactNativeArchitectures().isEmpty()).isTrue()
+  }
+
+  @Test
+  fun getReactNativeArchitectures_withSingleArch_returnsSingleton() {
+    val project = createProject()
+    project.extensions.extraProperties.set("reactNativeArchitectures", "x86")
+
+    val archs = project.getReactNativeArchitectures()
+    assertThat(archs.size).isEqualTo(1)
+    assertThat(archs[0]).isEqualTo("x86")
+  }
+
+  @Test
+  fun getReactNativeArchitectures_withMultipleArch_returnsList() {
+    val project = createProject()
+    project.extensions.extraProperties.set(
+        "reactNativeArchitectures", "armeabi-v7a,arm64-v8a,x86,x86_64")
+
+    val archs = project.getReactNativeArchitectures()
+    assertThat(archs.size).isEqualTo(4)
+    assertThat(archs[0]).isEqualTo("armeabi-v7a")
+    assertThat(archs[1]).isEqualTo("arm64-v8a")
+    assertThat(archs[2]).isEqualTo("x86")
+    assertThat(archs[3]).isEqualTo("x86_64")
+  }
+}
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build.gradle.kts b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build.gradle.kts
index 022f60c..d0b1376 100644
--- a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build.gradle.kts
+++ b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build.gradle.kts
@@ -66,8 +66,8 @@ tasks.withType<KotlinCompile>().configureEach {
     apiVersion.set(KotlinVersion.KOTLIN_1_7)
     // See comment above on JDK 11 support
     jvmTarget.set(JvmTarget.JVM_11)
-    allWarningsAsErrors =
-        project.properties["enableWarningsAsErrors"]?.toString()?.toBoolean() ?: false
+    allWarningsAsErrors.set(
+        project.properties["enableWarningsAsErrors"]?.toString()?.toBoolean() ?: false)
   }
 }
 
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/classes/kotlin/main/META-INF/react-native-gradle-plugin.kotlin_module b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/classes/kotlin/main/META-INF/react-native-gradle-plugin.kotlin_module
new file mode 100644
index 0000000..e46b991
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/classes/kotlin/main/META-INF/react-native-gradle-plugin.kotlin_module differ
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/classes/kotlin/main/com/facebook/react/ReactExtension$Companion.class b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/classes/kotlin/main/com/facebook/react/ReactExtension$Companion.class
new file mode 100644
index 0000000..dfeeaec
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/classes/kotlin/main/com/facebook/react/ReactExtension$Companion.class differ
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/classes/kotlin/main/com/facebook/react/ReactExtension.class b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/classes/kotlin/main/com/facebook/react/ReactExtension.class
new file mode 100644
index 0000000..f0d78db
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/classes/kotlin/main/com/facebook/react/ReactExtension.class differ
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/classes/kotlin/main/com/facebook/react/ReactPlugin$apply$1$2$1.class b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/classes/kotlin/main/com/facebook/react/ReactPlugin$apply$1$2$1.class
new file mode 100644
index 0000000..8ab0571
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/classes/kotlin/main/com/facebook/react/ReactPlugin$apply$1$2$1.class differ
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/classes/kotlin/main/com/facebook/react/ReactPlugin$configureAutolinking$1$1.class b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/classes/kotlin/main/com/facebook/react/ReactPlugin$configureAutolinking$1$1.class
new file mode 100644
index 0000000..dfacf0b
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/classes/kotlin/main/com/facebook/react/ReactPlugin$configureAutolinking$1$1.class differ
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/classes/kotlin/main/com/facebook/react/ReactPlugin$configureCodegen$1.class b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/classes/kotlin/main/com/facebook/react/ReactPlugin$configureCodegen$1.class
new file mode 100644
index 0000000..5b1d3b5
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/classes/kotlin/main/com/facebook/react/ReactPlugin$configureCodegen$1.class differ
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/classes/kotlin/main/com/facebook/react/ReactPlugin$configureResources$1.class b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/classes/kotlin/main/com/facebook/react/ReactPlugin$configureResources$1.class
new file mode 100644
index 0000000..1192d80
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/classes/kotlin/main/com/facebook/react/ReactPlugin$configureResources$1.class differ
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/classes/kotlin/main/com/facebook/react/ReactPlugin.class b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/classes/kotlin/main/com/facebook/react/ReactPlugin.class
new file mode 100644
index 0000000..deff5a1
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/classes/kotlin/main/com/facebook/react/ReactPlugin.class differ
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/classes/kotlin/main/com/facebook/react/ReactRootProjectPlugin.class b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/classes/kotlin/main/com/facebook/react/ReactRootProjectPlugin.class
new file mode 100644
index 0000000..2c412c4
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/classes/kotlin/main/com/facebook/react/ReactRootProjectPlugin.class differ
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/classes/kotlin/main/com/facebook/react/TaskConfigurationKt$configureReactTasks$1.class b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/classes/kotlin/main/com/facebook/react/TaskConfigurationKt$configureReactTasks$1.class
new file mode 100644
index 0000000..015eb9d
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/classes/kotlin/main/com/facebook/react/TaskConfigurationKt$configureReactTasks$1.class differ
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/classes/kotlin/main/com/facebook/react/TaskConfigurationKt$configureReactTasks$2.class b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/classes/kotlin/main/com/facebook/react/TaskConfigurationKt$configureReactTasks$2.class
new file mode 100644
index 0000000..1dec0d4
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/classes/kotlin/main/com/facebook/react/TaskConfigurationKt$configureReactTasks$2.class differ
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/classes/kotlin/main/com/facebook/react/TaskConfigurationKt.class b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/classes/kotlin/main/com/facebook/react/TaskConfigurationKt.class
new file mode 100644
index 0000000..9587a9b
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/classes/kotlin/main/com/facebook/react/TaskConfigurationKt.class differ
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/classes/kotlin/main/com/facebook/react/internal/PrivateReactExtension.class b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/classes/kotlin/main/com/facebook/react/internal/PrivateReactExtension.class
new file mode 100644
index 0000000..2ed8599
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/classes/kotlin/main/com/facebook/react/internal/PrivateReactExtension.class differ
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/classes/kotlin/main/com/facebook/react/tasks/BundleHermesCTask.class b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/classes/kotlin/main/com/facebook/react/tasks/BundleHermesCTask.class
new file mode 100644
index 0000000..3769eb0
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/classes/kotlin/main/com/facebook/react/tasks/BundleHermesCTask.class differ
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/classes/kotlin/main/com/facebook/react/tasks/GenerateAutolinkingNewArchitecturesFileTask$Companion.class b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/classes/kotlin/main/com/facebook/react/tasks/GenerateAutolinkingNewArchitecturesFileTask$Companion.class
new file mode 100644
index 0000000..a705ea9
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/classes/kotlin/main/com/facebook/react/tasks/GenerateAutolinkingNewArchitecturesFileTask$Companion.class differ
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/classes/kotlin/main/com/facebook/react/tasks/GenerateAutolinkingNewArchitecturesFileTask.class b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/classes/kotlin/main/com/facebook/react/tasks/GenerateAutolinkingNewArchitecturesFileTask.class
new file mode 100644
index 0000000..ae05d8a
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/classes/kotlin/main/com/facebook/react/tasks/GenerateAutolinkingNewArchitecturesFileTask.class differ
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/classes/kotlin/main/com/facebook/react/tasks/GenerateCodegenArtifactsTask.class b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/classes/kotlin/main/com/facebook/react/tasks/GenerateCodegenArtifactsTask.class
new file mode 100644
index 0000000..6b99e01
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/classes/kotlin/main/com/facebook/react/tasks/GenerateCodegenArtifactsTask.class differ
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/classes/kotlin/main/com/facebook/react/tasks/GenerateCodegenSchemaTask.class b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/classes/kotlin/main/com/facebook/react/tasks/GenerateCodegenSchemaTask.class
new file mode 100644
index 0000000..562aa3b
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/classes/kotlin/main/com/facebook/react/tasks/GenerateCodegenSchemaTask.class differ
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/classes/kotlin/main/com/facebook/react/tasks/GeneratePackageListTask$Companion.class b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/classes/kotlin/main/com/facebook/react/tasks/GeneratePackageListTask$Companion.class
new file mode 100644
index 0000000..c29e629
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/classes/kotlin/main/com/facebook/react/tasks/GeneratePackageListTask$Companion.class differ
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/classes/kotlin/main/com/facebook/react/tasks/GeneratePackageListTask.class b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/classes/kotlin/main/com/facebook/react/tasks/GeneratePackageListTask.class
new file mode 100644
index 0000000..254f4dd
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/classes/kotlin/main/com/facebook/react/tasks/GeneratePackageListTask.class differ
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/classes/kotlin/main/com/facebook/react/tasks/internal/BuildCodegenCLITask$Companion.class b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/classes/kotlin/main/com/facebook/react/tasks/internal/BuildCodegenCLITask$Companion.class
new file mode 100644
index 0000000..c348690
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/classes/kotlin/main/com/facebook/react/tasks/internal/BuildCodegenCLITask$Companion.class differ
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/classes/kotlin/main/com/facebook/react/tasks/internal/BuildCodegenCLITask.class b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/classes/kotlin/main/com/facebook/react/tasks/internal/BuildCodegenCLITask.class
new file mode 100644
index 0000000..2ae13fa
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/classes/kotlin/main/com/facebook/react/tasks/internal/BuildCodegenCLITask.class differ
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/classes/kotlin/main/com/facebook/react/tasks/internal/CustomExecTask.class b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/classes/kotlin/main/com/facebook/react/tasks/internal/CustomExecTask.class
new file mode 100644
index 0000000..e84b247
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/classes/kotlin/main/com/facebook/react/tasks/internal/CustomExecTask.class differ
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/classes/kotlin/main/com/facebook/react/tasks/internal/PrepareBoostTask.class b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/classes/kotlin/main/com/facebook/react/tasks/internal/PrepareBoostTask.class
new file mode 100644
index 0000000..41bc767
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/classes/kotlin/main/com/facebook/react/tasks/internal/PrepareBoostTask.class differ
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/classes/kotlin/main/com/facebook/react/tasks/internal/PrepareGlogTask.class b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/classes/kotlin/main/com/facebook/react/tasks/internal/PrepareGlogTask.class
new file mode 100644
index 0000000..2dd8374
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/classes/kotlin/main/com/facebook/react/tasks/internal/PrepareGlogTask.class differ
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/classes/kotlin/main/com/facebook/react/tasks/internal/PreparePrefabHeadersTask.class b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/classes/kotlin/main/com/facebook/react/tasks/internal/PreparePrefabHeadersTask.class
new file mode 100644
index 0000000..d03a05a
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/classes/kotlin/main/com/facebook/react/tasks/internal/PreparePrefabHeadersTask.class differ
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/classes/kotlin/main/com/facebook/react/tasks/internal/utils/PrefabPreprocessingEntry.class b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/classes/kotlin/main/com/facebook/react/tasks/internal/utils/PrefabPreprocessingEntry.class
new file mode 100644
index 0000000..d28260f
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/classes/kotlin/main/com/facebook/react/tasks/internal/utils/PrefabPreprocessingEntry.class differ
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/classes/kotlin/main/com/facebook/react/utils/AgpConfiguratorUtils$configureBuildConfigFieldsForApp$action$1$1.class b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/classes/kotlin/main/com/facebook/react/utils/AgpConfiguratorUtils$configureBuildConfigFieldsForApp$action$1$1.class
new file mode 100644
index 0000000..3072769
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/classes/kotlin/main/com/facebook/react/utils/AgpConfiguratorUtils$configureBuildConfigFieldsForApp$action$1$1.class differ
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/classes/kotlin/main/com/facebook/react/utils/AgpConfiguratorUtils$configureBuildConfigFieldsForLibraries$1$1$1.class b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/classes/kotlin/main/com/facebook/react/utils/AgpConfiguratorUtils$configureBuildConfigFieldsForLibraries$1$1$1.class
new file mode 100644
index 0000000..0b40f28
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/classes/kotlin/main/com/facebook/react/utils/AgpConfiguratorUtils$configureBuildConfigFieldsForLibraries$1$1$1.class differ
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/classes/kotlin/main/com/facebook/react/utils/AgpConfiguratorUtils$configureDevPorts$action$1$1.class b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/classes/kotlin/main/com/facebook/react/utils/AgpConfiguratorUtils$configureDevPorts$action$1$1.class
new file mode 100644
index 0000000..45f8636
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/classes/kotlin/main/com/facebook/react/utils/AgpConfiguratorUtils$configureDevPorts$action$1$1.class differ
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/classes/kotlin/main/com/facebook/react/utils/AgpConfiguratorUtils$configureNamespaceForLibraries$1$1$1.class b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/classes/kotlin/main/com/facebook/react/utils/AgpConfiguratorUtils$configureNamespaceForLibraries$1$1$1.class
new file mode 100644
index 0000000..4905ada
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/classes/kotlin/main/com/facebook/react/utils/AgpConfiguratorUtils$configureNamespaceForLibraries$1$1$1.class differ
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/classes/kotlin/main/com/facebook/react/utils/AgpConfiguratorUtils.class b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/classes/kotlin/main/com/facebook/react/utils/AgpConfiguratorUtils.class
new file mode 100644
index 0000000..ef7bb4b
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/classes/kotlin/main/com/facebook/react/utils/AgpConfiguratorUtils.class differ
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/classes/kotlin/main/com/facebook/react/utils/AgpConfiguratorUtilsKt.class b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/classes/kotlin/main/com/facebook/react/utils/AgpConfiguratorUtilsKt.class
new file mode 100644
index 0000000..eebd68c
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/classes/kotlin/main/com/facebook/react/utils/AgpConfiguratorUtilsKt.class differ
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/classes/kotlin/main/com/facebook/react/utils/BackwardCompatUtils.class b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/classes/kotlin/main/com/facebook/react/utils/BackwardCompatUtils.class
new file mode 100644
index 0000000..b8b78b8
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/classes/kotlin/main/com/facebook/react/utils/BackwardCompatUtils.class differ
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/classes/kotlin/main/com/facebook/react/utils/DependencyUtils.class b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/classes/kotlin/main/com/facebook/react/utils/DependencyUtils.class
new file mode 100644
index 0000000..5459b1e
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/classes/kotlin/main/com/facebook/react/utils/DependencyUtils.class differ
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/classes/kotlin/main/com/facebook/react/utils/FileUtilsKt.class b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/classes/kotlin/main/com/facebook/react/utils/FileUtilsKt.class
new file mode 100644
index 0000000..d1326ac
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/classes/kotlin/main/com/facebook/react/utils/FileUtilsKt.class differ
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/classes/kotlin/main/com/facebook/react/utils/JdkConfiguratorUtils$configureJavaToolChains$1$action$1$1.class b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/classes/kotlin/main/com/facebook/react/utils/JdkConfiguratorUtils$configureJavaToolChains$1$action$1$1.class
new file mode 100644
index 0000000..1da30cb
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/classes/kotlin/main/com/facebook/react/utils/JdkConfiguratorUtils$configureJavaToolChains$1$action$1$1.class differ
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/classes/kotlin/main/com/facebook/react/utils/JdkConfiguratorUtils.class b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/classes/kotlin/main/com/facebook/react/utils/JdkConfiguratorUtils.class
new file mode 100644
index 0000000..86ed8a7
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/classes/kotlin/main/com/facebook/react/utils/JdkConfiguratorUtils.class differ
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/classes/kotlin/main/com/facebook/react/utils/NdkConfiguratorUtils$configureReactNativeNdk$1$1.class b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/classes/kotlin/main/com/facebook/react/utils/NdkConfiguratorUtils$configureReactNativeNdk$1$1.class
new file mode 100644
index 0000000..ba01e40
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/classes/kotlin/main/com/facebook/react/utils/NdkConfiguratorUtils$configureReactNativeNdk$1$1.class differ
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/classes/kotlin/main/com/facebook/react/utils/NdkConfiguratorUtils.class b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/classes/kotlin/main/com/facebook/react/utils/NdkConfiguratorUtils.class
new file mode 100644
index 0000000..9a9c890
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/classes/kotlin/main/com/facebook/react/utils/NdkConfiguratorUtils.class differ
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/classes/kotlin/main/com/facebook/react/utils/PathUtils.class b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/classes/kotlin/main/com/facebook/react/utils/PathUtils.class
new file mode 100644
index 0000000..741b5d9
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/classes/kotlin/main/com/facebook/react/utils/PathUtils.class differ
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/classes/kotlin/main/com/facebook/react/utils/ProjectUtils.class b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/classes/kotlin/main/com/facebook/react/utils/ProjectUtils.class
new file mode 100644
index 0000000..ce9c2bc
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/classes/kotlin/main/com/facebook/react/utils/ProjectUtils.class differ
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/classes/kotlin/main/com/facebook/react/utils/PropertyUtils.class b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/classes/kotlin/main/com/facebook/react/utils/PropertyUtils.class
new file mode 100644
index 0000000..bd248c4
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/classes/kotlin/main/com/facebook/react/utils/PropertyUtils.class differ
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/inputs/source-to-output.tab b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/inputs/source-to-output.tab
new file mode 100644
index 0000000..91437d1
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/inputs/source-to-output.tab differ
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/inputs/source-to-output.tab.keystream b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/inputs/source-to-output.tab.keystream
new file mode 100644
index 0000000..00b445d
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/inputs/source-to-output.tab.keystream differ
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/inputs/source-to-output.tab.keystream.len b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/inputs/source-to-output.tab.keystream.len
new file mode 100644
index 0000000..9576b41
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/inputs/source-to-output.tab.keystream.len differ
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/inputs/source-to-output.tab.len b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/inputs/source-to-output.tab.len
new file mode 100644
index 0000000..42df8b9
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/inputs/source-to-output.tab.len differ
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/inputs/source-to-output.tab.values.at b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/inputs/source-to-output.tab.values.at
new file mode 100644
index 0000000..2b666f2
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/inputs/source-to-output.tab.values.at differ
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/inputs/source-to-output.tab_i b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/inputs/source-to-output.tab_i
new file mode 100644
index 0000000..9d79cea
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/inputs/source-to-output.tab_i differ
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/inputs/source-to-output.tab_i.len b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/inputs/source-to-output.tab_i.len
new file mode 100644
index 0000000..131e265
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/inputs/source-to-output.tab_i.len differ
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/class-attributes.tab b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/class-attributes.tab
new file mode 100644
index 0000000..d09fdbb
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/class-attributes.tab differ
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/class-attributes.tab.keystream b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/class-attributes.tab.keystream
new file mode 100644
index 0000000..4b442b1
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/class-attributes.tab.keystream differ
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/class-attributes.tab.keystream.len b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/class-attributes.tab.keystream.len
new file mode 100644
index 0000000..a5181be
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/class-attributes.tab.keystream.len differ
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/class-attributes.tab.len b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/class-attributes.tab.len
new file mode 100644
index 0000000..be9fd94
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/class-attributes.tab.len differ
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/class-attributes.tab.values.at b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/class-attributes.tab.values.at
new file mode 100644
index 0000000..bc475fb
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/class-attributes.tab.values.at differ
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/class-attributes.tab_i b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/class-attributes.tab_i
new file mode 100644
index 0000000..92b8ad4
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/class-attributes.tab_i differ
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/class-attributes.tab_i.len b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/class-attributes.tab_i.len
new file mode 100644
index 0000000..131e265
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/class-attributes.tab_i.len differ
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/class-fq-name-to-source.tab b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/class-fq-name-to-source.tab
new file mode 100644
index 0000000..eb493d2
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/class-fq-name-to-source.tab differ
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/class-fq-name-to-source.tab.keystream b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/class-fq-name-to-source.tab.keystream
new file mode 100644
index 0000000..4b442b1
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/class-fq-name-to-source.tab.keystream differ
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/class-fq-name-to-source.tab.keystream.len b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/class-fq-name-to-source.tab.keystream.len
new file mode 100644
index 0000000..a5181be
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/class-fq-name-to-source.tab.keystream.len differ
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/class-fq-name-to-source.tab.len b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/class-fq-name-to-source.tab.len
new file mode 100644
index 0000000..be9fd94
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/class-fq-name-to-source.tab.len differ
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/class-fq-name-to-source.tab.values.at b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/class-fq-name-to-source.tab.values.at
new file mode 100644
index 0000000..7558bfa
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/class-fq-name-to-source.tab.values.at differ
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/class-fq-name-to-source.tab_i b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/class-fq-name-to-source.tab_i
new file mode 100644
index 0000000..92b8ad4
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/class-fq-name-to-source.tab_i differ
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/class-fq-name-to-source.tab_i.len b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/class-fq-name-to-source.tab_i.len
new file mode 100644
index 0000000..131e265
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/class-fq-name-to-source.tab_i.len differ
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/constants.tab b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/constants.tab
new file mode 100644
index 0000000..76cd5fd
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/constants.tab differ
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/constants.tab.keystream b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/constants.tab.keystream
new file mode 100644
index 0000000..555131c
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/constants.tab.keystream differ
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/constants.tab.keystream.len b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/constants.tab.keystream.len
new file mode 100644
index 0000000..b94f48d
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/constants.tab.keystream.len differ
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/constants.tab.len b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/constants.tab.len
new file mode 100644
index 0000000..ec8f944
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/constants.tab.len differ
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/constants.tab.values.at b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/constants.tab.values.at
new file mode 100644
index 0000000..0f759ca
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/constants.tab.values.at differ
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/constants.tab_i b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/constants.tab_i
new file mode 100644
index 0000000..f5f38da
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/constants.tab_i differ
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/constants.tab_i.len b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/constants.tab_i.len
new file mode 100644
index 0000000..131e265
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/constants.tab_i.len differ
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/internal-name-to-source.tab b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/internal-name-to-source.tab
new file mode 100644
index 0000000..9c9fce8
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/internal-name-to-source.tab differ
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/internal-name-to-source.tab.keystream b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/internal-name-to-source.tab.keystream
new file mode 100644
index 0000000..a05ca33
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/internal-name-to-source.tab.keystream differ
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/internal-name-to-source.tab.keystream.len b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/internal-name-to-source.tab.keystream.len
new file mode 100644
index 0000000..b41acb9
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/internal-name-to-source.tab.keystream.len differ
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/internal-name-to-source.tab.len b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/internal-name-to-source.tab.len
new file mode 100644
index 0000000..709f734
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/internal-name-to-source.tab.len differ
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/internal-name-to-source.tab.values.at b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/internal-name-to-source.tab.values.at
new file mode 100644
index 0000000..ec44b07
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/internal-name-to-source.tab.values.at differ
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/internal-name-to-source.tab_i b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/internal-name-to-source.tab_i
new file mode 100644
index 0000000..0ccfd4e
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/internal-name-to-source.tab_i differ
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/internal-name-to-source.tab_i.len b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/internal-name-to-source.tab_i.len
new file mode 100644
index 0000000..131e265
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/internal-name-to-source.tab_i.len differ
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/package-parts.tab b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/package-parts.tab
new file mode 100644
index 0000000..cc7a873
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/package-parts.tab differ
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/package-parts.tab.keystream b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/package-parts.tab.keystream
new file mode 100644
index 0000000..44f8f72
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/package-parts.tab.keystream differ
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/package-parts.tab.keystream.len b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/package-parts.tab.keystream.len
new file mode 100644
index 0000000..b9cfb12
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/package-parts.tab.keystream.len differ
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/package-parts.tab.len b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/package-parts.tab.len
new file mode 100644
index 0000000..93a595b
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/package-parts.tab.len differ
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/package-parts.tab.values.at b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/package-parts.tab.values.at
new file mode 100644
index 0000000..1d49f50
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/package-parts.tab.values.at differ
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/package-parts.tab_i b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/package-parts.tab_i
new file mode 100644
index 0000000..1de6f22
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/package-parts.tab_i differ
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/package-parts.tab_i.len b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/package-parts.tab_i.len
new file mode 100644
index 0000000..131e265
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/package-parts.tab_i.len differ
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/proto.tab b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/proto.tab
new file mode 100644
index 0000000..ccee23e
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/proto.tab differ
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/proto.tab.keystream b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/proto.tab.keystream
new file mode 100644
index 0000000..1c03832
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/proto.tab.keystream differ
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/proto.tab.keystream.len b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/proto.tab.keystream.len
new file mode 100644
index 0000000..bbf9106
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/proto.tab.keystream.len differ
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/proto.tab.len b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/proto.tab.len
new file mode 100644
index 0000000..3085af4
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/proto.tab.len differ
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/proto.tab.values.at b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/proto.tab.values.at
new file mode 100644
index 0000000..84adaba
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/proto.tab.values.at differ
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/proto.tab_i b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/proto.tab_i
new file mode 100644
index 0000000..54a3664
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/proto.tab_i differ
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/proto.tab_i.len b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/proto.tab_i.len
new file mode 100644
index 0000000..131e265
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/proto.tab_i.len differ
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/source-to-classes.tab b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/source-to-classes.tab
new file mode 100644
index 0000000..d69d2e0
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/source-to-classes.tab differ
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/source-to-classes.tab.keystream b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/source-to-classes.tab.keystream
new file mode 100644
index 0000000..00b445d
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/source-to-classes.tab.keystream differ
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/source-to-classes.tab.keystream.len b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/source-to-classes.tab.keystream.len
new file mode 100644
index 0000000..9576b41
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/source-to-classes.tab.keystream.len differ
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/source-to-classes.tab.len b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/source-to-classes.tab.len
new file mode 100644
index 0000000..42df8b9
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/source-to-classes.tab.len differ
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/source-to-classes.tab.values.at b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/source-to-classes.tab.values.at
new file mode 100644
index 0000000..965d7eb
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/source-to-classes.tab.values.at differ
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/source-to-classes.tab_i b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/source-to-classes.tab_i
new file mode 100644
index 0000000..9d79cea
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/source-to-classes.tab_i differ
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/source-to-classes.tab_i.len b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/source-to-classes.tab_i.len
new file mode 100644
index 0000000..131e265
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/source-to-classes.tab_i.len differ
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/subtypes.tab b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/subtypes.tab
new file mode 100644
index 0000000..7c3bea4
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/subtypes.tab differ
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/subtypes.tab.keystream b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/subtypes.tab.keystream
new file mode 100644
index 0000000..9d1ff5f
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/subtypes.tab.keystream differ
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/subtypes.tab.keystream.len b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/subtypes.tab.keystream.len
new file mode 100644
index 0000000..2409504
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/subtypes.tab.keystream.len differ
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/subtypes.tab.len b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/subtypes.tab.len
new file mode 100644
index 0000000..93a595b
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/subtypes.tab.len differ
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/subtypes.tab.values.at b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/subtypes.tab.values.at
new file mode 100644
index 0000000..57ed1fc
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/subtypes.tab.values.at differ
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/subtypes.tab_i b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/subtypes.tab_i
new file mode 100644
index 0000000..a92d029
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/subtypes.tab_i differ
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/subtypes.tab_i.len b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/subtypes.tab_i.len
new file mode 100644
index 0000000..131e265
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/subtypes.tab_i.len differ
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/supertypes.tab b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/supertypes.tab
new file mode 100644
index 0000000..343a0ec
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/supertypes.tab differ
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/supertypes.tab.keystream b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/supertypes.tab.keystream
new file mode 100644
index 0000000..20169fb
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/supertypes.tab.keystream differ
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/supertypes.tab.keystream.len b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/supertypes.tab.keystream.len
new file mode 100644
index 0000000..29168a0
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/supertypes.tab.keystream.len differ
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/supertypes.tab.len b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/supertypes.tab.len
new file mode 100644
index 0000000..6f677df
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/supertypes.tab.len differ
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/supertypes.tab.values.at b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/supertypes.tab.values.at
new file mode 100644
index 0000000..7087b98
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/supertypes.tab.values.at differ
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/supertypes.tab_i b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/supertypes.tab_i
new file mode 100644
index 0000000..dfa5272
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/supertypes.tab_i differ
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/supertypes.tab_i.len b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/supertypes.tab_i.len
new file mode 100644
index 0000000..131e265
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/supertypes.tab_i.len differ
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/counters.tab b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/counters.tab
new file mode 100644
index 0000000..1911a39
--- /dev/null
+++ b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/counters.tab
@@ -0,0 +1,2 @@
+25
+0
\ No newline at end of file
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/file-to-id.tab b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/file-to-id.tab
new file mode 100644
index 0000000..d2a8fea
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/file-to-id.tab differ
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/file-to-id.tab.keystream b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/file-to-id.tab.keystream
new file mode 100644
index 0000000..00b445d
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/file-to-id.tab.keystream differ
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/file-to-id.tab.keystream.len b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/file-to-id.tab.keystream.len
new file mode 100644
index 0000000..9576b41
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/file-to-id.tab.keystream.len differ
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/file-to-id.tab.len b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/file-to-id.tab.len
new file mode 100644
index 0000000..42df8b9
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/file-to-id.tab.len differ
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/file-to-id.tab.values.at b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/file-to-id.tab.values.at
new file mode 100644
index 0000000..ae69ecd
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/file-to-id.tab.values.at differ
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/file-to-id.tab_i b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/file-to-id.tab_i
new file mode 100644
index 0000000..9d79cea
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/file-to-id.tab_i differ
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/file-to-id.tab_i.len b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/file-to-id.tab_i.len
new file mode 100644
index 0000000..131e265
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/file-to-id.tab_i.len differ
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/id-to-file.tab b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/id-to-file.tab
new file mode 100644
index 0000000..5f9754a
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/id-to-file.tab differ
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/id-to-file.tab.keystream b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/id-to-file.tab.keystream
new file mode 100644
index 0000000..9a50599
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/id-to-file.tab.keystream differ
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/id-to-file.tab.keystream.len b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/id-to-file.tab.keystream.len
new file mode 100644
index 0000000..1df5122
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/id-to-file.tab.keystream.len differ
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/id-to-file.tab.len b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/id-to-file.tab.len
new file mode 100644
index 0000000..42df8b9
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/id-to-file.tab.len differ
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/id-to-file.tab.values.at b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/id-to-file.tab.values.at
new file mode 100644
index 0000000..d590623
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/id-to-file.tab.values.at differ
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/id-to-file.tab_i b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/id-to-file.tab_i
new file mode 100644
index 0000000..ea39692
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/id-to-file.tab_i differ
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/id-to-file.tab_i.len b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/id-to-file.tab_i.len
new file mode 100644
index 0000000..131e265
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/id-to-file.tab_i.len differ
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/lookups.tab b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/lookups.tab
new file mode 100644
index 0000000..44522c4
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/lookups.tab differ
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/lookups.tab.keystream b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/lookups.tab.keystream
new file mode 100644
index 0000000..17a16b1
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/lookups.tab.keystream differ
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/lookups.tab.keystream.len b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/lookups.tab.keystream.len
new file mode 100644
index 0000000..19d36c4
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/lookups.tab.keystream.len differ
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/lookups.tab.len b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/lookups.tab.len
new file mode 100644
index 0000000..4f2f226
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/lookups.tab.len differ
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/lookups.tab.values.at b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/lookups.tab.values.at
new file mode 100644
index 0000000..a3dc776
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/lookups.tab.values.at differ
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/lookups.tab_i b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/lookups.tab_i
new file mode 100644
index 0000000..ed5b505
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/lookups.tab_i differ
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/lookups.tab_i.len b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/lookups.tab_i.len
new file mode 100644
index 0000000..131e265
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/lookups.tab_i.len differ
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/last-build.bin b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/last-build.bin
new file mode 100644
index 0000000..2bb3756
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/cacheable/last-build.bin differ
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/classpath-snapshot/shrunk-classpath-snapshot.bin b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/classpath-snapshot/shrunk-classpath-snapshot.bin
new file mode 100644
index 0000000..1361a6a
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/classpath-snapshot/shrunk-classpath-snapshot.bin differ
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/local-state/build-history.bin b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/local-state/build-history.bin
new file mode 100644
index 0000000..11bb54e
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/kotlin/compileKotlin/local-state/build-history.bin differ
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/libs/react-native-gradle-plugin.jar b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/libs/react-native-gradle-plugin.jar
new file mode 100644
index 0000000..47b51f5
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/libs/react-native-gradle-plugin.jar differ
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/pluginDescriptors/com.facebook.react.properties b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/pluginDescriptors/com.facebook.react.properties
new file mode 100644
index 0000000..f3b415e
--- /dev/null
+++ b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/pluginDescriptors/com.facebook.react.properties
@@ -0,0 +1 @@
+implementation-class=com.facebook.react.ReactPlugin
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/pluginDescriptors/com.facebook.react.rootproject.properties b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/pluginDescriptors/com.facebook.react.rootproject.properties
new file mode 100644
index 0000000..f82c5ab
--- /dev/null
+++ b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/pluginDescriptors/com.facebook.react.rootproject.properties
@@ -0,0 +1 @@
+implementation-class=com.facebook.react.ReactRootProjectPlugin
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/resources/main/META-INF/gradle-plugins/com.facebook.react.properties b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/resources/main/META-INF/gradle-plugins/com.facebook.react.properties
new file mode 100644
index 0000000..f3b415e
--- /dev/null
+++ b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/resources/main/META-INF/gradle-plugins/com.facebook.react.properties
@@ -0,0 +1 @@
+implementation-class=com.facebook.react.ReactPlugin
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/resources/main/META-INF/gradle-plugins/com.facebook.react.rootproject.properties b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/resources/main/META-INF/gradle-plugins/com.facebook.react.rootproject.properties
new file mode 100644
index 0000000..f82c5ab
--- /dev/null
+++ b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/resources/main/META-INF/gradle-plugins/com.facebook.react.rootproject.properties
@@ -0,0 +1 @@
+implementation-class=com.facebook.react.ReactRootProjectPlugin
diff --git a/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/tmp/jar/MANIFEST.MF b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/tmp/jar/MANIFEST.MF
new file mode 100644
index 0000000..59499bc
--- /dev/null
+++ b/node_modules/@react-native/gradle-plugin/react-native-gradle-plugin/build/tmp/jar/MANIFEST.MF
@@ -0,0 +1,2 @@
+Manifest-Version: 1.0
+
diff --git a/node_modules/@react-native/gradle-plugin/settings-plugin/.classpath b/node_modules/@react-native/gradle-plugin/settings-plugin/.classpath
new file mode 100644
index 0000000..7c76343
--- /dev/null
+++ b/node_modules/@react-native/gradle-plugin/settings-plugin/.classpath
@@ -0,0 +1,19 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<classpath>
+	<classpathentry kind="src" output="bin/main" path="src/main/kotlin">
+		<attributes>
+			<attribute name="gradle_scope" value="main"/>
+			<attribute name="gradle_used_by_scope" value="main,test"/>
+		</attributes>
+	</classpathentry>
+	<classpathentry kind="src" output="bin/test" path="src/test/kotlin">
+		<attributes>
+			<attribute name="gradle_scope" value="test"/>
+			<attribute name="gradle_used_by_scope" value="test"/>
+			<attribute name="test" value="true"/>
+		</attributes>
+	</classpathentry>
+	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-11/"/>
+	<classpathentry kind="con" path="org.eclipse.buildship.core.gradleclasspathcontainer"/>
+	<classpathentry kind="output" path="bin/default"/>
+</classpath>
diff --git a/node_modules/@react-native/gradle-plugin/settings-plugin/.project b/node_modules/@react-native/gradle-plugin/settings-plugin/.project
new file mode 100644
index 0000000..7d20098
--- /dev/null
+++ b/node_modules/@react-native/gradle-plugin/settings-plugin/.project
@@ -0,0 +1,34 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<projectDescription>
+	<name>settings-plugin</name>
+	<comment>Project settings-plugin created by Buildship.</comment>
+	<projects>
+	</projects>
+	<buildSpec>
+		<buildCommand>
+			<name>org.eclipse.jdt.core.javabuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+		<buildCommand>
+			<name>org.eclipse.buildship.core.gradleprojectbuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+	</buildSpec>
+	<natures>
+		<nature>org.eclipse.jdt.core.javanature</nature>
+		<nature>org.eclipse.buildship.core.gradleprojectnature</nature>
+	</natures>
+	<filteredResources>
+		<filter>
+			<id>1749999528618</id>
+			<name></name>
+			<type>30</type>
+			<matcher>
+				<id>org.eclipse.core.resources.regexFilterMatcher</id>
+				<arguments>node_modules|\.git|__CREATED_BY_JAVA_LANGUAGE_SERVER__</arguments>
+			</matcher>
+		</filter>
+	</filteredResources>
+</projectDescription>
diff --git a/node_modules/@react-native/gradle-plugin/settings-plugin/.settings/org.eclipse.buildship.core.prefs b/node_modules/@react-native/gradle-plugin/settings-plugin/.settings/org.eclipse.buildship.core.prefs
new file mode 100644
index 0000000..68c9fab
--- /dev/null
+++ b/node_modules/@react-native/gradle-plugin/settings-plugin/.settings/org.eclipse.buildship.core.prefs
@@ -0,0 +1,2 @@
+connection.project.dir=../../../../android
+eclipse.preferences.version=1
diff --git a/node_modules/@react-native/gradle-plugin/settings-plugin/.settings/org.eclipse.jdt.core.prefs b/node_modules/@react-native/gradle-plugin/settings-plugin/.settings/org.eclipse.jdt.core.prefs
new file mode 100644
index 0000000..1d52336
--- /dev/null
+++ b/node_modules/@react-native/gradle-plugin/settings-plugin/.settings/org.eclipse.jdt.core.prefs
@@ -0,0 +1,15 @@
+eclipse.preferences.version=1
+org.eclipse.jdt.core.compiler.annotation.missingNonNullByDefaultAnnotation=ignore
+org.eclipse.jdt.core.compiler.annotation.nonnull=javax.annotation.Nonnull
+org.eclipse.jdt.core.compiler.annotation.nonnullbydefault=javax.annotation.ParametersAreNonnullByDefault
+org.eclipse.jdt.core.compiler.annotation.nullable=javax.annotation.Nullable
+org.eclipse.jdt.core.compiler.annotation.nullanalysis=enabled
+org.eclipse.jdt.core.compiler.codegen.targetPlatform=11
+org.eclipse.jdt.core.compiler.compliance=17
+org.eclipse.jdt.core.compiler.problem.nullAnnotationInferenceConflict=warning
+org.eclipse.jdt.core.compiler.problem.nullReference=warning
+org.eclipse.jdt.core.compiler.problem.nullSpecViolation=warning
+org.eclipse.jdt.core.compiler.problem.nullUncheckedConversion=ignore
+org.eclipse.jdt.core.compiler.problem.potentialNullReference=warning
+org.eclipse.jdt.core.compiler.problem.syntacticNullAnalysisForFields=enabled
+org.eclipse.jdt.core.compiler.source=17
diff --git a/node_modules/@react-native/gradle-plugin/settings-plugin/bin/main/com/facebook/react/ReactSettingsExtension.kt b/node_modules/@react-native/gradle-plugin/settings-plugin/bin/main/com/facebook/react/ReactSettingsExtension.kt
new file mode 100644
index 0000000..41ca6c5
--- /dev/null
+++ b/node_modules/@react-native/gradle-plugin/settings-plugin/bin/main/com/facebook/react/ReactSettingsExtension.kt
@@ -0,0 +1,218 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react
+
+import com.facebook.react.model.ModelAutolinkingConfigJson
+import com.facebook.react.utils.JsonUtils
+import com.facebook.react.utils.windowsAwareCommandLine
+import java.io.File
+import java.math.BigInteger
+import java.security.MessageDigest
+import javax.inject.Inject
+import kotlin.math.min
+import org.gradle.api.GradleException
+import org.gradle.api.file.FileCollection
+import org.gradle.api.initialization.Settings
+import org.gradle.api.logging.Logging
+
+abstract class ReactSettingsExtension @Inject constructor(val settings: Settings) {
+
+  private val outputFile =
+      settings.layout.rootDirectory.file("build/generated/autolinking/autolinking.json").asFile
+  private val outputFolder =
+      settings.layout.rootDirectory.file("build/generated/autolinking/").asFile
+
+  private val defaultConfigCommand: List<String> =
+      windowsAwareCommandLine(listOf("npx", "@react-native-community/cli", "config")).map {
+        it.toString()
+      }
+
+  /**
+   * Utility function to autolink libraries using an external command as source of truth.
+   *
+   * This should be invoked inside the `settings.gradle` file, and will make sure the Gradle project
+   * is loading all the discovered libraries.
+   *
+   * @param command The command to execute to get the autolinking configuration. Default is
+   *   `npx @react-native-community/cli config`.
+   * @param workingDirectory The directory where the command should be executed.
+   * @param lockFiles The list of lock files to check for changes (if lockfiles are not changed, the
+   *   command will not be executed).
+   */
+  @JvmOverloads
+  public fun autolinkLibrariesFromCommand(
+      command: List<String> = defaultConfigCommand,
+      workingDirectory: File? = settings.layout.rootDirectory.dir("../").asFile,
+      lockFiles: FileCollection =
+          settings.layout.rootDirectory
+              .dir("../")
+              .files("yarn.lock", "package-lock.json", "package.json", "react-native.config.js")
+  ) {
+    outputFile.parentFile.mkdirs()
+
+    val updateConfig =
+        object : GenerateConfig {
+          override fun command(): List<String> = command
+
+          override fun execute(): Int {
+            val execResult =
+                settings.providers.exec { exec ->
+                  exec.commandLine(command)
+                  exec.workingDir = workingDirectory
+                }
+            outputFile.writeText(execResult.standardOutput.asText.get())
+            return execResult.result.get().exitValue
+          }
+        }
+
+    checkAndUpdateCache(updateConfig, outputFile, outputFolder, lockFiles)
+
+    linkLibraries(getLibrariesToAutolink(outputFile))
+  }
+
+  /**
+   * Utility function to autolink libraries using an external file as source of truth.
+   *
+   * The file should be a JSON file with the same structure as the one generated by the
+   * `npx @react-native-community/cli config` command.
+   *
+   * @param autolinkConfigFile The file to read the autolinking configuration from.
+   */
+  public fun autolinkLibrariesFromConfigFile(
+      autolinkConfigFile: File,
+  ) {
+    // We copy the file to the build directory so that the various Gradle tasks can access it.
+    autolinkConfigFile.copyTo(outputFile, overwrite = true)
+    linkLibraries(getLibrariesToAutolink(autolinkConfigFile))
+  }
+
+  /**
+   * Utility function so that for each tuple :project-name -> project-dir, it instructs Gradle to
+   * lad this extra module.
+   */
+  private fun linkLibraries(input: Map<String, File>) {
+    input.forEach { (path, projectDir) ->
+      settings.include(path)
+      settings.project(path).projectDir = projectDir
+    }
+  }
+
+  internal interface GenerateConfig {
+    fun command(): List<String>
+
+    fun execute(): Int
+  }
+
+  companion object {
+    private val md = MessageDigest.getInstance("SHA-256")
+
+    /**
+     * Determine if our cache is out-of-date
+     *
+     * @param cacheJsonConfig Our current cached autolinking.json config, which may exist
+     * @param cacheFolder The folder we store our cached SHAs and config
+     * @param lockFiles The [FileCollection] of the lockfiles to check.
+     * @return `true` if the cache needs to be rebuilt, `false` otherwise
+     */
+    internal fun isCacheDirty(
+        cacheJsonConfig: File,
+        cacheFolder: File,
+        lockFiles: FileCollection,
+    ): Boolean {
+      if (cacheJsonConfig.exists().not() || cacheJsonConfig.length() == 0L) {
+        return true
+      }
+      val lockFilesChanged = checkAndUpdateLockfiles(lockFiles, cacheFolder)
+      if (lockFilesChanged) {
+        return true
+      }
+      return isConfigModelInvalid(JsonUtils.fromAutolinkingConfigJson(cacheJsonConfig))
+    }
+
+    /**
+     * Utility function to update the settings cache only if it's entries are dirty
+     *
+     * @param updateJsonConfig A [GenerateConfig] to update the project's autolinking config
+     * @param cacheJsonConfig Our current cached autolinking.json config, which may exist
+     * @param cacheFolder The folder we store our cached SHAs and config
+     * @param lockFiles The [FileCollection] of the lockfiles to check.
+     */
+    internal fun checkAndUpdateCache(
+        updateJsonConfig: GenerateConfig,
+        cacheJsonConfig: File,
+        cacheFolder: File,
+        lockFiles: FileCollection,
+    ) {
+      if (isCacheDirty(cacheJsonConfig, cacheFolder, lockFiles)) {
+        val exitValue = updateJsonConfig.execute()
+        if (exitValue != 0) {
+          val prefixCommand =
+              "ERROR: autolinkLibrariesFromCommand: process ${updateJsonConfig.command().joinToString(" ")}"
+          val message = "$prefixCommand exited with error code: $exitValue"
+          val logger = Logging.getLogger("ReactSettingsExtension")
+          logger.error(message)
+          if (cacheJsonConfig.length() != 0L) {
+            logger.error(
+                cacheJsonConfig
+                    .readText()
+                    .substring(0, min(1024, cacheJsonConfig.length().toInt())))
+          }
+          cacheJsonConfig.delete()
+          throw GradleException(message)
+        } else {
+          // If cache was dirty, we executed the command and we need to update the lockfiles sha.
+          checkAndUpdateLockfiles(lockFiles, cacheFolder)
+        }
+      }
+    }
+
+    /**
+     * Utility function to check if the provided lockfiles have been updated or not. This function
+     * will both check and update the lockfiles hashes if necessary.
+     *
+     * @param lockFiles The [FileCollection] of the lockfiles to check.
+     * @param outputFolder The folder where the hashes will be stored.
+     * @return `true` if the lockfiles have been updated, `false` otherwise.
+     */
+    internal fun checkAndUpdateLockfiles(lockFiles: FileCollection, outputFolder: File): Boolean {
+      var changed = false
+      lockFiles.forEach { lockFile ->
+        if (lockFile.exists()) {
+          val sha = computeSha256(lockFile)
+          val shaFile = File(outputFolder, "${lockFile.name}.sha")
+          if (shaFile.exists().not() || shaFile.readText() != sha) {
+            shaFile.writeText(sha)
+            changed = true
+          }
+        }
+      }
+      return changed
+    }
+
+    internal fun getLibrariesToAutolink(buildFile: File): Map<String, File> {
+      val model = JsonUtils.fromAutolinkingConfigJson(buildFile)
+      return model
+          ?.dependencies
+          ?.values
+          // We handle scenarios where there are deps that are
+          // iOS-only or missing the Android configs.
+          ?.filter { it.platforms?.android?.sourceDir != null }
+          // We want to skip dependencies that are pure C++ as they won't contain a .gradle file.
+          ?.filterNot { it.platforms?.android?.isPureCxxDependency == true }
+          ?.associate { deps ->
+            ":${deps.nameCleansed}" to File(deps.platforms?.android?.sourceDir)
+          } ?: emptyMap()
+    }
+
+    internal fun computeSha256(lockFile: File) =
+        String.format("%032x", BigInteger(1, md.digest(lockFile.readBytes())))
+
+    internal fun isConfigModelInvalid(model: ModelAutolinkingConfigJson?) =
+        model?.project?.android?.packageName == null
+  }
+}
diff --git a/node_modules/@react-native/gradle-plugin/settings-plugin/bin/main/com/facebook/react/ReactSettingsPlugin.kt b/node_modules/@react-native/gradle-plugin/settings-plugin/bin/main/com/facebook/react/ReactSettingsPlugin.kt
new file mode 100644
index 0000000..47da627
--- /dev/null
+++ b/node_modules/@react-native/gradle-plugin/settings-plugin/bin/main/com/facebook/react/ReactSettingsPlugin.kt
@@ -0,0 +1,23 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react
+
+import org.gradle.api.Plugin
+import org.gradle.api.initialization.Settings
+
+/**
+ * This is the settings.gradle plugin for React Native.
+ *
+ * It just registers the [ReactSettingsExtension] extension, so that utility functions over there
+ * can be called to support autolinking.
+ */
+class ReactSettingsPlugin : Plugin<Settings> {
+  override fun apply(settings: Settings) {
+    settings.extensions.create("reactSettings", ReactSettingsExtension::class.java, settings)
+  }
+}
diff --git a/node_modules/@react-native/gradle-plugin/settings-plugin/bin/test/com/facebook/react/ReactSettingsExtensionTest.kt b/node_modules/@react-native/gradle-plugin/settings-plugin/bin/test/com/facebook/react/ReactSettingsExtensionTest.kt
new file mode 100644
index 0000000..dcf1e35
--- /dev/null
+++ b/node_modules/@react-native/gradle-plugin/settings-plugin/bin/test/com/facebook/react/ReactSettingsExtensionTest.kt
@@ -0,0 +1,465 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react
+
+import com.facebook.react.ReactSettingsExtension.Companion.checkAndUpdateCache
+import com.facebook.react.ReactSettingsExtension.Companion.checkAndUpdateLockfiles
+import com.facebook.react.ReactSettingsExtension.Companion.computeSha256
+import com.facebook.react.ReactSettingsExtension.Companion.getLibrariesToAutolink
+import com.facebook.react.ReactSettingsExtension.GenerateConfig
+import java.io.File
+import org.assertj.core.api.Assertions.assertThat
+import org.gradle.testfixtures.ProjectBuilder
+import org.intellij.lang.annotations.Language
+import org.junit.Rule
+import org.junit.Test
+import org.junit.rules.TemporaryFolder
+
+class ReactSettingsExtensionTest {
+
+  @get:Rule val tempFolder = TemporaryFolder()
+
+  @Test
+  fun computeSha256_worksCorrectly() {
+    val validFile =
+        createJsonFile(
+            """
+      {
+        "value": "¯\\_(ツ)_/¯"
+      }
+      """
+                .trimIndent())
+    assertThat(computeSha256(validFile))
+        .isEqualTo("838aa9a72a16fdd55b0d49b510a82e264a30f59333b5fdd97c7798a29146f6a8")
+  }
+
+  @Test
+  fun getLibrariesToAutolink_withEmptyFile_returnsEmptyMap() {
+    val validJsonFile =
+        createJsonFile(
+            """
+      {
+        "reactNativeVersion": "1000.0.0"
+      }
+      """
+                .trimIndent())
+
+    val map = getLibrariesToAutolink(validJsonFile)
+    assertThat(map.keys).isEmpty()
+  }
+
+  @Test
+  fun getLibrariesToAutolink_withLibraryToAutolink_returnsValidMap() {
+    val validJsonFile =
+        createJsonFile(
+            """
+      {
+        "reactNativeVersion": "1000.0.0",
+        "dependencies": {
+          "@react-native/oss-library-example": {
+            "root": "./node_modules/@react-native/oss-library-example",
+            "name": "@react-native/oss-library-example",
+            "platforms": {
+              "ios": {
+                "podspecPath": "./node_modules/@react-native/oss-library-example/OSSLibraryExample.podspec",
+                "version": "0.0.1",
+                "configurations": [],
+                "scriptPhases": []
+              },
+              "android": {
+                "sourceDir": "./node_modules/@react-native/oss-library-example/android",
+                "packageImportPath": "import com.facebook.react.osslibraryexample.OSSLibraryExamplePackage;",
+                "packageInstance": "new OSSLibraryExamplePackage()",
+                "buildTypes": ["staging", "debug", "release"],
+                "libraryName": "OSSLibraryExampleSpec",
+                "componentDescriptors": [
+                  "SampleNativeComponentComponentDescriptor"
+                ],
+                "cmakeListsPath": "./node_modules/@react-native/oss-library-example/android/build/generated/source/codegen/jni/CMakeLists.txt",
+                "cxxModuleCMakeListsModuleName": null,
+                "cxxModuleCMakeListsPath": null,
+                "cxxModuleHeaderName": null,
+                "dependencyConfiguration": "implementation",
+                "isPureCxxDependency": false
+              }
+            }
+          }
+        }
+      }
+      """
+                .trimIndent())
+
+    val map = getLibrariesToAutolink(validJsonFile)
+    assertThat(map.keys).containsExactly(":react-native_oss-library-example")
+    assertThat(map[":react-native_oss-library-example"])
+        .isEqualTo(File("./node_modules/@react-native/oss-library-example/android"))
+  }
+
+  @Test
+  fun getLibrariesToAutolink_withiOSOnlyLibrary_returnsEmptyMap() {
+    val validJsonFile =
+        createJsonFile(
+            """
+      {
+        "reactNativeVersion": "1000.0.0",
+        "dependencies": {
+          "@react-native/oss-library-example": {
+            "root": "./node_modules/@react-native/oss-library-example",
+            "name": "@react-native/oss-library-example",
+            "platforms": {
+              "ios": {
+                "podspecPath": "./node_modules/@react-native/oss-library-example/OSSLibraryExample.podspec",
+                "version": "0.0.1",
+                "configurations": [],
+                "scriptPhases": []
+              }
+            }
+          }
+        }
+      }
+      """
+                .trimIndent())
+
+    val map = getLibrariesToAutolink(validJsonFile)
+    assertThat(map.keys).isEmpty()
+  }
+
+  @Test
+  fun checkAndUpdateLockfiles_withNothingToCheck_returnsFalse() {
+    val project = ProjectBuilder.builder().build()
+    val noFiles = project.files()
+    assertThat(checkAndUpdateLockfiles(noFiles, tempFolder.root)).isFalse()
+  }
+
+  @Test
+  fun checkAndUpdateLockfiles_withOneLockfileNoHash_returnsTrue() {
+    val project = ProjectBuilder.builder().withProjectDir(tempFolder.root).build()
+    val buildFolder = tempFolder.newFolder("build")
+    tempFolder.newFile("yarn.lock").apply { writeText("I'm a lockfile") }
+    val lockfileCollection = project.files("yarn.lock")
+
+    assertThat(checkAndUpdateLockfiles(lockfileCollection, buildFolder)).isTrue()
+    assertThat(File(buildFolder, "yarn.lock.sha").exists()).isTrue()
+    assertThat(File(buildFolder, "yarn.lock.sha").readText())
+        .isEqualTo("76046b72442ee7eb130627e56c3db7c9907eef4913b17ad130335edc0eb702a8")
+  }
+
+  @Test
+  fun checkAndUpdateLockfiles_withOneLockfileInvalidHash_returnsTrue() {
+    val project = ProjectBuilder.builder().withProjectDir(tempFolder.root).build()
+    val buildFolder =
+        tempFolder.newFolder("build").apply {
+          File(this, "yarn.lock.sha").writeText("Just a stale hash")
+        }
+    tempFolder.newFile("yarn.lock").apply { writeText("I'm a lockfile") }
+    val lockfileCollection = project.files("yarn.lock")
+
+    assertThat(checkAndUpdateLockfiles(lockfileCollection, buildFolder)).isTrue()
+    assertThat(File(buildFolder, "yarn.lock.sha").exists()).isTrue()
+    assertThat(File(buildFolder, "yarn.lock.sha").readText())
+        .isEqualTo("76046b72442ee7eb130627e56c3db7c9907eef4913b17ad130335edc0eb702a8")
+  }
+
+  @Test
+  fun checkAndUpdateLockfiles_withOneLockfileValidHash_returnsFalse() {
+    val project = ProjectBuilder.builder().withProjectDir(tempFolder.root).build()
+    val buildFolder =
+        tempFolder.newFolder("build").apply {
+          File(this, "yarn.lock.sha")
+              .writeText("76046b72442ee7eb130627e56c3db7c9907eef4913b17ad130335edc0eb702a8")
+        }
+    tempFolder.newFile("yarn.lock").apply { writeText("I'm a lockfile") }
+    val lockfileCollection = project.files("yarn.lock")
+
+    assertThat(checkAndUpdateLockfiles(lockfileCollection, buildFolder)).isFalse()
+    assertThat(File(buildFolder, "yarn.lock.sha").exists()).isTrue()
+    assertThat(File(buildFolder, "yarn.lock.sha").readText())
+        .isEqualTo("76046b72442ee7eb130627e56c3db7c9907eef4913b17ad130335edc0eb702a8")
+  }
+
+  @Test
+  fun checkAndUpdateLockfiles_withMultipleLockfilesInvalidHash_returnsTrue() {
+    val project = ProjectBuilder.builder().withProjectDir(tempFolder.root).build()
+    val buildFolder =
+        tempFolder.newFolder("build").apply {
+          File(this, "yarn.lock.sha").writeText("I'm an invalid hash")
+        }
+    tempFolder.newFile("yarn.lock").apply { writeText("I'm a lockfile") }
+    tempFolder.newFile("package-lock.json").apply { writeText("and I'm another lockfile") }
+    val lockfileCollection = project.files("yarn.lock", "package-lock.json")
+
+    assertThat(checkAndUpdateLockfiles(lockfileCollection, buildFolder)).isTrue()
+    assertThat(File(buildFolder, "yarn.lock.sha").exists()).isTrue()
+    assertThat(File(buildFolder, "package-lock.json.sha").exists()).isTrue()
+    assertThat(File(buildFolder, "yarn.lock.sha").readText())
+        .isEqualTo("76046b72442ee7eb130627e56c3db7c9907eef4913b17ad130335edc0eb702a8")
+    assertThat(File(buildFolder, "package-lock.json.sha").readText())
+        .isEqualTo("9be5bca432b81becf4f54451aea021add68376330581eaa93ab9a0b3e4e29a3b")
+  }
+
+  @Test
+  fun checkAndUpdateLockfiles_withMultipleLockfilesValidHash_returnsFalse() {
+    val project = ProjectBuilder.builder().withProjectDir(tempFolder.root).build()
+    val buildFolder =
+        tempFolder.newFolder("build").apply {
+          File(this, "yarn.lock.sha")
+              .writeText("76046b72442ee7eb130627e56c3db7c9907eef4913b17ad130335edc0eb702a8")
+          File(this, "package-lock.json.sha")
+              .writeText("9be5bca432b81becf4f54451aea021add68376330581eaa93ab9a0b3e4e29a3b")
+        }
+    tempFolder.newFile("yarn.lock").apply { writeText("I'm a lockfile") }
+    tempFolder.newFile("package-lock.json").apply { writeText("and I'm another lockfile") }
+    val lockfileCollection = project.files("yarn.lock", "package-lock.json")
+
+    assertThat(checkAndUpdateLockfiles(lockfileCollection, buildFolder)).isFalse()
+    assertThat(File(buildFolder, "yarn.lock.sha").exists()).isTrue()
+    assertThat(File(buildFolder, "package-lock.json.sha").exists()).isTrue()
+    assertThat(File(buildFolder, "yarn.lock.sha").readText())
+        .isEqualTo("76046b72442ee7eb130627e56c3db7c9907eef4913b17ad130335edc0eb702a8")
+    assertThat(File(buildFolder, "package-lock.json.sha").readText())
+        .isEqualTo("9be5bca432b81becf4f54451aea021add68376330581eaa93ab9a0b3e4e29a3b")
+  }
+
+  @Test
+  fun skipUpdateIfConfigInCacheIsValid() {
+    val project = ProjectBuilder.builder().withProjectDir(tempFolder.root).build()
+    val buildFolder = tempFolder.newFolder("build")
+    val generatedFolder = tempFolder.newFolder("build", "generated")
+    val outputFile =
+        File(generatedFolder, "autolinking.json").apply {
+          writeText(
+              """
+      {
+        "root": "/",
+        "reactNativePath": "/node_modules/react-native",
+        "reactNativeVersion": "0.75",
+        "dependencies": {},
+        "healthChecks": [],
+        "platforms": {
+          "ios": {},
+          "android": {}
+        },
+        "assets": [],
+        "project": {
+          "ios": {},
+          "android": {
+            "sourceDir": "/",
+            "appName": "app",
+            "packageName": "com.TestApp",
+            "applicationId": "com.TestApp",
+            "mainActivity": ".MainActivity",
+            "assets": []
+          }
+        }
+      }
+    """
+                  .trimIndent())
+        }
+    tempFolder.newFile("yarn.lock").apply { writeText("I'm a lockfile") }
+    val lockfileCollection = project.files("yarn.lock")
+
+    // Prebuild the shas with the invalid empty autolinking.json
+    checkAndUpdateLockfiles(lockfileCollection, buildFolder)
+
+    val monitoredUpdateConfig = createMonitoredUpdateConfig()
+
+    checkAndUpdateCache(monitoredUpdateConfig, outputFile, buildFolder, lockfileCollection)
+
+    // The autolinking.json file is valid, SHA's are untouched therefore config should NOT be
+    // refreshed
+    assertThat(monitoredUpdateConfig.run).isFalse()
+  }
+
+  @Test
+  fun checkAndUpdateConfigIfEmpty() {
+    val project = ProjectBuilder.builder().withProjectDir(tempFolder.root).build()
+    val buildFolder = tempFolder.newFolder("build")
+    val generatedFolder = tempFolder.newFolder("build", "generated")
+    val outputFile = File(generatedFolder, "autolinking.json").apply { writeText("") }
+    tempFolder.newFile("yarn.lock").apply { writeText("I'm a lockfile") }
+    val lockfileCollection = project.files("yarn.lock")
+
+    // Prebuild the shas with the invalid empty autolinking.json
+    checkAndUpdateLockfiles(lockfileCollection, buildFolder)
+
+    val monitoredUpdateConfig = createMonitoredUpdateConfig()
+
+    checkAndUpdateCache(monitoredUpdateConfig, outputFile, buildFolder, lockfileCollection)
+
+    // The autolinking.json file is invalid and should be refreshed
+    assertThat(monitoredUpdateConfig.run).isTrue()
+  }
+
+  @Test
+  fun checkAndUpdateConfigIfCachedConfigInvalid() {
+    val project = ProjectBuilder.builder().withProjectDir(tempFolder.root).build()
+    val buildFolder = tempFolder.newFolder("build")
+    val generatedFolder = tempFolder.newFolder("build", "generated")
+    val outputFile =
+        File(generatedFolder, "autolinking.json").apply {
+          writeText(
+              """
+      {
+        "project": {
+          "ios": {},
+          "android": {}
+        }
+      }
+    """
+                  .trimIndent())
+        }
+    tempFolder.newFile("yarn.lock").apply { writeText("I'm a lockfile") }
+    val lockfileCollection = project.files("yarn.lock")
+
+    // Prebuild the shas with the invalid empty autolinking.json
+    checkAndUpdateLockfiles(lockfileCollection, buildFolder)
+
+    val monitoredUpdateConfig = createMonitoredUpdateConfig()
+
+    checkAndUpdateCache(monitoredUpdateConfig, outputFile, buildFolder, lockfileCollection)
+
+    // The autolinking.json file is invalid and should be refreshed
+    assertThat(monitoredUpdateConfig.run).isTrue()
+  }
+
+  @Test
+  fun isCacheDirty_withMissingAutolinkingFile_returnsTrue() {
+    val project = ProjectBuilder.builder().withProjectDir(tempFolder.root).build()
+    val buildFolder =
+        tempFolder.newFolder("build").apply {
+          File(this, "yarn.lock.sha")
+              .writeText("76046b72442ee7eb130627e56c3db7c9907eef4913b17ad130335edc0eb702a8")
+        }
+    tempFolder.newFile("yarn.lock").apply { writeText("I'm a lockfile") }
+    val lockfiles = project.files("yarn.lock")
+    val emptyConfigFile = File(tempFolder.newFolder("build", "autolinking"), "autolinking.json")
+
+    assertThat(ReactSettingsExtension.isCacheDirty(emptyConfigFile, buildFolder, lockfiles))
+        .isTrue()
+  }
+
+  @Test
+  fun isCacheDirty_withInvalidAutolinkingFile_returnsTrue() {
+    val project = ProjectBuilder.builder().withProjectDir(tempFolder.root).build()
+    val buildFolder =
+        tempFolder.newFolder("build").apply {
+          File(this, "yarn.lock.sha")
+              .writeText("76046b72442ee7eb130627e56c3db7c9907eef4913b17ad130335edc0eb702a8")
+        }
+    tempFolder.newFile("yarn.lock").apply { writeText("I'm a lockfile") }
+    val lockfiles = project.files("yarn.lock")
+    val invalidConfigFile =
+        createJsonFile(
+            """
+      {}
+      """
+                .trimIndent())
+
+    assertThat(ReactSettingsExtension.isCacheDirty(invalidConfigFile, buildFolder, lockfiles))
+        .isTrue()
+  }
+
+  @Test
+  fun isCacheDirty_withMissingDependenciesInJson_returnsFalse() {
+    val project = ProjectBuilder.builder().withProjectDir(tempFolder.root).build()
+    val buildFolder =
+        tempFolder.newFolder("build").apply {
+          File(this, "yarn.lock.sha")
+              .writeText("76046b72442ee7eb130627e56c3db7c9907eef4913b17ad130335edc0eb702a8")
+        }
+    tempFolder.newFile("yarn.lock").apply { writeText("I'm a lockfile") }
+    val lockfiles = project.files("yarn.lock")
+    val invalidConfigFile =
+        createJsonFile(
+            """
+      {
+        "reactNativeVersion": "1000.0.0"
+      }
+      """
+                .trimIndent())
+
+    assertThat(ReactSettingsExtension.isCacheDirty(invalidConfigFile, buildFolder, lockfiles))
+        .isTrue()
+  }
+
+  @Test
+  fun isCacheDirty_withExistingEmptyDependenciesInJson_returnsTrue() {
+    val project = ProjectBuilder.builder().withProjectDir(tempFolder.root).build()
+    val buildFolder =
+        tempFolder.newFolder("build").apply {
+          File(this, "yarn.lock.sha")
+              .writeText("76046b72442ee7eb130627e56c3db7c9907eef4913b17ad130335edc0eb702a8")
+        }
+    tempFolder.newFile("yarn.lock").apply { writeText("I'm a lockfile") }
+    val lockfiles = project.files("yarn.lock")
+    val invalidConfigFile =
+        createJsonFile(
+            """
+      {
+        "reactNativeVersion": "1000.0.0",
+        "dependencies": {}
+      }
+      """
+                .trimIndent())
+
+    assertThat(ReactSettingsExtension.isCacheDirty(invalidConfigFile, buildFolder, lockfiles))
+        .isTrue()
+  }
+
+  @Test
+  fun isCacheDirty_withExistingDependenciesInJson_returnsTrue() {
+    val project = ProjectBuilder.builder().withProjectDir(tempFolder.root).build()
+    val buildFolder =
+        tempFolder.newFolder("build").apply {
+          File(this, "yarn.lock.sha")
+              .writeText("76046b72442ee7eb130627e56c3db7c9907eef4913b17ad130335edc0eb702a8")
+        }
+    tempFolder.newFile("yarn.lock").apply { writeText("I'm a lockfile") }
+    val lockfiles = project.files("yarn.lock")
+    val invalidConfigFile =
+        createJsonFile(
+            """
+      {
+        "reactNativeVersion": "1000.0.0",
+        "dependencies": {
+          "@react-native/oss-library-example": {
+            "root": "./node_modules/@react-native/oss-library-example",
+            "name": "@react-native/oss-library-example",
+            "platforms": {
+              "ios": {
+                "podspecPath": "./node_modules/@react-native/oss-library-example/OSSLibraryExample.podspec",
+                "version": "0.0.1",
+                "configurations": [],
+                "scriptPhases": []
+              }
+            }
+          }
+        }
+      }
+      """
+                .trimIndent())
+
+    assertThat(ReactSettingsExtension.isCacheDirty(invalidConfigFile, buildFolder, lockfiles))
+        .isTrue()
+  }
+
+  private fun createJsonFile(@Language("JSON") input: String) =
+      tempFolder.newFile().apply { writeText(input) }
+
+  private fun createMonitoredUpdateConfig() =
+      object : GenerateConfig {
+        var run = false
+
+        override fun execute(): Int {
+          run = true
+          return 0
+        }
+
+        override fun command(): List<String> = listOf("true")
+      }
+}
diff --git a/node_modules/@react-native/gradle-plugin/settings-plugin/build.gradle.kts b/node_modules/@react-native/gradle-plugin/settings-plugin/build.gradle.kts
index 8f5ae86..7d8b060 100644
--- a/node_modules/@react-native/gradle-plugin/settings-plugin/build.gradle.kts
+++ b/node_modules/@react-native/gradle-plugin/settings-plugin/build.gradle.kts
@@ -56,8 +56,8 @@ tasks.withType<KotlinCompile>().configureEach {
     apiVersion.set(KotlinVersion.KOTLIN_1_7)
     // See comment above on JDK 11 support
     jvmTarget.set(JvmTarget.JVM_11)
-    allWarningsAsErrors =
-        project.properties["enableWarningsAsErrors"]?.toString()?.toBoolean() ?: false
+    allWarningsAsErrors.set(
+        project.properties["enableWarningsAsErrors"]?.toString()?.toBoolean() ?: false)
   }
 }
 
diff --git a/node_modules/@react-native/gradle-plugin/settings-plugin/build/classes/kotlin/main/META-INF/settings-plugin.kotlin_module b/node_modules/@react-native/gradle-plugin/settings-plugin/build/classes/kotlin/main/META-INF/settings-plugin.kotlin_module
new file mode 100644
index 0000000..c998a4c
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/settings-plugin/build/classes/kotlin/main/META-INF/settings-plugin.kotlin_module differ
diff --git a/node_modules/@react-native/gradle-plugin/settings-plugin/build/classes/kotlin/main/com/facebook/react/ReactSettingsExtension$Companion.class b/node_modules/@react-native/gradle-plugin/settings-plugin/build/classes/kotlin/main/com/facebook/react/ReactSettingsExtension$Companion.class
new file mode 100644
index 0000000..9e62140
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/settings-plugin/build/classes/kotlin/main/com/facebook/react/ReactSettingsExtension$Companion.class differ
diff --git a/node_modules/@react-native/gradle-plugin/settings-plugin/build/classes/kotlin/main/com/facebook/react/ReactSettingsExtension$GenerateConfig.class b/node_modules/@react-native/gradle-plugin/settings-plugin/build/classes/kotlin/main/com/facebook/react/ReactSettingsExtension$GenerateConfig.class
new file mode 100644
index 0000000..5215c76
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/settings-plugin/build/classes/kotlin/main/com/facebook/react/ReactSettingsExtension$GenerateConfig.class differ
diff --git a/node_modules/@react-native/gradle-plugin/settings-plugin/build/classes/kotlin/main/com/facebook/react/ReactSettingsExtension$autolinkLibrariesFromCommand$updateConfig$1.class b/node_modules/@react-native/gradle-plugin/settings-plugin/build/classes/kotlin/main/com/facebook/react/ReactSettingsExtension$autolinkLibrariesFromCommand$updateConfig$1.class
new file mode 100644
index 0000000..5bb5255
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/settings-plugin/build/classes/kotlin/main/com/facebook/react/ReactSettingsExtension$autolinkLibrariesFromCommand$updateConfig$1.class differ
diff --git a/node_modules/@react-native/gradle-plugin/settings-plugin/build/classes/kotlin/main/com/facebook/react/ReactSettingsExtension.class b/node_modules/@react-native/gradle-plugin/settings-plugin/build/classes/kotlin/main/com/facebook/react/ReactSettingsExtension.class
new file mode 100644
index 0000000..8245703
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/settings-plugin/build/classes/kotlin/main/com/facebook/react/ReactSettingsExtension.class differ
diff --git a/node_modules/@react-native/gradle-plugin/settings-plugin/build/classes/kotlin/main/com/facebook/react/ReactSettingsPlugin.class b/node_modules/@react-native/gradle-plugin/settings-plugin/build/classes/kotlin/main/com/facebook/react/ReactSettingsPlugin.class
new file mode 100644
index 0000000..557a2de
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/settings-plugin/build/classes/kotlin/main/com/facebook/react/ReactSettingsPlugin.class differ
diff --git a/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/inputs/source-to-output.tab b/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/inputs/source-to-output.tab
new file mode 100644
index 0000000..7e7d9dc
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/inputs/source-to-output.tab differ
diff --git a/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/inputs/source-to-output.tab.keystream b/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/inputs/source-to-output.tab.keystream
new file mode 100644
index 0000000..fbc8330
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/inputs/source-to-output.tab.keystream differ
diff --git a/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/inputs/source-to-output.tab.keystream.len b/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/inputs/source-to-output.tab.keystream.len
new file mode 100644
index 0000000..1b7aee7
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/inputs/source-to-output.tab.keystream.len differ
diff --git a/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/inputs/source-to-output.tab.len b/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/inputs/source-to-output.tab.len
new file mode 100644
index 0000000..01bdaa1
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/inputs/source-to-output.tab.len differ
diff --git a/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/inputs/source-to-output.tab.values.at b/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/inputs/source-to-output.tab.values.at
new file mode 100644
index 0000000..b6af808
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/inputs/source-to-output.tab.values.at differ
diff --git a/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/inputs/source-to-output.tab_i b/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/inputs/source-to-output.tab_i
new file mode 100644
index 0000000..1a660cb
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/inputs/source-to-output.tab_i differ
diff --git a/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/inputs/source-to-output.tab_i.len b/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/inputs/source-to-output.tab_i.len
new file mode 100644
index 0000000..131e265
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/inputs/source-to-output.tab_i.len differ
diff --git a/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/class-attributes.tab b/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/class-attributes.tab
new file mode 100644
index 0000000..f1f64f1
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/class-attributes.tab differ
diff --git a/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/class-attributes.tab.keystream b/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/class-attributes.tab.keystream
new file mode 100644
index 0000000..5d227a9
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/class-attributes.tab.keystream differ
diff --git a/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/class-attributes.tab.keystream.len b/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/class-attributes.tab.keystream.len
new file mode 100644
index 0000000..c73331e
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/class-attributes.tab.keystream.len differ
diff --git a/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/class-attributes.tab.len b/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/class-attributes.tab.len
new file mode 100644
index 0000000..93a595b
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/class-attributes.tab.len differ
diff --git a/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/class-attributes.tab.values.at b/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/class-attributes.tab.values.at
new file mode 100644
index 0000000..8f28327
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/class-attributes.tab.values.at differ
diff --git a/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/class-attributes.tab_i b/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/class-attributes.tab_i
new file mode 100644
index 0000000..3999a26
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/class-attributes.tab_i differ
diff --git a/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/class-attributes.tab_i.len b/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/class-attributes.tab_i.len
new file mode 100644
index 0000000..131e265
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/class-attributes.tab_i.len differ
diff --git a/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/class-fq-name-to-source.tab b/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/class-fq-name-to-source.tab
new file mode 100644
index 0000000..1d5ac99
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/class-fq-name-to-source.tab differ
diff --git a/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/class-fq-name-to-source.tab.keystream b/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/class-fq-name-to-source.tab.keystream
new file mode 100644
index 0000000..5d227a9
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/class-fq-name-to-source.tab.keystream differ
diff --git a/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/class-fq-name-to-source.tab.keystream.len b/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/class-fq-name-to-source.tab.keystream.len
new file mode 100644
index 0000000..c73331e
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/class-fq-name-to-source.tab.keystream.len differ
diff --git a/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/class-fq-name-to-source.tab.len b/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/class-fq-name-to-source.tab.len
new file mode 100644
index 0000000..93a595b
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/class-fq-name-to-source.tab.len differ
diff --git a/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/class-fq-name-to-source.tab.values.at b/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/class-fq-name-to-source.tab.values.at
new file mode 100644
index 0000000..315b9ba
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/class-fq-name-to-source.tab.values.at differ
diff --git a/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/class-fq-name-to-source.tab_i b/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/class-fq-name-to-source.tab_i
new file mode 100644
index 0000000..3999a26
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/class-fq-name-to-source.tab_i differ
diff --git a/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/class-fq-name-to-source.tab_i.len b/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/class-fq-name-to-source.tab_i.len
new file mode 100644
index 0000000..131e265
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/class-fq-name-to-source.tab_i.len differ
diff --git a/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/internal-name-to-source.tab b/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/internal-name-to-source.tab
new file mode 100644
index 0000000..df8adef
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/internal-name-to-source.tab differ
diff --git a/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/internal-name-to-source.tab.keystream b/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/internal-name-to-source.tab.keystream
new file mode 100644
index 0000000..df27262
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/internal-name-to-source.tab.keystream differ
diff --git a/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/internal-name-to-source.tab.keystream.len b/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/internal-name-to-source.tab.keystream.len
new file mode 100644
index 0000000..2116741
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/internal-name-to-source.tab.keystream.len differ
diff --git a/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/internal-name-to-source.tab.len b/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/internal-name-to-source.tab.len
new file mode 100644
index 0000000..ec8f944
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/internal-name-to-source.tab.len differ
diff --git a/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/internal-name-to-source.tab.values.at b/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/internal-name-to-source.tab.values.at
new file mode 100644
index 0000000..5271be2
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/internal-name-to-source.tab.values.at differ
diff --git a/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/internal-name-to-source.tab_i b/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/internal-name-to-source.tab_i
new file mode 100644
index 0000000..b3d75a3
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/internal-name-to-source.tab_i differ
diff --git a/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/internal-name-to-source.tab_i.len b/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/internal-name-to-source.tab_i.len
new file mode 100644
index 0000000..131e265
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/internal-name-to-source.tab_i.len differ
diff --git a/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/proto.tab b/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/proto.tab
new file mode 100644
index 0000000..3f8bef2
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/proto.tab differ
diff --git a/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/proto.tab.keystream b/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/proto.tab.keystream
new file mode 100644
index 0000000..d619e32
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/proto.tab.keystream differ
diff --git a/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/proto.tab.keystream.len b/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/proto.tab.keystream.len
new file mode 100644
index 0000000..f1e9cb9
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/proto.tab.keystream.len differ
diff --git a/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/proto.tab.len b/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/proto.tab.len
new file mode 100644
index 0000000..ec8f944
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/proto.tab.len differ
diff --git a/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/proto.tab.values.at b/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/proto.tab.values.at
new file mode 100644
index 0000000..a7b0da4
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/proto.tab.values.at differ
diff --git a/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/proto.tab_i b/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/proto.tab_i
new file mode 100644
index 0000000..c27a6e0
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/proto.tab_i differ
diff --git a/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/proto.tab_i.len b/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/proto.tab_i.len
new file mode 100644
index 0000000..131e265
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/proto.tab_i.len differ
diff --git a/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/source-to-classes.tab b/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/source-to-classes.tab
new file mode 100644
index 0000000..9ad573f
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/source-to-classes.tab differ
diff --git a/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/source-to-classes.tab.keystream b/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/source-to-classes.tab.keystream
new file mode 100644
index 0000000..fbc8330
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/source-to-classes.tab.keystream differ
diff --git a/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/source-to-classes.tab.keystream.len b/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/source-to-classes.tab.keystream.len
new file mode 100644
index 0000000..1b7aee7
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/source-to-classes.tab.keystream.len differ
diff --git a/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/source-to-classes.tab.len b/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/source-to-classes.tab.len
new file mode 100644
index 0000000..01bdaa1
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/source-to-classes.tab.len differ
diff --git a/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/source-to-classes.tab.values.at b/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/source-to-classes.tab.values.at
new file mode 100644
index 0000000..785add0
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/source-to-classes.tab.values.at differ
diff --git a/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/source-to-classes.tab_i b/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/source-to-classes.tab_i
new file mode 100644
index 0000000..1a660cb
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/source-to-classes.tab_i differ
diff --git a/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/source-to-classes.tab_i.len b/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/source-to-classes.tab_i.len
new file mode 100644
index 0000000..131e265
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/source-to-classes.tab_i.len differ
diff --git a/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/subtypes.tab b/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/subtypes.tab
new file mode 100644
index 0000000..bdf584a
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/subtypes.tab differ
diff --git a/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/subtypes.tab.keystream b/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/subtypes.tab.keystream
new file mode 100644
index 0000000..2f0b173
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/subtypes.tab.keystream differ
diff --git a/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/subtypes.tab.keystream.len b/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/subtypes.tab.keystream.len
new file mode 100644
index 0000000..2647ad1
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/subtypes.tab.keystream.len differ
diff --git a/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/subtypes.tab.len b/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/subtypes.tab.len
new file mode 100644
index 0000000..2a17e6e
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/subtypes.tab.len differ
diff --git a/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/subtypes.tab.values.at b/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/subtypes.tab.values.at
new file mode 100644
index 0000000..77985dd
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/subtypes.tab.values.at differ
diff --git a/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/subtypes.tab_i b/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/subtypes.tab_i
new file mode 100644
index 0000000..a685cce
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/subtypes.tab_i differ
diff --git a/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/subtypes.tab_i.len b/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/subtypes.tab_i.len
new file mode 100644
index 0000000..131e265
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/subtypes.tab_i.len differ
diff --git a/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/supertypes.tab b/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/supertypes.tab
new file mode 100644
index 0000000..bdf584a
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/supertypes.tab differ
diff --git a/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/supertypes.tab.keystream b/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/supertypes.tab.keystream
new file mode 100644
index 0000000..144c94d
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/supertypes.tab.keystream differ
diff --git a/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/supertypes.tab.keystream.len b/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/supertypes.tab.keystream.len
new file mode 100644
index 0000000..11d24d5
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/supertypes.tab.keystream.len differ
diff --git a/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/supertypes.tab.len b/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/supertypes.tab.len
new file mode 100644
index 0000000..2a17e6e
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/supertypes.tab.len differ
diff --git a/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/supertypes.tab.values.at b/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/supertypes.tab.values.at
new file mode 100644
index 0000000..a5365bb
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/supertypes.tab.values.at differ
diff --git a/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/supertypes.tab_i b/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/supertypes.tab_i
new file mode 100644
index 0000000..c4f2a8c
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/supertypes.tab_i differ
diff --git a/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/supertypes.tab_i.len b/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/supertypes.tab_i.len
new file mode 100644
index 0000000..131e265
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/supertypes.tab_i.len differ
diff --git a/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/counters.tab b/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/counters.tab
new file mode 100644
index 0000000..2ceb12b
--- /dev/null
+++ b/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/counters.tab
@@ -0,0 +1,2 @@
+2
+0
\ No newline at end of file
diff --git a/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/file-to-id.tab b/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/file-to-id.tab
new file mode 100644
index 0000000..d99cf70
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/file-to-id.tab differ
diff --git a/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/file-to-id.tab.keystream b/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/file-to-id.tab.keystream
new file mode 100644
index 0000000..fbc8330
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/file-to-id.tab.keystream differ
diff --git a/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/file-to-id.tab.keystream.len b/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/file-to-id.tab.keystream.len
new file mode 100644
index 0000000..1b7aee7
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/file-to-id.tab.keystream.len differ
diff --git a/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/file-to-id.tab.len b/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/file-to-id.tab.len
new file mode 100644
index 0000000..01bdaa1
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/file-to-id.tab.len differ
diff --git a/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/file-to-id.tab.values.at b/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/file-to-id.tab.values.at
new file mode 100644
index 0000000..7d30a43
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/file-to-id.tab.values.at differ
diff --git a/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/file-to-id.tab_i b/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/file-to-id.tab_i
new file mode 100644
index 0000000..1a660cb
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/file-to-id.tab_i differ
diff --git a/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/file-to-id.tab_i.len b/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/file-to-id.tab_i.len
new file mode 100644
index 0000000..131e265
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/file-to-id.tab_i.len differ
diff --git a/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/id-to-file.tab b/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/id-to-file.tab
new file mode 100644
index 0000000..d10b9e0
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/id-to-file.tab differ
diff --git a/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/id-to-file.tab.keystream b/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/id-to-file.tab.keystream
new file mode 100644
index 0000000..100d205
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/id-to-file.tab.keystream differ
diff --git a/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/id-to-file.tab.keystream.len b/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/id-to-file.tab.keystream.len
new file mode 100644
index 0000000..ccfcbf4
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/id-to-file.tab.keystream.len differ
diff --git a/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/id-to-file.tab.len b/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/id-to-file.tab.len
new file mode 100644
index 0000000..01bdaa1
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/id-to-file.tab.len differ
diff --git a/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/id-to-file.tab.values.at b/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/id-to-file.tab.values.at
new file mode 100644
index 0000000..c088c3b
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/id-to-file.tab.values.at differ
diff --git a/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/id-to-file.tab_i b/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/id-to-file.tab_i
new file mode 100644
index 0000000..f768a77
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/id-to-file.tab_i differ
diff --git a/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/id-to-file.tab_i.len b/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/id-to-file.tab_i.len
new file mode 100644
index 0000000..131e265
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/id-to-file.tab_i.len differ
diff --git a/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/lookups.tab b/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/lookups.tab
new file mode 100644
index 0000000..cd61aaa
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/lookups.tab differ
diff --git a/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/lookups.tab.keystream b/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/lookups.tab.keystream
new file mode 100644
index 0000000..cec9f0a
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/lookups.tab.keystream differ
diff --git a/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/lookups.tab.keystream.len b/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/lookups.tab.keystream.len
new file mode 100644
index 0000000..987f5e1
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/lookups.tab.keystream.len differ
diff --git a/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/lookups.tab.len b/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/lookups.tab.len
new file mode 100644
index 0000000..5185229
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/lookups.tab.len differ
diff --git a/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/lookups.tab.values.at b/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/lookups.tab.values.at
new file mode 100644
index 0000000..d8f1080
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/lookups.tab.values.at differ
diff --git a/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/lookups.tab_i b/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/lookups.tab_i
new file mode 100644
index 0000000..18d4acf
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/lookups.tab_i differ
diff --git a/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/lookups.tab_i.len b/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/lookups.tab_i.len
new file mode 100644
index 0000000..131e265
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/lookups.tab_i.len differ
diff --git a/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/last-build.bin b/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/last-build.bin
new file mode 100644
index 0000000..975ce81
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/cacheable/last-build.bin differ
diff --git a/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/classpath-snapshot/shrunk-classpath-snapshot.bin b/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/classpath-snapshot/shrunk-classpath-snapshot.bin
new file mode 100644
index 0000000..b62891b
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/classpath-snapshot/shrunk-classpath-snapshot.bin differ
diff --git a/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/local-state/build-history.bin b/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/local-state/build-history.bin
new file mode 100644
index 0000000..49ef8e1
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/settings-plugin/build/kotlin/compileKotlin/local-state/build-history.bin differ
diff --git a/node_modules/@react-native/gradle-plugin/settings-plugin/build/libs/settings-plugin.jar b/node_modules/@react-native/gradle-plugin/settings-plugin/build/libs/settings-plugin.jar
new file mode 100644
index 0000000..e3b90e6
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/settings-plugin/build/libs/settings-plugin.jar differ
diff --git a/node_modules/@react-native/gradle-plugin/settings-plugin/build/pluginDescriptors/com.facebook.react.settings.properties b/node_modules/@react-native/gradle-plugin/settings-plugin/build/pluginDescriptors/com.facebook.react.settings.properties
new file mode 100644
index 0000000..06caa8c
--- /dev/null
+++ b/node_modules/@react-native/gradle-plugin/settings-plugin/build/pluginDescriptors/com.facebook.react.settings.properties
@@ -0,0 +1 @@
+implementation-class=com.facebook.react.ReactSettingsPlugin
diff --git a/node_modules/@react-native/gradle-plugin/settings-plugin/build/resources/main/META-INF/gradle-plugins/com.facebook.react.settings.properties b/node_modules/@react-native/gradle-plugin/settings-plugin/build/resources/main/META-INF/gradle-plugins/com.facebook.react.settings.properties
new file mode 100644
index 0000000..06caa8c
--- /dev/null
+++ b/node_modules/@react-native/gradle-plugin/settings-plugin/build/resources/main/META-INF/gradle-plugins/com.facebook.react.settings.properties
@@ -0,0 +1 @@
+implementation-class=com.facebook.react.ReactSettingsPlugin
diff --git a/node_modules/@react-native/gradle-plugin/settings-plugin/build/tmp/jar/MANIFEST.MF b/node_modules/@react-native/gradle-plugin/settings-plugin/build/tmp/jar/MANIFEST.MF
new file mode 100644
index 0000000..59499bc
--- /dev/null
+++ b/node_modules/@react-native/gradle-plugin/settings-plugin/build/tmp/jar/MANIFEST.MF
@@ -0,0 +1,2 @@
+Manifest-Version: 1.0
+
diff --git a/node_modules/@react-native/gradle-plugin/settings-plugin/src/main/kotlin/com/facebook/react/ReactSettingsExtension.kt b/node_modules/@react-native/gradle-plugin/settings-plugin/src/main/kotlin/com/facebook/react/ReactSettingsExtension.kt
index 41ca6c5..31ef56d 100644
--- a/node_modules/@react-native/gradle-plugin/settings-plugin/src/main/kotlin/com/facebook/react/ReactSettingsExtension.kt
+++ b/node_modules/@react-native/gradle-plugin/settings-plugin/src/main/kotlin/com/facebook/react/ReactSettingsExtension.kt
@@ -19,13 +19,14 @@ import org.gradle.api.GradleException
 import org.gradle.api.file.FileCollection
 import org.gradle.api.initialization.Settings
 import org.gradle.api.logging.Logging
+import org.gradle.api.model.ObjectFactory
 
-abstract class ReactSettingsExtension @Inject constructor(val settings: Settings) {
+abstract class ReactSettingsExtension @Inject constructor(val settings: Settings, private val objects: ObjectFactory) {
 
   private val outputFile =
-      settings.layout.rootDirectory.file("build/generated/autolinking/autolinking.json").asFile
+      File(settings.rootDir, "build/generated/autolinking/autolinking.json")
   private val outputFolder =
-      settings.layout.rootDirectory.file("build/generated/autolinking/").asFile
+      File(settings.rootDir, "build/generated/autolinking/")
 
   private val defaultConfigCommand: List<String> =
       windowsAwareCommandLine(listOf("npx", "@react-native-community/cli", "config")).map {
@@ -47,11 +48,13 @@ abstract class ReactSettingsExtension @Inject constructor(val settings: Settings
   @JvmOverloads
   public fun autolinkLibrariesFromCommand(
       command: List<String> = defaultConfigCommand,
-      workingDirectory: File? = settings.layout.rootDirectory.dir("../").asFile,
-      lockFiles: FileCollection =
-          settings.layout.rootDirectory
-              .dir("../")
-              .files("yarn.lock", "package-lock.json", "package.json", "react-native.config.js")
+      workingDirectory: File? = File(settings.rootDir, "../"),
+      lockFiles: FileCollection = objects.fileCollection().from(
+          File(settings.rootDir, "../yarn.lock"),
+          File(settings.rootDir, "../package-lock.json"), 
+          File(settings.rootDir, "../package.json"),
+          File(settings.rootDir, "../react-native.config.js")
+      )
   ) {
     outputFile.parentFile.mkdirs()
 
diff --git a/node_modules/@react-native/gradle-plugin/shared-testutil/.classpath b/node_modules/@react-native/gradle-plugin/shared-testutil/.classpath
new file mode 100644
index 0000000..da94deb
--- /dev/null
+++ b/node_modules/@react-native/gradle-plugin/shared-testutil/.classpath
@@ -0,0 +1,12 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<classpath>
+	<classpathentry kind="src" output="bin/main" path="src/main/kotlin">
+		<attributes>
+			<attribute name="gradle_scope" value="main"/>
+			<attribute name="gradle_used_by_scope" value="main,test"/>
+		</attributes>
+	</classpathentry>
+	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-11/"/>
+	<classpathentry kind="con" path="org.eclipse.buildship.core.gradleclasspathcontainer"/>
+	<classpathentry kind="output" path="bin/default"/>
+</classpath>
diff --git a/node_modules/@react-native/gradle-plugin/shared-testutil/.project b/node_modules/@react-native/gradle-plugin/shared-testutil/.project
new file mode 100644
index 0000000..363db03
--- /dev/null
+++ b/node_modules/@react-native/gradle-plugin/shared-testutil/.project
@@ -0,0 +1,34 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<projectDescription>
+	<name>shared-testutil</name>
+	<comment>Project shared-testutil created by Buildship.</comment>
+	<projects>
+	</projects>
+	<buildSpec>
+		<buildCommand>
+			<name>org.eclipse.jdt.core.javabuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+		<buildCommand>
+			<name>org.eclipse.buildship.core.gradleprojectbuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+	</buildSpec>
+	<natures>
+		<nature>org.eclipse.jdt.core.javanature</nature>
+		<nature>org.eclipse.buildship.core.gradleprojectnature</nature>
+	</natures>
+	<filteredResources>
+		<filter>
+			<id>1749999528631</id>
+			<name></name>
+			<type>30</type>
+			<matcher>
+				<id>org.eclipse.core.resources.regexFilterMatcher</id>
+				<arguments>node_modules|\.git|__CREATED_BY_JAVA_LANGUAGE_SERVER__</arguments>
+			</matcher>
+		</filter>
+	</filteredResources>
+</projectDescription>
diff --git a/node_modules/@react-native/gradle-plugin/shared-testutil/.settings/org.eclipse.buildship.core.prefs b/node_modules/@react-native/gradle-plugin/shared-testutil/.settings/org.eclipse.buildship.core.prefs
new file mode 100644
index 0000000..68c9fab
--- /dev/null
+++ b/node_modules/@react-native/gradle-plugin/shared-testutil/.settings/org.eclipse.buildship.core.prefs
@@ -0,0 +1,2 @@
+connection.project.dir=../../../../android
+eclipse.preferences.version=1
diff --git a/node_modules/@react-native/gradle-plugin/shared-testutil/.settings/org.eclipse.jdt.core.prefs b/node_modules/@react-native/gradle-plugin/shared-testutil/.settings/org.eclipse.jdt.core.prefs
new file mode 100644
index 0000000..e72fb9c
--- /dev/null
+++ b/node_modules/@react-native/gradle-plugin/shared-testutil/.settings/org.eclipse.jdt.core.prefs
@@ -0,0 +1,4 @@
+eclipse.preferences.version=1
+org.eclipse.jdt.core.compiler.codegen.targetPlatform=11
+org.eclipse.jdt.core.compiler.compliance=17
+org.eclipse.jdt.core.compiler.source=17
diff --git a/node_modules/@react-native/gradle-plugin/shared-testutil/bin/main/com/facebook/react/tests/OsRule.kt b/node_modules/@react-native/gradle-plugin/shared-testutil/bin/main/com/facebook/react/tests/OsRule.kt
new file mode 100644
index 0000000..8d500d0
--- /dev/null
+++ b/node_modules/@react-native/gradle-plugin/shared-testutil/bin/main/com/facebook/react/tests/OsRule.kt
@@ -0,0 +1,52 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react.tests
+
+import org.junit.rules.TestRule
+import org.junit.runner.Description
+import org.junit.runners.model.Statement
+
+/**
+ * A JUnit [TestRule] to override values of [System.getProperties] with the support of the [WithOs]
+ * annotation.
+ */
+class OsRule : TestRule {
+
+  private var retainOs: String? = null
+  private var retainArch: String? = null
+
+  override fun apply(statement: Statement, description: Description): Statement {
+    return object : Statement() {
+      override fun evaluate() {
+        val annotation = description.annotations.filterIsInstance<WithOs>().firstOrNull()
+
+        annotation?.os?.propertyName?.let {
+          retainOs = System.getProperty(OS_NAME_KEY)
+          System.setProperty(OS_NAME_KEY, it)
+        }
+        annotation?.arch?.let {
+          if (it.isNotBlank()) {
+            retainArch = System.getProperty(OS_ARCH_KEY)
+            System.setProperty(OS_ARCH_KEY, it)
+          }
+        }
+        try {
+          statement.evaluate()
+        } finally {
+          retainOs?.let { System.setProperty(OS_NAME_KEY, it) }
+          retainArch?.let { System.setProperty(OS_ARCH_KEY, it) }
+        }
+      }
+    }
+  }
+
+  companion object {
+    const val OS_NAME_KEY = "os.name"
+    const val OS_ARCH_KEY = "os.arch"
+  }
+}
diff --git a/node_modules/@react-native/gradle-plugin/shared-testutil/bin/main/com/facebook/react/tests/WithOs.kt b/node_modules/@react-native/gradle-plugin/shared-testutil/bin/main/com/facebook/react/tests/WithOs.kt
new file mode 100644
index 0000000..45d0a00
--- /dev/null
+++ b/node_modules/@react-native/gradle-plugin/shared-testutil/bin/main/com/facebook/react/tests/WithOs.kt
@@ -0,0 +1,17 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react.tests
+
+/** Annotation to specify an Operating System to override the "os.name" System Property. */
+@Retention(AnnotationRetention.RUNTIME) annotation class WithOs(val os: OS, val arch: String = "")
+
+enum class OS(val propertyName: String) {
+  WIN("Windows"),
+  MAC("MacOs"),
+  LINUX("Linux")
+}
diff --git a/node_modules/@react-native/gradle-plugin/shared-testutil/build.gradle.kts b/node_modules/@react-native/gradle-plugin/shared-testutil/build.gradle.kts
index b3c0204..429e817 100644
--- a/node_modules/@react-native/gradle-plugin/shared-testutil/build.gradle.kts
+++ b/node_modules/@react-native/gradle-plugin/shared-testutil/build.gradle.kts
@@ -27,8 +27,8 @@ tasks.withType<KotlinCompile>().configureEach {
     apiVersion.set(KotlinVersion.KOTLIN_1_7)
     // See comment above on JDK 11 support
     jvmTarget.set(JvmTarget.JVM_11)
-    allWarningsAsErrors =
-        project.properties["enableWarningsAsErrors"]?.toString()?.toBoolean() ?: false
+    allWarningsAsErrors.set(
+        project.properties["enableWarningsAsErrors"]?.toString()?.toBoolean() ?: false)
   }
 }
 
diff --git a/node_modules/@react-native/gradle-plugin/shared/.classpath b/node_modules/@react-native/gradle-plugin/shared/.classpath
new file mode 100644
index 0000000..7c76343
--- /dev/null
+++ b/node_modules/@react-native/gradle-plugin/shared/.classpath
@@ -0,0 +1,19 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<classpath>
+	<classpathentry kind="src" output="bin/main" path="src/main/kotlin">
+		<attributes>
+			<attribute name="gradle_scope" value="main"/>
+			<attribute name="gradle_used_by_scope" value="main,test"/>
+		</attributes>
+	</classpathentry>
+	<classpathentry kind="src" output="bin/test" path="src/test/kotlin">
+		<attributes>
+			<attribute name="gradle_scope" value="test"/>
+			<attribute name="gradle_used_by_scope" value="test"/>
+			<attribute name="test" value="true"/>
+		</attributes>
+	</classpathentry>
+	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-11/"/>
+	<classpathentry kind="con" path="org.eclipse.buildship.core.gradleclasspathcontainer"/>
+	<classpathentry kind="output" path="bin/default"/>
+</classpath>
diff --git a/node_modules/@react-native/gradle-plugin/shared/.project b/node_modules/@react-native/gradle-plugin/shared/.project
new file mode 100644
index 0000000..e2f3fde
--- /dev/null
+++ b/node_modules/@react-native/gradle-plugin/shared/.project
@@ -0,0 +1,34 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<projectDescription>
+	<name>shared</name>
+	<comment>Project shared created by Buildship.</comment>
+	<projects>
+	</projects>
+	<buildSpec>
+		<buildCommand>
+			<name>org.eclipse.jdt.core.javabuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+		<buildCommand>
+			<name>org.eclipse.buildship.core.gradleprojectbuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+	</buildSpec>
+	<natures>
+		<nature>org.eclipse.jdt.core.javanature</nature>
+		<nature>org.eclipse.buildship.core.gradleprojectnature</nature>
+	</natures>
+	<filteredResources>
+		<filter>
+			<id>1749999528624</id>
+			<name></name>
+			<type>30</type>
+			<matcher>
+				<id>org.eclipse.core.resources.regexFilterMatcher</id>
+				<arguments>node_modules|\.git|__CREATED_BY_JAVA_LANGUAGE_SERVER__</arguments>
+			</matcher>
+		</filter>
+	</filteredResources>
+</projectDescription>
diff --git a/node_modules/@react-native/gradle-plugin/shared/.settings/org.eclipse.buildship.core.prefs b/node_modules/@react-native/gradle-plugin/shared/.settings/org.eclipse.buildship.core.prefs
new file mode 100644
index 0000000..68c9fab
--- /dev/null
+++ b/node_modules/@react-native/gradle-plugin/shared/.settings/org.eclipse.buildship.core.prefs
@@ -0,0 +1,2 @@
+connection.project.dir=../../../../android
+eclipse.preferences.version=1
diff --git a/node_modules/@react-native/gradle-plugin/shared/.settings/org.eclipse.jdt.core.prefs b/node_modules/@react-native/gradle-plugin/shared/.settings/org.eclipse.jdt.core.prefs
new file mode 100644
index 0000000..1d52336
--- /dev/null
+++ b/node_modules/@react-native/gradle-plugin/shared/.settings/org.eclipse.jdt.core.prefs
@@ -0,0 +1,15 @@
+eclipse.preferences.version=1
+org.eclipse.jdt.core.compiler.annotation.missingNonNullByDefaultAnnotation=ignore
+org.eclipse.jdt.core.compiler.annotation.nonnull=javax.annotation.Nonnull
+org.eclipse.jdt.core.compiler.annotation.nonnullbydefault=javax.annotation.ParametersAreNonnullByDefault
+org.eclipse.jdt.core.compiler.annotation.nullable=javax.annotation.Nullable
+org.eclipse.jdt.core.compiler.annotation.nullanalysis=enabled
+org.eclipse.jdt.core.compiler.codegen.targetPlatform=11
+org.eclipse.jdt.core.compiler.compliance=17
+org.eclipse.jdt.core.compiler.problem.nullAnnotationInferenceConflict=warning
+org.eclipse.jdt.core.compiler.problem.nullReference=warning
+org.eclipse.jdt.core.compiler.problem.nullSpecViolation=warning
+org.eclipse.jdt.core.compiler.problem.nullUncheckedConversion=ignore
+org.eclipse.jdt.core.compiler.problem.potentialNullReference=warning
+org.eclipse.jdt.core.compiler.problem.syntacticNullAnalysisForFields=enabled
+org.eclipse.jdt.core.compiler.source=17
diff --git a/node_modules/@react-native/gradle-plugin/shared/bin/main/com/facebook/react/model/ModelAutolinkingAndroidProjectJson.kt b/node_modules/@react-native/gradle-plugin/shared/bin/main/com/facebook/react/model/ModelAutolinkingAndroidProjectJson.kt
new file mode 100644
index 0000000..9a97eea
--- /dev/null
+++ b/node_modules/@react-native/gradle-plugin/shared/bin/main/com/facebook/react/model/ModelAutolinkingAndroidProjectJson.kt
@@ -0,0 +1,18 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react.model
+
+data class ModelAutolinkingAndroidProjectJson(
+    val sourceDir: String,
+    val appName: String,
+    val packageName: String,
+    val applicationId: String,
+    val mainActivity: String,
+    val watchModeCommandParams: List<String>?,
+    val dependencyConfiguration: String?
+)
diff --git a/node_modules/@react-native/gradle-plugin/shared/bin/main/com/facebook/react/model/ModelAutolinkingConfigJson.kt b/node_modules/@react-native/gradle-plugin/shared/bin/main/com/facebook/react/model/ModelAutolinkingConfigJson.kt
new file mode 100644
index 0000000..e2b3d3b
--- /dev/null
+++ b/node_modules/@react-native/gradle-plugin/shared/bin/main/com/facebook/react/model/ModelAutolinkingConfigJson.kt
@@ -0,0 +1,14 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react.model
+
+data class ModelAutolinkingConfigJson(
+    val reactNativeVersion: String,
+    val dependencies: Map<String, ModelAutolinkingDependenciesJson>?,
+    val project: ModelAutolinkingProjectJson?,
+)
diff --git a/node_modules/@react-native/gradle-plugin/shared/bin/main/com/facebook/react/model/ModelAutolinkingDependenciesJson.kt b/node_modules/@react-native/gradle-plugin/shared/bin/main/com/facebook/react/model/ModelAutolinkingDependenciesJson.kt
new file mode 100644
index 0000000..2373a83
--- /dev/null
+++ b/node_modules/@react-native/gradle-plugin/shared/bin/main/com/facebook/react/model/ModelAutolinkingDependenciesJson.kt
@@ -0,0 +1,18 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react.model
+
+data class ModelAutolinkingDependenciesJson(
+    val root: String,
+    val name: String,
+    val platforms: ModelAutolinkingDependenciesPlatformJson?
+) {
+
+  val nameCleansed: String
+    get() = name.replace(Regex("[~*!'()]+"), "_").replace(Regex("^@([\\w-.]+)/"), "$1_")
+}
diff --git a/node_modules/@react-native/gradle-plugin/shared/bin/main/com/facebook/react/model/ModelAutolinkingDependenciesPlatformAndroidJson.kt b/node_modules/@react-native/gradle-plugin/shared/bin/main/com/facebook/react/model/ModelAutolinkingDependenciesPlatformAndroidJson.kt
new file mode 100644
index 0000000..5285d76
--- /dev/null
+++ b/node_modules/@react-native/gradle-plugin/shared/bin/main/com/facebook/react/model/ModelAutolinkingDependenciesPlatformAndroidJson.kt
@@ -0,0 +1,23 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react.model
+
+data class ModelAutolinkingDependenciesPlatformAndroidJson(
+    val sourceDir: String,
+    val packageImportPath: String,
+    val packageInstance: String,
+    val buildTypes: List<String>,
+    val libraryName: String? = null,
+    val componentDescriptors: List<String> = emptyList(),
+    val cmakeListsPath: String? = null,
+    val cxxModuleCMakeListsModuleName: String? = null,
+    val cxxModuleCMakeListsPath: String? = null,
+    val cxxModuleHeaderName: String? = null,
+    val dependencyConfiguration: String? = null,
+    val isPureCxxDependency: Boolean? = null
+)
diff --git a/node_modules/@react-native/gradle-plugin/shared/bin/main/com/facebook/react/model/ModelAutolinkingDependenciesPlatformJson.kt b/node_modules/@react-native/gradle-plugin/shared/bin/main/com/facebook/react/model/ModelAutolinkingDependenciesPlatformJson.kt
new file mode 100644
index 0000000..c6b1e30
--- /dev/null
+++ b/node_modules/@react-native/gradle-plugin/shared/bin/main/com/facebook/react/model/ModelAutolinkingDependenciesPlatformJson.kt
@@ -0,0 +1,12 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react.model
+
+data class ModelAutolinkingDependenciesPlatformJson(
+    val android: ModelAutolinkingDependenciesPlatformAndroidJson?
+)
diff --git a/node_modules/@react-native/gradle-plugin/shared/bin/main/com/facebook/react/model/ModelAutolinkingProjectJson.kt b/node_modules/@react-native/gradle-plugin/shared/bin/main/com/facebook/react/model/ModelAutolinkingProjectJson.kt
new file mode 100644
index 0000000..fdb2b62
--- /dev/null
+++ b/node_modules/@react-native/gradle-plugin/shared/bin/main/com/facebook/react/model/ModelAutolinkingProjectJson.kt
@@ -0,0 +1,10 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react.model
+
+data class ModelAutolinkingProjectJson(val android: ModelAutolinkingAndroidProjectJson?)
diff --git a/node_modules/@react-native/gradle-plugin/shared/bin/main/com/facebook/react/model/ModelCodegenConfig.kt b/node_modules/@react-native/gradle-plugin/shared/bin/main/com/facebook/react/model/ModelCodegenConfig.kt
new file mode 100644
index 0000000..afd02bc
--- /dev/null
+++ b/node_modules/@react-native/gradle-plugin/shared/bin/main/com/facebook/react/model/ModelCodegenConfig.kt
@@ -0,0 +1,16 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react.model
+
+data class ModelCodegenConfig(
+    val name: String?,
+    val type: String?,
+    val jsSrcsDir: String?,
+    val android: ModelCodegenConfigAndroid?,
+    val includesGeneratedCode: Boolean?,
+)
diff --git a/node_modules/@react-native/gradle-plugin/shared/bin/main/com/facebook/react/model/ModelCodegenConfigAndroid.kt b/node_modules/@react-native/gradle-plugin/shared/bin/main/com/facebook/react/model/ModelCodegenConfigAndroid.kt
new file mode 100644
index 0000000..7619098
--- /dev/null
+++ b/node_modules/@react-native/gradle-plugin/shared/bin/main/com/facebook/react/model/ModelCodegenConfigAndroid.kt
@@ -0,0 +1,10 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react.model
+
+data class ModelCodegenConfigAndroid(val javaPackageName: String?)
diff --git a/node_modules/@react-native/gradle-plugin/shared/bin/main/com/facebook/react/model/ModelPackageJson.kt b/node_modules/@react-native/gradle-plugin/shared/bin/main/com/facebook/react/model/ModelPackageJson.kt
new file mode 100644
index 0000000..ab8c90d
--- /dev/null
+++ b/node_modules/@react-native/gradle-plugin/shared/bin/main/com/facebook/react/model/ModelPackageJson.kt
@@ -0,0 +1,10 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react.model
+
+data class ModelPackageJson(val version: String, val codegenConfig: ModelCodegenConfig?)
diff --git a/node_modules/@react-native/gradle-plugin/shared/bin/main/com/facebook/react/utils/JsonUtils.kt b/node_modules/@react-native/gradle-plugin/shared/bin/main/com/facebook/react/utils/JsonUtils.kt
new file mode 100644
index 0000000..6a6eeba
--- /dev/null
+++ b/node_modules/@react-native/gradle-plugin/shared/bin/main/com/facebook/react/utils/JsonUtils.kt
@@ -0,0 +1,43 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react.utils
+
+import com.facebook.react.model.ModelAutolinkingConfigJson
+import com.facebook.react.model.ModelPackageJson
+import com.google.gson.Gson
+import java.io.File
+
+object JsonUtils {
+  private val gsonConverter = Gson()
+
+  fun fromPackageJson(input: File): ModelPackageJson? =
+      input.bufferedReader().use {
+        runCatching { gsonConverter.fromJson(it, ModelPackageJson::class.java) }.getOrNull()
+      }
+
+  fun fromAutolinkingConfigJson(input: File): ModelAutolinkingConfigJson? =
+      input.bufferedReader().use { reader ->
+        runCatching {
+              // We sanitize the output of the `config` command as it could contain debug logs
+              // such as:
+              //
+              // > AwesomeProject@0.0.1 npx
+              // > rnc-cli config
+              //
+              // which will render the JSON invalid.
+              val content =
+                  reader
+                      .readLines()
+                      .filterNot { line -> line.startsWith(">") }
+                      .joinToString("\n")
+                      .trim()
+              gsonConverter.fromJson(content, ModelAutolinkingConfigJson::class.java)
+            }
+            .getOrNull()
+      }
+}
diff --git a/node_modules/@react-native/gradle-plugin/shared/bin/main/com/facebook/react/utils/KotlinStdlibCompatUtils.kt b/node_modules/@react-native/gradle-plugin/shared/bin/main/com/facebook/react/utils/KotlinStdlibCompatUtils.kt
new file mode 100644
index 0000000..dd0df7c
--- /dev/null
+++ b/node_modules/@react-native/gradle-plugin/shared/bin/main/com/facebook/react/utils/KotlinStdlibCompatUtils.kt
@@ -0,0 +1,32 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react.utils
+
+import java.util.Locale
+
+object KotlinStdlibCompatUtils {
+  @Suppress("PLATFORM_CLASS_MAPPED_TO_KOTLIN")
+  fun String.lowercaseCompat(): String = (this as java.lang.String).toLowerCase(Locale.ROOT)
+
+  fun String.capitalizeCompat(): String =
+      if (isNotEmpty()) {
+        val firstChar = this[0]
+        val uppercaseChar = Character.toUpperCase(firstChar)
+        val restString = this@capitalizeCompat.substring(1)
+        uppercaseChar + restString
+      } else {
+        this
+      }
+
+  fun String.toBooleanStrictOrNullCompat(): Boolean? =
+      when (this) {
+        "true" -> true
+        "false" -> false
+        else -> null
+      }
+}
diff --git a/node_modules/@react-native/gradle-plugin/shared/bin/main/com/facebook/react/utils/Os.kt b/node_modules/@react-native/gradle-plugin/shared/bin/main/com/facebook/react/utils/Os.kt
new file mode 100644
index 0000000..a741fde
--- /dev/null
+++ b/node_modules/@react-native/gradle-plugin/shared/bin/main/com/facebook/react/utils/Os.kt
@@ -0,0 +1,45 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react.utils
+
+import com.facebook.react.utils.KotlinStdlibCompatUtils.lowercaseCompat
+import java.io.File
+
+object Os {
+
+  fun isWindows(): Boolean =
+      System.getProperty("os.name")?.lowercaseCompat()?.contains("windows") ?: false
+
+  fun isMac(): Boolean = System.getProperty("os.name")?.lowercaseCompat()?.contains("mac") ?: false
+
+  fun isLinuxAmd64(): Boolean {
+    val osNameMatch = System.getProperty("os.name")?.lowercaseCompat()?.contains("linux") ?: false
+    val archMatch = System.getProperty("os.arch")?.lowercaseCompat()?.contains("amd64") ?: false
+    return osNameMatch && archMatch
+  }
+
+  fun String.unixifyPath() =
+      this.replace('\\', '/').replace(":", "").let {
+        if (!it.startsWith("/")) {
+          "/$it"
+        } else {
+          it
+        }
+      }
+
+  /**
+   * As Gradle doesn't support well path with spaces on Windows, we need to return relative path on
+   * Win. On Linux & Mac we'll default to return absolute path.
+   */
+  fun File.cliPath(base: File): String =
+      if (isWindows()) {
+        this.relativeTo(base).path
+      } else {
+        absolutePath
+      }
+}
diff --git a/node_modules/@react-native/gradle-plugin/shared/bin/main/com/facebook/react/utils/TaskUtils.kt b/node_modules/@react-native/gradle-plugin/shared/bin/main/com/facebook/react/utils/TaskUtils.kt
new file mode 100644
index 0000000..ebb3185
--- /dev/null
+++ b/node_modules/@react-native/gradle-plugin/shared/bin/main/com/facebook/react/utils/TaskUtils.kt
@@ -0,0 +1,27 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react.utils
+
+fun windowsAwareCommandLine(vararg args: Any): List<Any> = windowsAwareCommandLine(args.toList())
+
+fun windowsAwareCommandLine(args: List<Any>): List<Any> =
+    if (Os.isWindows()) {
+      listOf("cmd", "/c") + args
+    } else {
+      args
+    }
+
+fun windowsAwareBashCommandLine(
+    vararg args: String,
+    bashWindowsHome: String? = null
+): List<String> =
+    if (Os.isWindows()) {
+      listOf(bashWindowsHome ?: "bash", "-c") + args
+    } else {
+      args.toList()
+    }
diff --git a/node_modules/@react-native/gradle-plugin/shared/bin/test/com/facebook/react/utils/JsonUtilsTest.kt b/node_modules/@react-native/gradle-plugin/shared/bin/test/com/facebook/react/utils/JsonUtilsTest.kt
new file mode 100644
index 0000000..8c718fc
--- /dev/null
+++ b/node_modules/@react-native/gradle-plugin/shared/bin/test/com/facebook/react/utils/JsonUtilsTest.kt
@@ -0,0 +1,362 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react.utils
+
+import org.assertj.core.api.Assertions.assertThat
+import org.intellij.lang.annotations.Language
+import org.junit.Rule
+import org.junit.Test
+import org.junit.rules.TemporaryFolder
+
+class JsonUtilsTest {
+
+  @get:Rule val tempFolder = TemporaryFolder()
+
+  @Test
+  fun fromPackageJson_withInvalidJson_returnsNull() {
+    val invalidJson = createJsonFile("""¯\_(ツ)_/¯""")
+
+    assertThat(JsonUtils.fromPackageJson(invalidJson)).isNull()
+  }
+
+  @Test
+  fun fromPackageJson_withEmptyJson_returnsEmptyObject() {
+    val invalidJson = createJsonFile("""{}""")
+
+    val parsed = JsonUtils.fromPackageJson(invalidJson)
+
+    assertThat(parsed).isNotNull()
+    assertThat(parsed?.codegenConfig).isNull()
+  }
+
+  @Test
+  fun fromPackageJson_withOldJsonConfig_returnsAnEmptyLibrary() {
+    val oldJsonConfig =
+        createJsonFile(
+            """
+      {
+        "name": "yet another npm package",
+        "codegenConfig": {
+          "libraries": [
+            {
+              "name": "an awesome library",
+              "jsSrcsDir": "../js/",
+              "android": {}
+            }
+          ]
+        }
+      }
+      """
+                .trimIndent())
+
+    val parsed = JsonUtils.fromPackageJson(oldJsonConfig)!!
+
+    assertThat(parsed.codegenConfig?.name).isNull()
+    assertThat(parsed.codegenConfig?.jsSrcsDir).isNull()
+    assertThat(parsed.codegenConfig?.android).isNull()
+  }
+
+  @Test
+  fun fromPackageJson_withValidJson_parsesCorrectly() {
+    val validJson =
+        createJsonFile(
+            """
+      {
+        "name": "yet another npm package",
+        "codegenConfig": {
+          "name": "an awesome library",
+          "jsSrcsDir": "../js/",
+          "android": {
+            "javaPackageName": "com.awesome.library"
+          },
+          "ios": {
+            "other ios only keys": "which are ignored during parsing"
+          }
+        }
+      }
+      """
+                .trimIndent())
+
+    val parsed = JsonUtils.fromPackageJson(validJson)!!
+
+    assertThat("an awesome library").isEqualTo(parsed.codegenConfig!!.name)
+    assertThat("../js/").isEqualTo(parsed.codegenConfig!!.jsSrcsDir)
+    assertThat("com.awesome.library").isEqualTo(parsed.codegenConfig!!.android!!.javaPackageName)
+  }
+
+  @Test
+  fun fromReactNativePackageJson_withInvalidJson_returnsNull() {
+    val invalidJson = createJsonFile("""¯\_(ツ)_/¯""")
+
+    assertThat(JsonUtils.fromPackageJson(invalidJson)).isNull()
+  }
+
+  @Test
+  fun fromReactNativePackageJson_withEmptyJson_returnsEmptyObject() {
+    val invalidJson = createJsonFile("""{}""")
+
+    val parsed = JsonUtils.fromPackageJson(invalidJson)
+
+    assertThat(parsed).isNotNull()
+    assertThat(parsed?.version).isNull()
+  }
+
+  @Test
+  fun fromReactNativePackageJson_withValidJson_parsesJsonCorrectly() {
+    val validJson =
+        createJsonFile(
+            """
+      {
+        "version": "1000.0.0"
+      }
+      """
+                .trimIndent())
+    val parsed = JsonUtils.fromPackageJson(validJson)!!
+
+    assertThat("1000.0.0").isEqualTo(parsed.version)
+  }
+
+  @Test
+  fun fromAutolinkingConfigJson_withInvalidJson_returnsNull() {
+    val invalidJson = createJsonFile("""¯\_(ツ)_/¯""")
+
+    assertThat(JsonUtils.fromAutolinkingConfigJson(invalidJson)).isNull()
+  }
+
+  @Test
+  fun fromAutolinkingConfigJson_withSimpleJson_returnsIt() {
+    val validJson =
+        createJsonFile(
+            """
+      {
+        "reactNativeVersion": "1000.0.0"
+      }
+      """
+                .trimIndent())
+    val parsed = JsonUtils.fromAutolinkingConfigJson(validJson)!!
+
+    assertThat("1000.0.0").isEqualTo(parsed.reactNativeVersion)
+  }
+
+  @Test
+  fun fromAutolinkingConfigJson_withProjectSpecified_canParseIt() {
+    val validJson =
+        createJsonFile(
+            """
+      {
+        "reactNativeVersion": "1000.0.0",
+        "project": {
+          "ios": {
+            "sourceDir": "./packages/rn-tester",
+            "xcodeProject": {
+              "name": "RNTesterPods.xcworkspace",
+              "isWorkspace": true
+            },
+            "automaticPodsInstallation": false
+          },
+          "android": {
+            "sourceDir": "./packages/rn-tester",
+            "appName": "RN-Tester",
+            "packageName": "com.facebook.react.uiapp",
+            "applicationId": "com.facebook.react.uiapp",
+            "mainActivity": ".RNTesterActivity",
+            "watchModeCommandParams": [
+              "--mode HermesDebug"
+            ],
+            "dependencyConfiguration": "implementation"
+          }
+        }
+      }
+      """
+                .trimIndent())
+    val parsed = JsonUtils.fromAutolinkingConfigJson(validJson)!!
+
+    assertThat("./packages/rn-tester").isEqualTo(parsed.project!!.android!!.sourceDir)
+    assertThat("RN-Tester").isEqualTo(parsed.project!!.android!!.appName)
+    assertThat("com.facebook.react.uiapp").isEqualTo(parsed.project!!.android!!.packageName)
+    assertThat("com.facebook.react.uiapp").isEqualTo(parsed.project!!.android!!.applicationId)
+    assertThat(".RNTesterActivity").isEqualTo(parsed.project!!.android!!.mainActivity)
+    assertThat("--mode HermesDebug")
+        .isEqualTo(parsed.project!!.android!!.watchModeCommandParams!![0])
+    assertThat("implementation").isEqualTo(parsed.project!!.android!!.dependencyConfiguration)
+  }
+
+  @Test
+  fun fromAutolinkingConfigJson_withInfoLogs_sanitizeAndParseIt() {
+    @Suppress("JsonStandardCompliance")
+    val validJson =
+        createJsonFile(
+            """
+      
+      > AwesomeProject@0.0.1 npx
+      > rnc-cli config
+      
+       {
+        "reactNativeVersion": "1000.0.0",
+        "project": {
+          "ios": {
+            "sourceDir": "./packages/rn-tester",
+            "xcodeProject": {
+              "name": "RNTesterPods.xcworkspace",
+              "isWorkspace": true
+            },
+            "automaticPodsInstallation": false
+          },
+          "android": {
+            "sourceDir": "./packages/rn-tester",
+            "appName": "RN-Tester",
+            "packageName": "com.facebook.react.uiapp",
+            "applicationId": "com.facebook.react.uiapp",
+            "mainActivity": ".RNTesterActivity",
+            "watchModeCommandParams": [
+              "--mode HermesDebug"
+            ],
+            "dependencyConfiguration": "implementation"
+          }
+        }
+      } 
+      """
+                .trimIndent())
+    val parsed = JsonUtils.fromAutolinkingConfigJson(validJson)!!
+
+    assertThat("./packages/rn-tester").isEqualTo(parsed.project!!.android!!.sourceDir)
+    assertThat("RN-Tester").isEqualTo(parsed.project!!.android!!.appName)
+    assertThat("com.facebook.react.uiapp").isEqualTo(parsed.project!!.android!!.packageName)
+    assertThat("com.facebook.react.uiapp").isEqualTo(parsed.project!!.android!!.applicationId)
+    assertThat(".RNTesterActivity").isEqualTo(parsed.project!!.android!!.mainActivity)
+    assertThat("--mode HermesDebug")
+        .isEqualTo(parsed.project!!.android!!.watchModeCommandParams!![0])
+    assertThat("implementation").isEqualTo(parsed.project!!.android!!.dependencyConfiguration)
+  }
+
+  @Test
+  fun fromAutolinkingConfigJson_withDependenciesSpecified_canParseIt() {
+    val validJson =
+        createJsonFile(
+            """
+      {
+        "reactNativeVersion": "1000.0.0",
+        "dependencies": {
+          "@react-native/oss-library-example": {
+            "root": "./node_modules/@react-native/oss-library-example",
+            "name": "@react-native/oss-library-example",
+            "platforms": {
+              "ios": {
+                "podspecPath": "./node_modules/@react-native/oss-library-example/OSSLibraryExample.podspec",
+                "version": "0.0.1",
+                "configurations": [],
+                "scriptPhases": []
+              },
+              "android": {
+                "sourceDir": "./node_modules/@react-native/oss-library-example/android",
+                "packageImportPath": "import com.facebook.react.osslibraryexample.OSSLibraryExamplePackage;",
+                "packageInstance": "new OSSLibraryExamplePackage()",
+                "buildTypes": ["staging", "debug", "release"],
+                "libraryName": "OSSLibraryExampleSpec",
+                "componentDescriptors": [
+                  "SampleNativeComponentComponentDescriptor"
+                ],
+                "cmakeListsPath": "./node_modules/@react-native/oss-library-example/android/build/generated/source/codegen/jni/CMakeLists.txt",
+                "cxxModuleCMakeListsModuleName": null,
+                "cxxModuleCMakeListsPath": null,
+                "cxxModuleHeaderName": null,
+                "dependencyConfiguration": "implementation",
+                "isPureCxxDependency": false
+              }
+            }
+          }
+        }
+      }
+      """
+                .trimIndent())
+    val parsed = JsonUtils.fromAutolinkingConfigJson(validJson)!!
+
+    assertThat("./node_modules/@react-native/oss-library-example")
+        .isEqualTo(parsed.dependencies!!["@react-native/oss-library-example"]!!.root)
+    assertThat("@react-native/oss-library-example")
+        .isEqualTo(parsed.dependencies!!["@react-native/oss-library-example"]!!.name)
+    assertThat("react-native_oss-library-example")
+        .isEqualTo(parsed.dependencies!!["@react-native/oss-library-example"]!!.nameCleansed)
+    assertThat("./node_modules/@react-native/oss-library-example/android")
+        .isEqualTo(
+            parsed.dependencies!!["@react-native/oss-library-example"]!!
+                .platforms!!
+                .android!!
+                .sourceDir)
+    assertThat("import com.facebook.react.osslibraryexample.OSSLibraryExamplePackage;")
+        .isEqualTo(
+            parsed.dependencies!!["@react-native/oss-library-example"]!!
+                .platforms!!
+                .android!!
+                .packageImportPath)
+    assertThat("new OSSLibraryExamplePackage()")
+        .isEqualTo(
+            parsed.dependencies!!["@react-native/oss-library-example"]!!
+                .platforms!!
+                .android!!
+                .packageInstance)
+    assertThat(listOf("staging", "debug", "release"))
+        .isEqualTo(
+            parsed.dependencies!!["@react-native/oss-library-example"]!!
+                .platforms!!
+                .android!!
+                .buildTypes)
+    assertThat("OSSLibraryExampleSpec")
+        .isEqualTo(
+            parsed.dependencies!!["@react-native/oss-library-example"]!!
+                .platforms!!
+                .android!!
+                .libraryName)
+    assertThat(listOf("SampleNativeComponentComponentDescriptor"))
+        .isEqualTo(
+            parsed.dependencies!!["@react-native/oss-library-example"]!!
+                .platforms!!
+                .android!!
+                .componentDescriptors)
+    assertThat(
+            "./node_modules/@react-native/oss-library-example/android/build/generated/source/codegen/jni/CMakeLists.txt")
+        .isEqualTo(
+            parsed.dependencies!!["@react-native/oss-library-example"]!!
+                .platforms!!
+                .android!!
+                .cmakeListsPath)
+    assertThat(
+            parsed.dependencies!!["@react-native/oss-library-example"]!!
+                .platforms!!
+                .android!!
+                .cxxModuleHeaderName)
+        .isNull()
+    assertThat(
+            parsed.dependencies!!["@react-native/oss-library-example"]!!
+                .platforms!!
+                .android!!
+                .cxxModuleCMakeListsPath)
+        .isNull()
+    assertThat(
+            parsed.dependencies!!["@react-native/oss-library-example"]!!
+                .platforms!!
+                .android!!
+                .cxxModuleCMakeListsModuleName)
+        .isNull()
+    assertThat("implementation")
+        .isEqualTo(
+            parsed.dependencies!!["@react-native/oss-library-example"]!!
+                .platforms!!
+                .android!!
+                .dependencyConfiguration)
+    assertThat(
+            parsed.dependencies!!["@react-native/oss-library-example"]!!
+                .platforms!!
+                .android!!
+                .isPureCxxDependency!!)
+        .isFalse()
+  }
+
+  private fun createJsonFile(@Language("JSON") input: String) =
+      tempFolder.newFile().apply { writeText(input) }
+}
diff --git a/node_modules/@react-native/gradle-plugin/shared/bin/test/com/facebook/react/utils/KotlinStdlibCompatUtilsTest.kt b/node_modules/@react-native/gradle-plugin/shared/bin/test/com/facebook/react/utils/KotlinStdlibCompatUtilsTest.kt
new file mode 100644
index 0000000..177c3c7
--- /dev/null
+++ b/node_modules/@react-native/gradle-plugin/shared/bin/test/com/facebook/react/utils/KotlinStdlibCompatUtilsTest.kt
@@ -0,0 +1,82 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react.utils
+
+import com.facebook.react.utils.KotlinStdlibCompatUtils.capitalizeCompat
+import com.facebook.react.utils.KotlinStdlibCompatUtils.lowercaseCompat
+import com.facebook.react.utils.KotlinStdlibCompatUtils.toBooleanStrictOrNullCompat
+import org.assertj.core.api.Assertions.assertThat
+import org.junit.Test
+
+class KotlinStdlibCompatUtilsTest {
+
+  @Test
+  fun lowercaseCompat_withEmptyString() {
+    assertThat("".lowercaseCompat()).isEqualTo("")
+  }
+
+  @Test
+  fun lowercaseCompat_withLowercaseString() {
+    assertThat("frodo".lowercaseCompat()).isEqualTo("frodo")
+  }
+
+  @Test
+  fun lowercaseCompat_withTitlecaseString() {
+    assertThat("Frodo".lowercaseCompat()).isEqualTo("frodo")
+  }
+
+  @Test
+  fun lowercaseCompat_withUppercaseString() {
+    assertThat("FRODO".lowercaseCompat()).isEqualTo("frodo")
+  }
+
+  @Test
+  fun capitalizeCompat_withEmptyString() {
+    assertThat("".capitalizeCompat()).isEqualTo("")
+  }
+
+  @Test
+  fun capitalizeCompat_withLowercaseString() {
+    assertThat("bilbo".capitalizeCompat()).isEqualTo("Bilbo")
+  }
+
+  @Test
+  fun capitalizeCompat_withTitlecaseString() {
+    assertThat("Bilbo".capitalizeCompat()).isEqualTo("Bilbo")
+  }
+
+  @Test
+  fun capitalizeCompat_withUppercaseString() {
+    assertThat("BILBO".capitalizeCompat()).isEqualTo("BILBO")
+  }
+
+  @Test
+  fun toBooleanStrictOrNullCompat_withEmptyString() {
+    assertThat("".toBooleanStrictOrNullCompat()).isNull()
+  }
+
+  @Test
+  fun toBooleanStrictOrNullCompat_withfalse() {
+    assertThat("false".toBooleanStrictOrNullCompat()).isFalse()
+  }
+
+  @Test
+  fun toBooleanStrictOrNullCompat_withCapitalTrue_returnsNull() {
+    assertThat("True".toBooleanStrictOrNullCompat()).isNull()
+  }
+
+  @Test
+  fun toBooleanStrictOrNullCompat_withCapitalFalse_returnsNull() {
+    assertThat("False".toBooleanStrictOrNullCompat()).isNull()
+  }
+
+  @Test
+  fun toBooleanStrictOrNullCompat_withRandomInput_returnsNull() {
+    assertThat("maybe".toBooleanStrictOrNullCompat()).isNull()
+  }
+}
diff --git a/node_modules/@react-native/gradle-plugin/shared/bin/test/com/facebook/react/utils/OsTest.kt b/node_modules/@react-native/gradle-plugin/shared/bin/test/com/facebook/react/utils/OsTest.kt
new file mode 100644
index 0000000..bf535ad
--- /dev/null
+++ b/node_modules/@react-native/gradle-plugin/shared/bin/test/com/facebook/react/utils/OsTest.kt
@@ -0,0 +1,87 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react.utils
+
+import com.facebook.react.tests.OS
+import com.facebook.react.tests.OsRule
+import com.facebook.react.tests.WithOs
+import com.facebook.react.utils.Os.cliPath
+import com.facebook.react.utils.Os.unixifyPath
+import org.assertj.core.api.Assertions.assertThat
+import org.junit.Rule
+import org.junit.Test
+import org.junit.rules.TemporaryFolder
+
+class OsTest {
+
+  @get:Rule val osRule = OsRule()
+  @get:Rule val tempFolder = TemporaryFolder()
+
+  @Test
+  @WithOs(OS.LINUX, "amd64")
+  fun onLinuxAmd64_checksOsCorrectly() {
+    assertThat(Os.isWindows()).isFalse()
+    assertThat(Os.isMac()).isFalse()
+    assertThat(Os.isLinuxAmd64()).isTrue()
+  }
+
+  @Test
+  @WithOs(OS.MAC)
+  fun onMac_checksOsCorrectly() {
+    assertThat(Os.isWindows()).isFalse()
+    assertThat(Os.isMac()).isTrue()
+    assertThat(Os.isLinuxAmd64()).isFalse()
+  }
+
+  @Test
+  @WithOs(OS.WIN)
+  fun isWindows_onWindows_returnsTrue() {
+    assertThat(Os.isWindows()).isTrue()
+    assertThat(Os.isMac()).isFalse()
+    assertThat(Os.isLinuxAmd64()).isFalse()
+  }
+
+  @Test
+  fun unixifyPath_withAUnixPath_doesNothing() {
+    val aUnixPath = "/just/a/unix/path.sh"
+
+    assertThat(aUnixPath).isEqualTo(aUnixPath.unixifyPath())
+  }
+
+  @Test
+  fun unixifyPath_withAWindowsPath_convertsItCorrectly() {
+    val aWindowsPath = "D:\\just\\a\\windows\\path\\"
+
+    assertThat("/D/just/a/windows/path/").isEqualTo(aWindowsPath.unixifyPath())
+  }
+
+  @Test
+  @WithOs(OS.WIN)
+  fun cliPath_onWindows_returnsRelativePath() {
+    val tempFile = tempFolder.newFile("test.txt").apply { createNewFile() }
+
+    assertThat(tempFile.relativeTo(tempFolder.root).path)
+        .isEqualTo(tempFile.cliPath(tempFolder.root))
+  }
+
+  @Test
+  @WithOs(OS.LINUX)
+  fun cliPath_onLinux_returnsAbsolutePath() {
+    val tempFile = tempFolder.newFile("test.txt").apply { createNewFile() }
+
+    assertThat(tempFile.absolutePath).isEqualTo(tempFile.cliPath(tempFolder.root))
+  }
+
+  @Test
+  @WithOs(OS.MAC)
+  fun cliPath_onMac_returnsAbsolutePath() {
+    val tempFile = tempFolder.newFile("test.txt").apply { createNewFile() }
+
+    assertThat(tempFile.absolutePath).isEqualTo(tempFile.cliPath(tempFolder.root))
+  }
+}
diff --git a/node_modules/@react-native/gradle-plugin/shared/bin/test/com/facebook/react/utils/TaskUtilsTest.kt b/node_modules/@react-native/gradle-plugin/shared/bin/test/com/facebook/react/utils/TaskUtilsTest.kt
new file mode 100644
index 0000000..276c42f
--- /dev/null
+++ b/node_modules/@react-native/gradle-plugin/shared/bin/test/com/facebook/react/utils/TaskUtilsTest.kt
@@ -0,0 +1,76 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react.utils
+
+import com.facebook.react.tests.OS
+import com.facebook.react.tests.OsRule
+import com.facebook.react.tests.WithOs
+import org.assertj.core.api.Assertions.assertThat
+import org.junit.Rule
+import org.junit.Test
+
+class TaskUtilsTest {
+
+  @get:Rule val osRule = OsRule()
+
+  @Test
+  fun windowsAwareCommandLine_withEmptyInput_isEmpty() {
+    assertThat(windowsAwareCommandLine().isEmpty()).isTrue()
+  }
+
+  @Test
+  fun windowsAwareCommandLine_withList_isEqualAsVararg() {
+    assertThat(windowsAwareCommandLine(listOf("a", "b", "c")))
+        .isEqualTo(windowsAwareCommandLine("a", "b", "c"))
+  }
+
+  @Test
+  @WithOs(OS.MAC)
+  fun windowsAwareCommandLine_onMac_returnsTheList() {
+    assertThat(listOf("a", "b", "c")).isEqualTo(windowsAwareCommandLine("a", "b", "c"))
+  }
+
+  @Test
+  @WithOs(OS.LINUX)
+  fun windowsAwareCommandLine_onLinux_returnsTheList() {
+    assertThat(listOf("a", "b", "c")).isEqualTo(windowsAwareCommandLine("a", "b", "c"))
+  }
+
+  @Test
+  @WithOs(OS.WIN)
+  fun windowsAwareCommandLine_onWindows_prependsCmd() {
+    assertThat(listOf("cmd", "/c", "a", "b", "c")).isEqualTo(windowsAwareCommandLine("a", "b", "c"))
+  }
+
+  @Test
+  @WithOs(OS.MAC)
+  fun windowsAwareBashCommandLine_onMac_returnsTheList() {
+    assertThat(listOf("a", "b", "c"))
+        .isEqualTo(windowsAwareBashCommandLine("a", "b", "c", bashWindowsHome = "abc"))
+  }
+
+  @Test
+  @WithOs(OS.LINUX)
+  fun windowsAwareBashCommandLine_onLinux_returnsTheList() {
+    assertThat(listOf("a", "b", "c")).isEqualTo(windowsAwareBashCommandLine("a", "b", "c"))
+  }
+
+  @Test
+  @WithOs(OS.WIN)
+  fun windowsAwareBashCommandLine_onWindows_prependsBash() {
+    assertThat(listOf("bash", "-c", "a", "b", "c"))
+        .isEqualTo(windowsAwareBashCommandLine("a", "b", "c"))
+  }
+
+  @Test
+  @WithOs(OS.WIN)
+  fun windowsAwareBashCommandLine_onWindows_prependsCustomBashPath() {
+    assertThat(listOf("/custom/bash", "-c", "a", "b", "c"))
+        .isEqualTo(windowsAwareBashCommandLine("a", "b", "c", bashWindowsHome = "/custom/bash"))
+  }
+}
diff --git a/node_modules/@react-native/gradle-plugin/shared/build.gradle.kts b/node_modules/@react-native/gradle-plugin/shared/build.gradle.kts
index b705a7c..7297516 100644
--- a/node_modules/@react-native/gradle-plugin/shared/build.gradle.kts
+++ b/node_modules/@react-native/gradle-plugin/shared/build.gradle.kts
@@ -33,8 +33,8 @@ tasks.withType<KotlinCompile>().configureEach {
     apiVersion.set(KotlinVersion.KOTLIN_1_7)
     // See comment above on JDK 11 support
     jvmTarget.set(JvmTarget.JVM_11)
-    allWarningsAsErrors =
-        project.properties["enableWarningsAsErrors"]?.toString()?.toBoolean() ?: false
+    allWarningsAsErrors.set(
+        project.properties["enableWarningsAsErrors"]?.toString()?.toBoolean() ?: false)
   }
 }
 
diff --git a/node_modules/@react-native/gradle-plugin/shared/build/classes/kotlin/main/META-INF/shared.kotlin_module b/node_modules/@react-native/gradle-plugin/shared/build/classes/kotlin/main/META-INF/shared.kotlin_module
new file mode 100644
index 0000000..fd8e23a
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/shared/build/classes/kotlin/main/META-INF/shared.kotlin_module differ
diff --git a/node_modules/@react-native/gradle-plugin/shared/build/classes/kotlin/main/com/facebook/react/model/ModelAutolinkingAndroidProjectJson.class b/node_modules/@react-native/gradle-plugin/shared/build/classes/kotlin/main/com/facebook/react/model/ModelAutolinkingAndroidProjectJson.class
new file mode 100644
index 0000000..29b7f21
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/shared/build/classes/kotlin/main/com/facebook/react/model/ModelAutolinkingAndroidProjectJson.class differ
diff --git a/node_modules/@react-native/gradle-plugin/shared/build/classes/kotlin/main/com/facebook/react/model/ModelAutolinkingConfigJson.class b/node_modules/@react-native/gradle-plugin/shared/build/classes/kotlin/main/com/facebook/react/model/ModelAutolinkingConfigJson.class
new file mode 100644
index 0000000..abf850d
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/shared/build/classes/kotlin/main/com/facebook/react/model/ModelAutolinkingConfigJson.class differ
diff --git a/node_modules/@react-native/gradle-plugin/shared/build/classes/kotlin/main/com/facebook/react/model/ModelAutolinkingDependenciesJson.class b/node_modules/@react-native/gradle-plugin/shared/build/classes/kotlin/main/com/facebook/react/model/ModelAutolinkingDependenciesJson.class
new file mode 100644
index 0000000..debcf44
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/shared/build/classes/kotlin/main/com/facebook/react/model/ModelAutolinkingDependenciesJson.class differ
diff --git a/node_modules/@react-native/gradle-plugin/shared/build/classes/kotlin/main/com/facebook/react/model/ModelAutolinkingDependenciesPlatformAndroidJson.class b/node_modules/@react-native/gradle-plugin/shared/build/classes/kotlin/main/com/facebook/react/model/ModelAutolinkingDependenciesPlatformAndroidJson.class
new file mode 100644
index 0000000..dfbbfaa
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/shared/build/classes/kotlin/main/com/facebook/react/model/ModelAutolinkingDependenciesPlatformAndroidJson.class differ
diff --git a/node_modules/@react-native/gradle-plugin/shared/build/classes/kotlin/main/com/facebook/react/model/ModelAutolinkingDependenciesPlatformJson.class b/node_modules/@react-native/gradle-plugin/shared/build/classes/kotlin/main/com/facebook/react/model/ModelAutolinkingDependenciesPlatformJson.class
new file mode 100644
index 0000000..f422352
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/shared/build/classes/kotlin/main/com/facebook/react/model/ModelAutolinkingDependenciesPlatformJson.class differ
diff --git a/node_modules/@react-native/gradle-plugin/shared/build/classes/kotlin/main/com/facebook/react/model/ModelAutolinkingProjectJson.class b/node_modules/@react-native/gradle-plugin/shared/build/classes/kotlin/main/com/facebook/react/model/ModelAutolinkingProjectJson.class
new file mode 100644
index 0000000..4de05f4
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/shared/build/classes/kotlin/main/com/facebook/react/model/ModelAutolinkingProjectJson.class differ
diff --git a/node_modules/@react-native/gradle-plugin/shared/build/classes/kotlin/main/com/facebook/react/model/ModelCodegenConfig.class b/node_modules/@react-native/gradle-plugin/shared/build/classes/kotlin/main/com/facebook/react/model/ModelCodegenConfig.class
new file mode 100644
index 0000000..aa4460c
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/shared/build/classes/kotlin/main/com/facebook/react/model/ModelCodegenConfig.class differ
diff --git a/node_modules/@react-native/gradle-plugin/shared/build/classes/kotlin/main/com/facebook/react/model/ModelCodegenConfigAndroid.class b/node_modules/@react-native/gradle-plugin/shared/build/classes/kotlin/main/com/facebook/react/model/ModelCodegenConfigAndroid.class
new file mode 100644
index 0000000..313dbc3
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/shared/build/classes/kotlin/main/com/facebook/react/model/ModelCodegenConfigAndroid.class differ
diff --git a/node_modules/@react-native/gradle-plugin/shared/build/classes/kotlin/main/com/facebook/react/model/ModelPackageJson.class b/node_modules/@react-native/gradle-plugin/shared/build/classes/kotlin/main/com/facebook/react/model/ModelPackageJson.class
new file mode 100644
index 0000000..6462f48
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/shared/build/classes/kotlin/main/com/facebook/react/model/ModelPackageJson.class differ
diff --git a/node_modules/@react-native/gradle-plugin/shared/build/classes/kotlin/main/com/facebook/react/utils/JsonUtils.class b/node_modules/@react-native/gradle-plugin/shared/build/classes/kotlin/main/com/facebook/react/utils/JsonUtils.class
new file mode 100644
index 0000000..32c8a02
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/shared/build/classes/kotlin/main/com/facebook/react/utils/JsonUtils.class differ
diff --git a/node_modules/@react-native/gradle-plugin/shared/build/classes/kotlin/main/com/facebook/react/utils/KotlinStdlibCompatUtils.class b/node_modules/@react-native/gradle-plugin/shared/build/classes/kotlin/main/com/facebook/react/utils/KotlinStdlibCompatUtils.class
new file mode 100644
index 0000000..11ec076
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/shared/build/classes/kotlin/main/com/facebook/react/utils/KotlinStdlibCompatUtils.class differ
diff --git a/node_modules/@react-native/gradle-plugin/shared/build/classes/kotlin/main/com/facebook/react/utils/Os.class b/node_modules/@react-native/gradle-plugin/shared/build/classes/kotlin/main/com/facebook/react/utils/Os.class
new file mode 100644
index 0000000..e6ac65a
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/shared/build/classes/kotlin/main/com/facebook/react/utils/Os.class differ
diff --git a/node_modules/@react-native/gradle-plugin/shared/build/classes/kotlin/main/com/facebook/react/utils/TaskUtilsKt.class b/node_modules/@react-native/gradle-plugin/shared/build/classes/kotlin/main/com/facebook/react/utils/TaskUtilsKt.class
new file mode 100644
index 0000000..e669182
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/shared/build/classes/kotlin/main/com/facebook/react/utils/TaskUtilsKt.class differ
diff --git a/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/inputs/source-to-output.tab b/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/inputs/source-to-output.tab
new file mode 100644
index 0000000..9c5d1df
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/inputs/source-to-output.tab differ
diff --git a/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/inputs/source-to-output.tab.keystream b/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/inputs/source-to-output.tab.keystream
new file mode 100644
index 0000000..7265b48
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/inputs/source-to-output.tab.keystream differ
diff --git a/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/inputs/source-to-output.tab.keystream.len b/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/inputs/source-to-output.tab.keystream.len
new file mode 100644
index 0000000..f9ffeb5
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/inputs/source-to-output.tab.keystream.len differ
diff --git a/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/inputs/source-to-output.tab.len b/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/inputs/source-to-output.tab.len
new file mode 100644
index 0000000..6f677df
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/inputs/source-to-output.tab.len differ
diff --git a/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/inputs/source-to-output.tab.values.at b/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/inputs/source-to-output.tab.values.at
new file mode 100644
index 0000000..0b21c9d
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/inputs/source-to-output.tab.values.at differ
diff --git a/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/inputs/source-to-output.tab_i b/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/inputs/source-to-output.tab_i
new file mode 100644
index 0000000..c80af2d
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/inputs/source-to-output.tab_i differ
diff --git a/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/inputs/source-to-output.tab_i.len b/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/inputs/source-to-output.tab_i.len
new file mode 100644
index 0000000..131e265
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/inputs/source-to-output.tab_i.len differ
diff --git a/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/class-attributes.tab b/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/class-attributes.tab
new file mode 100644
index 0000000..2c83dc4
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/class-attributes.tab differ
diff --git a/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/class-attributes.tab.keystream b/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/class-attributes.tab.keystream
new file mode 100644
index 0000000..f8859fe
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/class-attributes.tab.keystream differ
diff --git a/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/class-attributes.tab.keystream.len b/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/class-attributes.tab.keystream.len
new file mode 100644
index 0000000..fe229a7
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/class-attributes.tab.keystream.len differ
diff --git a/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/class-attributes.tab.len b/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/class-attributes.tab.len
new file mode 100644
index 0000000..a363176
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/class-attributes.tab.len differ
diff --git a/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/class-attributes.tab.values.at b/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/class-attributes.tab.values.at
new file mode 100644
index 0000000..f5ff014
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/class-attributes.tab.values.at differ
diff --git a/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/class-attributes.tab_i b/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/class-attributes.tab_i
new file mode 100644
index 0000000..80da1cd
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/class-attributes.tab_i differ
diff --git a/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/class-attributes.tab_i.len b/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/class-attributes.tab_i.len
new file mode 100644
index 0000000..131e265
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/class-attributes.tab_i.len differ
diff --git a/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/class-fq-name-to-source.tab b/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/class-fq-name-to-source.tab
new file mode 100644
index 0000000..64feca6
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/class-fq-name-to-source.tab differ
diff --git a/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/class-fq-name-to-source.tab.keystream b/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/class-fq-name-to-source.tab.keystream
new file mode 100644
index 0000000..f8859fe
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/class-fq-name-to-source.tab.keystream differ
diff --git a/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/class-fq-name-to-source.tab.keystream.len b/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/class-fq-name-to-source.tab.keystream.len
new file mode 100644
index 0000000..fe229a7
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/class-fq-name-to-source.tab.keystream.len differ
diff --git a/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/class-fq-name-to-source.tab.len b/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/class-fq-name-to-source.tab.len
new file mode 100644
index 0000000..a363176
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/class-fq-name-to-source.tab.len differ
diff --git a/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/class-fq-name-to-source.tab.values.at b/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/class-fq-name-to-source.tab.values.at
new file mode 100644
index 0000000..6008ad9
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/class-fq-name-to-source.tab.values.at differ
diff --git a/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/class-fq-name-to-source.tab_i b/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/class-fq-name-to-source.tab_i
new file mode 100644
index 0000000..80da1cd
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/class-fq-name-to-source.tab_i differ
diff --git a/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/class-fq-name-to-source.tab_i.len b/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/class-fq-name-to-source.tab_i.len
new file mode 100644
index 0000000..131e265
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/class-fq-name-to-source.tab_i.len differ
diff --git a/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/internal-name-to-source.tab b/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/internal-name-to-source.tab
new file mode 100644
index 0000000..8339574
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/internal-name-to-source.tab differ
diff --git a/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/internal-name-to-source.tab.keystream b/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/internal-name-to-source.tab.keystream
new file mode 100644
index 0000000..55708aa
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/internal-name-to-source.tab.keystream differ
diff --git a/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/internal-name-to-source.tab.keystream.len b/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/internal-name-to-source.tab.keystream.len
new file mode 100644
index 0000000..997b0b4
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/internal-name-to-source.tab.keystream.len differ
diff --git a/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/internal-name-to-source.tab.len b/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/internal-name-to-source.tab.len
new file mode 100644
index 0000000..6f677df
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/internal-name-to-source.tab.len differ
diff --git a/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/internal-name-to-source.tab.values.at b/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/internal-name-to-source.tab.values.at
new file mode 100644
index 0000000..40d57f8
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/internal-name-to-source.tab.values.at differ
diff --git a/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/internal-name-to-source.tab_i b/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/internal-name-to-source.tab_i
new file mode 100644
index 0000000..83c0d96
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/internal-name-to-source.tab_i differ
diff --git a/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/internal-name-to-source.tab_i.len b/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/internal-name-to-source.tab_i.len
new file mode 100644
index 0000000..131e265
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/internal-name-to-source.tab_i.len differ
diff --git a/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/package-parts.tab b/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/package-parts.tab
new file mode 100644
index 0000000..bdf584a
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/package-parts.tab differ
diff --git a/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/package-parts.tab.keystream b/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/package-parts.tab.keystream
new file mode 100644
index 0000000..e4297c3
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/package-parts.tab.keystream differ
diff --git a/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/package-parts.tab.keystream.len b/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/package-parts.tab.keystream.len
new file mode 100644
index 0000000..066dfb4
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/package-parts.tab.keystream.len differ
diff --git a/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/package-parts.tab.len b/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/package-parts.tab.len
new file mode 100644
index 0000000..2a17e6e
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/package-parts.tab.len differ
diff --git a/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/package-parts.tab.values.at b/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/package-parts.tab.values.at
new file mode 100644
index 0000000..46d6744
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/package-parts.tab.values.at differ
diff --git a/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/package-parts.tab_i b/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/package-parts.tab_i
new file mode 100644
index 0000000..4fcb8cb
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/package-parts.tab_i differ
diff --git a/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/package-parts.tab_i.len b/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/package-parts.tab_i.len
new file mode 100644
index 0000000..131e265
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/package-parts.tab_i.len differ
diff --git a/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/proto.tab b/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/proto.tab
new file mode 100644
index 0000000..f5e8e40
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/proto.tab differ
diff --git a/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/proto.tab.keystream b/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/proto.tab.keystream
new file mode 100644
index 0000000..c300625
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/proto.tab.keystream differ
diff --git a/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/proto.tab.keystream.len b/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/proto.tab.keystream.len
new file mode 100644
index 0000000..e6543bb
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/proto.tab.keystream.len differ
diff --git a/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/proto.tab.len b/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/proto.tab.len
new file mode 100644
index 0000000..003bc0e
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/proto.tab.len differ
diff --git a/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/proto.tab.values.at b/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/proto.tab.values.at
new file mode 100644
index 0000000..0a117d4
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/proto.tab.values.at differ
diff --git a/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/proto.tab_i b/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/proto.tab_i
new file mode 100644
index 0000000..e6866cf
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/proto.tab_i differ
diff --git a/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/proto.tab_i.len b/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/proto.tab_i.len
new file mode 100644
index 0000000..131e265
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/proto.tab_i.len differ
diff --git a/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/source-to-classes.tab b/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/source-to-classes.tab
new file mode 100644
index 0000000..ec48cfa
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/source-to-classes.tab differ
diff --git a/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/source-to-classes.tab.keystream b/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/source-to-classes.tab.keystream
new file mode 100644
index 0000000..7265b48
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/source-to-classes.tab.keystream differ
diff --git a/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/source-to-classes.tab.keystream.len b/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/source-to-classes.tab.keystream.len
new file mode 100644
index 0000000..f9ffeb5
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/source-to-classes.tab.keystream.len differ
diff --git a/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/source-to-classes.tab.len b/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/source-to-classes.tab.len
new file mode 100644
index 0000000..6f677df
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/source-to-classes.tab.len differ
diff --git a/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/source-to-classes.tab.values.at b/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/source-to-classes.tab.values.at
new file mode 100644
index 0000000..3c60f58
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/source-to-classes.tab.values.at differ
diff --git a/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/source-to-classes.tab_i b/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/source-to-classes.tab_i
new file mode 100644
index 0000000..c80af2d
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/source-to-classes.tab_i differ
diff --git a/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/source-to-classes.tab_i.len b/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/source-to-classes.tab_i.len
new file mode 100644
index 0000000..131e265
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/jvm/kotlin/source-to-classes.tab_i.len differ
diff --git a/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/counters.tab b/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/counters.tab
new file mode 100644
index 0000000..1708601
--- /dev/null
+++ b/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/counters.tab
@@ -0,0 +1,2 @@
+13
+0
\ No newline at end of file
diff --git a/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/file-to-id.tab b/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/file-to-id.tab
new file mode 100644
index 0000000..a26bd21
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/file-to-id.tab differ
diff --git a/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/file-to-id.tab.keystream b/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/file-to-id.tab.keystream
new file mode 100644
index 0000000..7265b48
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/file-to-id.tab.keystream differ
diff --git a/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/file-to-id.tab.keystream.len b/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/file-to-id.tab.keystream.len
new file mode 100644
index 0000000..f9ffeb5
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/file-to-id.tab.keystream.len differ
diff --git a/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/file-to-id.tab.len b/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/file-to-id.tab.len
new file mode 100644
index 0000000..6f677df
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/file-to-id.tab.len differ
diff --git a/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/file-to-id.tab.values.at b/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/file-to-id.tab.values.at
new file mode 100644
index 0000000..563a8cc
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/file-to-id.tab.values.at differ
diff --git a/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/file-to-id.tab_i b/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/file-to-id.tab_i
new file mode 100644
index 0000000..c80af2d
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/file-to-id.tab_i differ
diff --git a/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/file-to-id.tab_i.len b/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/file-to-id.tab_i.len
new file mode 100644
index 0000000..131e265
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/file-to-id.tab_i.len differ
diff --git a/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/id-to-file.tab b/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/id-to-file.tab
new file mode 100644
index 0000000..ac0bd5e
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/id-to-file.tab differ
diff --git a/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/id-to-file.tab.keystream b/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/id-to-file.tab.keystream
new file mode 100644
index 0000000..c5d7dcc
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/id-to-file.tab.keystream differ
diff --git a/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/id-to-file.tab.keystream.len b/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/id-to-file.tab.keystream.len
new file mode 100644
index 0000000..21cf4e2
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/id-to-file.tab.keystream.len differ
diff --git a/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/id-to-file.tab.len b/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/id-to-file.tab.len
new file mode 100644
index 0000000..6f677df
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/id-to-file.tab.len differ
diff --git a/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/id-to-file.tab.values.at b/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/id-to-file.tab.values.at
new file mode 100644
index 0000000..3aec195
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/id-to-file.tab.values.at differ
diff --git a/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/id-to-file.tab_i b/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/id-to-file.tab_i
new file mode 100644
index 0000000..d2eee88
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/id-to-file.tab_i differ
diff --git a/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/id-to-file.tab_i.len b/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/id-to-file.tab_i.len
new file mode 100644
index 0000000..131e265
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/id-to-file.tab_i.len differ
diff --git a/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/lookups.tab b/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/lookups.tab
new file mode 100644
index 0000000..b884388
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/lookups.tab differ
diff --git a/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/lookups.tab.keystream b/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/lookups.tab.keystream
new file mode 100644
index 0000000..f8ebf4f
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/lookups.tab.keystream differ
diff --git a/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/lookups.tab.keystream.len b/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/lookups.tab.keystream.len
new file mode 100644
index 0000000..16926b2
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/lookups.tab.keystream.len differ
diff --git a/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/lookups.tab.len b/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/lookups.tab.len
new file mode 100644
index 0000000..5148a33
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/lookups.tab.len differ
diff --git a/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/lookups.tab.values.at b/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/lookups.tab.values.at
new file mode 100644
index 0000000..88ff801
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/lookups.tab.values.at differ
diff --git a/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/lookups.tab_i b/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/lookups.tab_i
new file mode 100644
index 0000000..a1a144d
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/lookups.tab_i differ
diff --git a/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/lookups.tab_i.len b/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/lookups.tab_i.len
new file mode 100644
index 0000000..131e265
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/lookups.tab_i.len differ
diff --git a/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/last-build.bin b/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/last-build.bin
new file mode 100644
index 0000000..8f4059c
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/cacheable/last-build.bin differ
diff --git a/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/classpath-snapshot/shrunk-classpath-snapshot.bin b/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/classpath-snapshot/shrunk-classpath-snapshot.bin
new file mode 100644
index 0000000..2c051a2
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/classpath-snapshot/shrunk-classpath-snapshot.bin differ
diff --git a/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/local-state/build-history.bin b/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/local-state/build-history.bin
new file mode 100644
index 0000000..0ea2f26
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/shared/build/kotlin/compileKotlin/local-state/build-history.bin differ
diff --git a/node_modules/@react-native/gradle-plugin/shared/build/libs/shared.jar b/node_modules/@react-native/gradle-plugin/shared/build/libs/shared.jar
new file mode 100644
index 0000000..e8373d5
Binary files /dev/null and b/node_modules/@react-native/gradle-plugin/shared/build/libs/shared.jar differ
diff --git a/node_modules/@react-native/gradle-plugin/shared/build/tmp/jar/MANIFEST.MF b/node_modules/@react-native/gradle-plugin/shared/build/tmp/jar/MANIFEST.MF
new file mode 100644
index 0000000..59499bc
--- /dev/null
+++ b/node_modules/@react-native/gradle-plugin/shared/build/tmp/jar/MANIFEST.MF
@@ -0,0 +1,2 @@
+Manifest-Version: 1.0
+
